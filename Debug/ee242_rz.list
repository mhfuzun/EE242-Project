
ee242_rz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005424  08005424  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800542c  0800542c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08005440  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08005440  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c9c6  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b40  00000000  00000000  0002ca3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093f  00000000  00000000  0002f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014dbe  00000000  00000000  0002fa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcd6  00000000  00000000  00044855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085cde  00000000  00000000  0005252b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c7c  00000000  00000000  000d820c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000dae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005360 	.word	0x08005360

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005360 	.word	0x08005360

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f824 	bl	800029c <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_d2uiz>:
 8000260:	b570      	push	{r4, r5, r6, lr}
 8000262:	2200      	movs	r2, #0
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__aeabi_d2uiz+0x38>)
 8000266:	0004      	movs	r4, r0
 8000268:	000d      	movs	r5, r1
 800026a:	f001 fb4d 	bl	8001908 <__aeabi_dcmpge>
 800026e:	2800      	cmp	r0, #0
 8000270:	d104      	bne.n	800027c <__aeabi_d2uiz+0x1c>
 8000272:	0020      	movs	r0, r4
 8000274:	0029      	movs	r1, r5
 8000276:	f001 faad 	bl	80017d4 <__aeabi_d2iz>
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <__aeabi_d2uiz+0x38>)
 800027e:	2200      	movs	r2, #0
 8000280:	0020      	movs	r0, r4
 8000282:	0029      	movs	r1, r5
 8000284:	f000 ff24 	bl	80010d0 <__aeabi_dsub>
 8000288:	f001 faa4 	bl	80017d4 <__aeabi_d2iz>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	061b      	lsls	r3, r3, #24
 8000290:	469c      	mov	ip, r3
 8000292:	4460      	add	r0, ip
 8000294:	e7f1      	b.n	800027a <__aeabi_d2uiz+0x1a>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	41e00000 	.word	0x41e00000

0800029c <__udivmoddi4>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	4657      	mov	r7, sl
 80002a0:	464e      	mov	r6, r9
 80002a2:	4645      	mov	r5, r8
 80002a4:	46de      	mov	lr, fp
 80002a6:	b5e0      	push	{r5, r6, r7, lr}
 80002a8:	0004      	movs	r4, r0
 80002aa:	000d      	movs	r5, r1
 80002ac:	4692      	mov	sl, r2
 80002ae:	4699      	mov	r9, r3
 80002b0:	b083      	sub	sp, #12
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d830      	bhi.n	8000318 <__udivmoddi4+0x7c>
 80002b6:	d02d      	beq.n	8000314 <__udivmoddi4+0x78>
 80002b8:	4649      	mov	r1, r9
 80002ba:	4650      	mov	r0, sl
 80002bc:	f001 fb4c 	bl	8001958 <__clzdi2>
 80002c0:	0029      	movs	r1, r5
 80002c2:	0006      	movs	r6, r0
 80002c4:	0020      	movs	r0, r4
 80002c6:	f001 fb47 	bl	8001958 <__clzdi2>
 80002ca:	1a33      	subs	r3, r6, r0
 80002cc:	4698      	mov	r8, r3
 80002ce:	3b20      	subs	r3, #32
 80002d0:	d434      	bmi.n	800033c <__udivmoddi4+0xa0>
 80002d2:	469b      	mov	fp, r3
 80002d4:	4653      	mov	r3, sl
 80002d6:	465a      	mov	r2, fp
 80002d8:	4093      	lsls	r3, r2
 80002da:	4642      	mov	r2, r8
 80002dc:	001f      	movs	r7, r3
 80002de:	4653      	mov	r3, sl
 80002e0:	4093      	lsls	r3, r2
 80002e2:	001e      	movs	r6, r3
 80002e4:	42af      	cmp	r7, r5
 80002e6:	d83b      	bhi.n	8000360 <__udivmoddi4+0xc4>
 80002e8:	42af      	cmp	r7, r5
 80002ea:	d100      	bne.n	80002ee <__udivmoddi4+0x52>
 80002ec:	e079      	b.n	80003e2 <__udivmoddi4+0x146>
 80002ee:	465b      	mov	r3, fp
 80002f0:	1ba4      	subs	r4, r4, r6
 80002f2:	41bd      	sbcs	r5, r7
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	da00      	bge.n	80002fa <__udivmoddi4+0x5e>
 80002f8:	e076      	b.n	80003e8 <__udivmoddi4+0x14c>
 80002fa:	2200      	movs	r2, #0
 80002fc:	2300      	movs	r3, #0
 80002fe:	9200      	str	r2, [sp, #0]
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	2301      	movs	r3, #1
 8000304:	465a      	mov	r2, fp
 8000306:	4093      	lsls	r3, r2
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	2301      	movs	r3, #1
 800030c:	4642      	mov	r2, r8
 800030e:	4093      	lsls	r3, r2
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	e029      	b.n	8000368 <__udivmoddi4+0xcc>
 8000314:	4282      	cmp	r2, r0
 8000316:	d9cf      	bls.n	80002b8 <__udivmoddi4+0x1c>
 8000318:	2200      	movs	r2, #0
 800031a:	2300      	movs	r3, #0
 800031c:	9200      	str	r2, [sp, #0]
 800031e:	9301      	str	r3, [sp, #4]
 8000320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <__udivmoddi4+0x8e>
 8000326:	601c      	str	r4, [r3, #0]
 8000328:	605d      	str	r5, [r3, #4]
 800032a:	9800      	ldr	r0, [sp, #0]
 800032c:	9901      	ldr	r1, [sp, #4]
 800032e:	b003      	add	sp, #12
 8000330:	bcf0      	pop	{r4, r5, r6, r7}
 8000332:	46bb      	mov	fp, r7
 8000334:	46b2      	mov	sl, r6
 8000336:	46a9      	mov	r9, r5
 8000338:	46a0      	mov	r8, r4
 800033a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800033c:	4642      	mov	r2, r8
 800033e:	469b      	mov	fp, r3
 8000340:	2320      	movs	r3, #32
 8000342:	1a9b      	subs	r3, r3, r2
 8000344:	4652      	mov	r2, sl
 8000346:	40da      	lsrs	r2, r3
 8000348:	4641      	mov	r1, r8
 800034a:	0013      	movs	r3, r2
 800034c:	464a      	mov	r2, r9
 800034e:	408a      	lsls	r2, r1
 8000350:	0017      	movs	r7, r2
 8000352:	4642      	mov	r2, r8
 8000354:	431f      	orrs	r7, r3
 8000356:	4653      	mov	r3, sl
 8000358:	4093      	lsls	r3, r2
 800035a:	001e      	movs	r6, r3
 800035c:	42af      	cmp	r7, r5
 800035e:	d9c3      	bls.n	80002e8 <__udivmoddi4+0x4c>
 8000360:	2200      	movs	r2, #0
 8000362:	2300      	movs	r3, #0
 8000364:	9200      	str	r2, [sp, #0]
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	4643      	mov	r3, r8
 800036a:	2b00      	cmp	r3, #0
 800036c:	d0d8      	beq.n	8000320 <__udivmoddi4+0x84>
 800036e:	07fb      	lsls	r3, r7, #31
 8000370:	0872      	lsrs	r2, r6, #1
 8000372:	431a      	orrs	r2, r3
 8000374:	4646      	mov	r6, r8
 8000376:	087b      	lsrs	r3, r7, #1
 8000378:	e00e      	b.n	8000398 <__udivmoddi4+0xfc>
 800037a:	42ab      	cmp	r3, r5
 800037c:	d101      	bne.n	8000382 <__udivmoddi4+0xe6>
 800037e:	42a2      	cmp	r2, r4
 8000380:	d80c      	bhi.n	800039c <__udivmoddi4+0x100>
 8000382:	1aa4      	subs	r4, r4, r2
 8000384:	419d      	sbcs	r5, r3
 8000386:	2001      	movs	r0, #1
 8000388:	1924      	adds	r4, r4, r4
 800038a:	416d      	adcs	r5, r5
 800038c:	2100      	movs	r1, #0
 800038e:	3e01      	subs	r6, #1
 8000390:	1824      	adds	r4, r4, r0
 8000392:	414d      	adcs	r5, r1
 8000394:	2e00      	cmp	r6, #0
 8000396:	d006      	beq.n	80003a6 <__udivmoddi4+0x10a>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d9ee      	bls.n	800037a <__udivmoddi4+0xde>
 800039c:	3e01      	subs	r6, #1
 800039e:	1924      	adds	r4, r4, r4
 80003a0:	416d      	adcs	r5, r5
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d1f8      	bne.n	8000398 <__udivmoddi4+0xfc>
 80003a6:	9800      	ldr	r0, [sp, #0]
 80003a8:	9901      	ldr	r1, [sp, #4]
 80003aa:	465b      	mov	r3, fp
 80003ac:	1900      	adds	r0, r0, r4
 80003ae:	4169      	adcs	r1, r5
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	db24      	blt.n	80003fe <__udivmoddi4+0x162>
 80003b4:	002b      	movs	r3, r5
 80003b6:	465a      	mov	r2, fp
 80003b8:	4644      	mov	r4, r8
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	002a      	movs	r2, r5
 80003be:	40e2      	lsrs	r2, r4
 80003c0:	001c      	movs	r4, r3
 80003c2:	465b      	mov	r3, fp
 80003c4:	0015      	movs	r5, r2
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	db2a      	blt.n	8000420 <__udivmoddi4+0x184>
 80003ca:	0026      	movs	r6, r4
 80003cc:	409e      	lsls	r6, r3
 80003ce:	0033      	movs	r3, r6
 80003d0:	0026      	movs	r6, r4
 80003d2:	4647      	mov	r7, r8
 80003d4:	40be      	lsls	r6, r7
 80003d6:	0032      	movs	r2, r6
 80003d8:	1a80      	subs	r0, r0, r2
 80003da:	4199      	sbcs	r1, r3
 80003dc:	9000      	str	r0, [sp, #0]
 80003de:	9101      	str	r1, [sp, #4]
 80003e0:	e79e      	b.n	8000320 <__udivmoddi4+0x84>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d8bc      	bhi.n	8000360 <__udivmoddi4+0xc4>
 80003e6:	e782      	b.n	80002ee <__udivmoddi4+0x52>
 80003e8:	4642      	mov	r2, r8
 80003ea:	2320      	movs	r3, #32
 80003ec:	2100      	movs	r1, #0
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	9100      	str	r1, [sp, #0]
 80003f4:	9201      	str	r2, [sp, #4]
 80003f6:	2201      	movs	r2, #1
 80003f8:	40da      	lsrs	r2, r3
 80003fa:	9201      	str	r2, [sp, #4]
 80003fc:	e785      	b.n	800030a <__udivmoddi4+0x6e>
 80003fe:	4642      	mov	r2, r8
 8000400:	2320      	movs	r3, #32
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	002a      	movs	r2, r5
 8000406:	4646      	mov	r6, r8
 8000408:	409a      	lsls	r2, r3
 800040a:	0023      	movs	r3, r4
 800040c:	40f3      	lsrs	r3, r6
 800040e:	4644      	mov	r4, r8
 8000410:	4313      	orrs	r3, r2
 8000412:	002a      	movs	r2, r5
 8000414:	40e2      	lsrs	r2, r4
 8000416:	001c      	movs	r4, r3
 8000418:	465b      	mov	r3, fp
 800041a:	0015      	movs	r5, r2
 800041c:	2b00      	cmp	r3, #0
 800041e:	dad4      	bge.n	80003ca <__udivmoddi4+0x12e>
 8000420:	4642      	mov	r2, r8
 8000422:	002f      	movs	r7, r5
 8000424:	2320      	movs	r3, #32
 8000426:	0026      	movs	r6, r4
 8000428:	4097      	lsls	r7, r2
 800042a:	1a9b      	subs	r3, r3, r2
 800042c:	40de      	lsrs	r6, r3
 800042e:	003b      	movs	r3, r7
 8000430:	4333      	orrs	r3, r6
 8000432:	e7cd      	b.n	80003d0 <__udivmoddi4+0x134>

08000434 <__aeabi_dadd>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	0004      	movs	r4, r0
 800043e:	b5c0      	push	{r6, r7, lr}
 8000440:	001f      	movs	r7, r3
 8000442:	030b      	lsls	r3, r1, #12
 8000444:	0010      	movs	r0, r2
 8000446:	004e      	lsls	r6, r1, #1
 8000448:	0a5b      	lsrs	r3, r3, #9
 800044a:	0fcd      	lsrs	r5, r1, #31
 800044c:	0f61      	lsrs	r1, r4, #29
 800044e:	007a      	lsls	r2, r7, #1
 8000450:	4319      	orrs	r1, r3
 8000452:	00e3      	lsls	r3, r4, #3
 8000454:	033c      	lsls	r4, r7, #12
 8000456:	0fff      	lsrs	r7, r7, #31
 8000458:	46bc      	mov	ip, r7
 800045a:	0a64      	lsrs	r4, r4, #9
 800045c:	0f47      	lsrs	r7, r0, #29
 800045e:	4327      	orrs	r7, r4
 8000460:	0d76      	lsrs	r6, r6, #21
 8000462:	0d52      	lsrs	r2, r2, #21
 8000464:	00c0      	lsls	r0, r0, #3
 8000466:	46b9      	mov	r9, r7
 8000468:	4680      	mov	r8, r0
 800046a:	1ab7      	subs	r7, r6, r2
 800046c:	4565      	cmp	r5, ip
 800046e:	d100      	bne.n	8000472 <__aeabi_dadd+0x3e>
 8000470:	e09b      	b.n	80005aa <__aeabi_dadd+0x176>
 8000472:	2f00      	cmp	r7, #0
 8000474:	dc00      	bgt.n	8000478 <__aeabi_dadd+0x44>
 8000476:	e084      	b.n	8000582 <__aeabi_dadd+0x14e>
 8000478:	2a00      	cmp	r2, #0
 800047a:	d100      	bne.n	800047e <__aeabi_dadd+0x4a>
 800047c:	e0be      	b.n	80005fc <__aeabi_dadd+0x1c8>
 800047e:	4ac8      	ldr	r2, [pc, #800]	; (80007a0 <__aeabi_dadd+0x36c>)
 8000480:	4296      	cmp	r6, r2
 8000482:	d100      	bne.n	8000486 <__aeabi_dadd+0x52>
 8000484:	e124      	b.n	80006d0 <__aeabi_dadd+0x29c>
 8000486:	2280      	movs	r2, #128	; 0x80
 8000488:	464c      	mov	r4, r9
 800048a:	0412      	lsls	r2, r2, #16
 800048c:	4314      	orrs	r4, r2
 800048e:	46a1      	mov	r9, r4
 8000490:	2f38      	cmp	r7, #56	; 0x38
 8000492:	dd00      	ble.n	8000496 <__aeabi_dadd+0x62>
 8000494:	e167      	b.n	8000766 <__aeabi_dadd+0x332>
 8000496:	2f1f      	cmp	r7, #31
 8000498:	dd00      	ble.n	800049c <__aeabi_dadd+0x68>
 800049a:	e1d6      	b.n	800084a <__aeabi_dadd+0x416>
 800049c:	2220      	movs	r2, #32
 800049e:	464c      	mov	r4, r9
 80004a0:	1bd2      	subs	r2, r2, r7
 80004a2:	4094      	lsls	r4, r2
 80004a4:	46a2      	mov	sl, r4
 80004a6:	4644      	mov	r4, r8
 80004a8:	40fc      	lsrs	r4, r7
 80004aa:	0020      	movs	r0, r4
 80004ac:	4654      	mov	r4, sl
 80004ae:	4304      	orrs	r4, r0
 80004b0:	4640      	mov	r0, r8
 80004b2:	4090      	lsls	r0, r2
 80004b4:	1e42      	subs	r2, r0, #1
 80004b6:	4190      	sbcs	r0, r2
 80004b8:	464a      	mov	r2, r9
 80004ba:	40fa      	lsrs	r2, r7
 80004bc:	4304      	orrs	r4, r0
 80004be:	1a89      	subs	r1, r1, r2
 80004c0:	1b1c      	subs	r4, r3, r4
 80004c2:	42a3      	cmp	r3, r4
 80004c4:	4192      	sbcs	r2, r2
 80004c6:	4252      	negs	r2, r2
 80004c8:	1a8b      	subs	r3, r1, r2
 80004ca:	469a      	mov	sl, r3
 80004cc:	4653      	mov	r3, sl
 80004ce:	021b      	lsls	r3, r3, #8
 80004d0:	d400      	bmi.n	80004d4 <__aeabi_dadd+0xa0>
 80004d2:	e0d4      	b.n	800067e <__aeabi_dadd+0x24a>
 80004d4:	4653      	mov	r3, sl
 80004d6:	025a      	lsls	r2, r3, #9
 80004d8:	0a53      	lsrs	r3, r2, #9
 80004da:	469a      	mov	sl, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d100      	bne.n	80004e4 <__aeabi_dadd+0xb0>
 80004e2:	e104      	b.n	80006ee <__aeabi_dadd+0x2ba>
 80004e4:	4650      	mov	r0, sl
 80004e6:	f001 fa19 	bl	800191c <__clzsi2>
 80004ea:	0003      	movs	r3, r0
 80004ec:	3b08      	subs	r3, #8
 80004ee:	2220      	movs	r2, #32
 80004f0:	0020      	movs	r0, r4
 80004f2:	1ad2      	subs	r2, r2, r3
 80004f4:	4651      	mov	r1, sl
 80004f6:	40d0      	lsrs	r0, r2
 80004f8:	4099      	lsls	r1, r3
 80004fa:	0002      	movs	r2, r0
 80004fc:	409c      	lsls	r4, r3
 80004fe:	430a      	orrs	r2, r1
 8000500:	42b3      	cmp	r3, r6
 8000502:	da00      	bge.n	8000506 <__aeabi_dadd+0xd2>
 8000504:	e102      	b.n	800070c <__aeabi_dadd+0x2d8>
 8000506:	1b9b      	subs	r3, r3, r6
 8000508:	1c59      	adds	r1, r3, #1
 800050a:	291f      	cmp	r1, #31
 800050c:	dd00      	ble.n	8000510 <__aeabi_dadd+0xdc>
 800050e:	e0a7      	b.n	8000660 <__aeabi_dadd+0x22c>
 8000510:	2320      	movs	r3, #32
 8000512:	0010      	movs	r0, r2
 8000514:	0026      	movs	r6, r4
 8000516:	1a5b      	subs	r3, r3, r1
 8000518:	409c      	lsls	r4, r3
 800051a:	4098      	lsls	r0, r3
 800051c:	40ce      	lsrs	r6, r1
 800051e:	40ca      	lsrs	r2, r1
 8000520:	1e63      	subs	r3, r4, #1
 8000522:	419c      	sbcs	r4, r3
 8000524:	4330      	orrs	r0, r6
 8000526:	4692      	mov	sl, r2
 8000528:	2600      	movs	r6, #0
 800052a:	4304      	orrs	r4, r0
 800052c:	0763      	lsls	r3, r4, #29
 800052e:	d009      	beq.n	8000544 <__aeabi_dadd+0x110>
 8000530:	230f      	movs	r3, #15
 8000532:	4023      	ands	r3, r4
 8000534:	2b04      	cmp	r3, #4
 8000536:	d005      	beq.n	8000544 <__aeabi_dadd+0x110>
 8000538:	1d23      	adds	r3, r4, #4
 800053a:	42a3      	cmp	r3, r4
 800053c:	41a4      	sbcs	r4, r4
 800053e:	4264      	negs	r4, r4
 8000540:	44a2      	add	sl, r4
 8000542:	001c      	movs	r4, r3
 8000544:	4653      	mov	r3, sl
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	d400      	bmi.n	800054c <__aeabi_dadd+0x118>
 800054a:	e09b      	b.n	8000684 <__aeabi_dadd+0x250>
 800054c:	4b94      	ldr	r3, [pc, #592]	; (80007a0 <__aeabi_dadd+0x36c>)
 800054e:	3601      	adds	r6, #1
 8000550:	429e      	cmp	r6, r3
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0x122>
 8000554:	e0b8      	b.n	80006c8 <__aeabi_dadd+0x294>
 8000556:	4653      	mov	r3, sl
 8000558:	4992      	ldr	r1, [pc, #584]	; (80007a4 <__aeabi_dadd+0x370>)
 800055a:	08e4      	lsrs	r4, r4, #3
 800055c:	400b      	ands	r3, r1
 800055e:	0019      	movs	r1, r3
 8000560:	075b      	lsls	r3, r3, #29
 8000562:	4323      	orrs	r3, r4
 8000564:	0572      	lsls	r2, r6, #21
 8000566:	024c      	lsls	r4, r1, #9
 8000568:	0b24      	lsrs	r4, r4, #12
 800056a:	0d52      	lsrs	r2, r2, #21
 800056c:	0512      	lsls	r2, r2, #20
 800056e:	07ed      	lsls	r5, r5, #31
 8000570:	4322      	orrs	r2, r4
 8000572:	432a      	orrs	r2, r5
 8000574:	0018      	movs	r0, r3
 8000576:	0011      	movs	r1, r2
 8000578:	bce0      	pop	{r5, r6, r7}
 800057a:	46ba      	mov	sl, r7
 800057c:	46b1      	mov	r9, r6
 800057e:	46a8      	mov	r8, r5
 8000580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000582:	2f00      	cmp	r7, #0
 8000584:	d048      	beq.n	8000618 <__aeabi_dadd+0x1e4>
 8000586:	1b97      	subs	r7, r2, r6
 8000588:	2e00      	cmp	r6, #0
 800058a:	d000      	beq.n	800058e <__aeabi_dadd+0x15a>
 800058c:	e10e      	b.n	80007ac <__aeabi_dadd+0x378>
 800058e:	000c      	movs	r4, r1
 8000590:	431c      	orrs	r4, r3
 8000592:	d100      	bne.n	8000596 <__aeabi_dadd+0x162>
 8000594:	e1b7      	b.n	8000906 <__aeabi_dadd+0x4d2>
 8000596:	1e7c      	subs	r4, r7, #1
 8000598:	2f01      	cmp	r7, #1
 800059a:	d100      	bne.n	800059e <__aeabi_dadd+0x16a>
 800059c:	e226      	b.n	80009ec <__aeabi_dadd+0x5b8>
 800059e:	4d80      	ldr	r5, [pc, #512]	; (80007a0 <__aeabi_dadd+0x36c>)
 80005a0:	42af      	cmp	r7, r5
 80005a2:	d100      	bne.n	80005a6 <__aeabi_dadd+0x172>
 80005a4:	e1d5      	b.n	8000952 <__aeabi_dadd+0x51e>
 80005a6:	0027      	movs	r7, r4
 80005a8:	e107      	b.n	80007ba <__aeabi_dadd+0x386>
 80005aa:	2f00      	cmp	r7, #0
 80005ac:	dc00      	bgt.n	80005b0 <__aeabi_dadd+0x17c>
 80005ae:	e0b2      	b.n	8000716 <__aeabi_dadd+0x2e2>
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	d047      	beq.n	8000644 <__aeabi_dadd+0x210>
 80005b4:	4a7a      	ldr	r2, [pc, #488]	; (80007a0 <__aeabi_dadd+0x36c>)
 80005b6:	4296      	cmp	r6, r2
 80005b8:	d100      	bne.n	80005bc <__aeabi_dadd+0x188>
 80005ba:	e089      	b.n	80006d0 <__aeabi_dadd+0x29c>
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	464c      	mov	r4, r9
 80005c0:	0412      	lsls	r2, r2, #16
 80005c2:	4314      	orrs	r4, r2
 80005c4:	46a1      	mov	r9, r4
 80005c6:	2f38      	cmp	r7, #56	; 0x38
 80005c8:	dc6b      	bgt.n	80006a2 <__aeabi_dadd+0x26e>
 80005ca:	2f1f      	cmp	r7, #31
 80005cc:	dc00      	bgt.n	80005d0 <__aeabi_dadd+0x19c>
 80005ce:	e16e      	b.n	80008ae <__aeabi_dadd+0x47a>
 80005d0:	003a      	movs	r2, r7
 80005d2:	4648      	mov	r0, r9
 80005d4:	3a20      	subs	r2, #32
 80005d6:	40d0      	lsrs	r0, r2
 80005d8:	4684      	mov	ip, r0
 80005da:	2f20      	cmp	r7, #32
 80005dc:	d007      	beq.n	80005ee <__aeabi_dadd+0x1ba>
 80005de:	2240      	movs	r2, #64	; 0x40
 80005e0:	4648      	mov	r0, r9
 80005e2:	1bd2      	subs	r2, r2, r7
 80005e4:	4090      	lsls	r0, r2
 80005e6:	0002      	movs	r2, r0
 80005e8:	4640      	mov	r0, r8
 80005ea:	4310      	orrs	r0, r2
 80005ec:	4680      	mov	r8, r0
 80005ee:	4640      	mov	r0, r8
 80005f0:	1e42      	subs	r2, r0, #1
 80005f2:	4190      	sbcs	r0, r2
 80005f4:	4662      	mov	r2, ip
 80005f6:	0004      	movs	r4, r0
 80005f8:	4314      	orrs	r4, r2
 80005fa:	e057      	b.n	80006ac <__aeabi_dadd+0x278>
 80005fc:	464a      	mov	r2, r9
 80005fe:	4302      	orrs	r2, r0
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x1d0>
 8000602:	e103      	b.n	800080c <__aeabi_dadd+0x3d8>
 8000604:	1e7a      	subs	r2, r7, #1
 8000606:	2f01      	cmp	r7, #1
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x1d8>
 800060a:	e193      	b.n	8000934 <__aeabi_dadd+0x500>
 800060c:	4c64      	ldr	r4, [pc, #400]	; (80007a0 <__aeabi_dadd+0x36c>)
 800060e:	42a7      	cmp	r7, r4
 8000610:	d100      	bne.n	8000614 <__aeabi_dadd+0x1e0>
 8000612:	e18a      	b.n	800092a <__aeabi_dadd+0x4f6>
 8000614:	0017      	movs	r7, r2
 8000616:	e73b      	b.n	8000490 <__aeabi_dadd+0x5c>
 8000618:	4c63      	ldr	r4, [pc, #396]	; (80007a8 <__aeabi_dadd+0x374>)
 800061a:	1c72      	adds	r2, r6, #1
 800061c:	4222      	tst	r2, r4
 800061e:	d000      	beq.n	8000622 <__aeabi_dadd+0x1ee>
 8000620:	e0e0      	b.n	80007e4 <__aeabi_dadd+0x3b0>
 8000622:	000a      	movs	r2, r1
 8000624:	431a      	orrs	r2, r3
 8000626:	2e00      	cmp	r6, #0
 8000628:	d000      	beq.n	800062c <__aeabi_dadd+0x1f8>
 800062a:	e174      	b.n	8000916 <__aeabi_dadd+0x4e2>
 800062c:	2a00      	cmp	r2, #0
 800062e:	d100      	bne.n	8000632 <__aeabi_dadd+0x1fe>
 8000630:	e1d0      	b.n	80009d4 <__aeabi_dadd+0x5a0>
 8000632:	464a      	mov	r2, r9
 8000634:	4302      	orrs	r2, r0
 8000636:	d000      	beq.n	800063a <__aeabi_dadd+0x206>
 8000638:	e1e3      	b.n	8000a02 <__aeabi_dadd+0x5ce>
 800063a:	074a      	lsls	r2, r1, #29
 800063c:	08db      	lsrs	r3, r3, #3
 800063e:	4313      	orrs	r3, r2
 8000640:	08c9      	lsrs	r1, r1, #3
 8000642:	e029      	b.n	8000698 <__aeabi_dadd+0x264>
 8000644:	464a      	mov	r2, r9
 8000646:	4302      	orrs	r2, r0
 8000648:	d100      	bne.n	800064c <__aeabi_dadd+0x218>
 800064a:	e17d      	b.n	8000948 <__aeabi_dadd+0x514>
 800064c:	1e7a      	subs	r2, r7, #1
 800064e:	2f01      	cmp	r7, #1
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0x220>
 8000652:	e0e0      	b.n	8000816 <__aeabi_dadd+0x3e2>
 8000654:	4c52      	ldr	r4, [pc, #328]	; (80007a0 <__aeabi_dadd+0x36c>)
 8000656:	42a7      	cmp	r7, r4
 8000658:	d100      	bne.n	800065c <__aeabi_dadd+0x228>
 800065a:	e166      	b.n	800092a <__aeabi_dadd+0x4f6>
 800065c:	0017      	movs	r7, r2
 800065e:	e7b2      	b.n	80005c6 <__aeabi_dadd+0x192>
 8000660:	0010      	movs	r0, r2
 8000662:	3b1f      	subs	r3, #31
 8000664:	40d8      	lsrs	r0, r3
 8000666:	2920      	cmp	r1, #32
 8000668:	d003      	beq.n	8000672 <__aeabi_dadd+0x23e>
 800066a:	2340      	movs	r3, #64	; 0x40
 800066c:	1a5b      	subs	r3, r3, r1
 800066e:	409a      	lsls	r2, r3
 8000670:	4314      	orrs	r4, r2
 8000672:	1e63      	subs	r3, r4, #1
 8000674:	419c      	sbcs	r4, r3
 8000676:	2300      	movs	r3, #0
 8000678:	2600      	movs	r6, #0
 800067a:	469a      	mov	sl, r3
 800067c:	4304      	orrs	r4, r0
 800067e:	0763      	lsls	r3, r4, #29
 8000680:	d000      	beq.n	8000684 <__aeabi_dadd+0x250>
 8000682:	e755      	b.n	8000530 <__aeabi_dadd+0xfc>
 8000684:	4652      	mov	r2, sl
 8000686:	08e3      	lsrs	r3, r4, #3
 8000688:	0752      	lsls	r2, r2, #29
 800068a:	4313      	orrs	r3, r2
 800068c:	4652      	mov	r2, sl
 800068e:	0037      	movs	r7, r6
 8000690:	08d1      	lsrs	r1, r2, #3
 8000692:	4a43      	ldr	r2, [pc, #268]	; (80007a0 <__aeabi_dadd+0x36c>)
 8000694:	4297      	cmp	r7, r2
 8000696:	d01f      	beq.n	80006d8 <__aeabi_dadd+0x2a4>
 8000698:	0309      	lsls	r1, r1, #12
 800069a:	057a      	lsls	r2, r7, #21
 800069c:	0b0c      	lsrs	r4, r1, #12
 800069e:	0d52      	lsrs	r2, r2, #21
 80006a0:	e764      	b.n	800056c <__aeabi_dadd+0x138>
 80006a2:	4642      	mov	r2, r8
 80006a4:	464c      	mov	r4, r9
 80006a6:	4314      	orrs	r4, r2
 80006a8:	1e62      	subs	r2, r4, #1
 80006aa:	4194      	sbcs	r4, r2
 80006ac:	18e4      	adds	r4, r4, r3
 80006ae:	429c      	cmp	r4, r3
 80006b0:	4192      	sbcs	r2, r2
 80006b2:	4252      	negs	r2, r2
 80006b4:	4692      	mov	sl, r2
 80006b6:	448a      	add	sl, r1
 80006b8:	4653      	mov	r3, sl
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	d5df      	bpl.n	800067e <__aeabi_dadd+0x24a>
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <__aeabi_dadd+0x36c>)
 80006c0:	3601      	adds	r6, #1
 80006c2:	429e      	cmp	r6, r3
 80006c4:	d000      	beq.n	80006c8 <__aeabi_dadd+0x294>
 80006c6:	e0b3      	b.n	8000830 <__aeabi_dadd+0x3fc>
 80006c8:	0032      	movs	r2, r6
 80006ca:	2400      	movs	r4, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	e74d      	b.n	800056c <__aeabi_dadd+0x138>
 80006d0:	074a      	lsls	r2, r1, #29
 80006d2:	08db      	lsrs	r3, r3, #3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	08c9      	lsrs	r1, r1, #3
 80006d8:	001a      	movs	r2, r3
 80006da:	430a      	orrs	r2, r1
 80006dc:	d100      	bne.n	80006e0 <__aeabi_dadd+0x2ac>
 80006de:	e200      	b.n	8000ae2 <__aeabi_dadd+0x6ae>
 80006e0:	2480      	movs	r4, #128	; 0x80
 80006e2:	0324      	lsls	r4, r4, #12
 80006e4:	430c      	orrs	r4, r1
 80006e6:	0324      	lsls	r4, r4, #12
 80006e8:	4a2d      	ldr	r2, [pc, #180]	; (80007a0 <__aeabi_dadd+0x36c>)
 80006ea:	0b24      	lsrs	r4, r4, #12
 80006ec:	e73e      	b.n	800056c <__aeabi_dadd+0x138>
 80006ee:	0020      	movs	r0, r4
 80006f0:	f001 f914 	bl	800191c <__clzsi2>
 80006f4:	0003      	movs	r3, r0
 80006f6:	3318      	adds	r3, #24
 80006f8:	2b1f      	cmp	r3, #31
 80006fa:	dc00      	bgt.n	80006fe <__aeabi_dadd+0x2ca>
 80006fc:	e6f7      	b.n	80004ee <__aeabi_dadd+0xba>
 80006fe:	0022      	movs	r2, r4
 8000700:	3808      	subs	r0, #8
 8000702:	4082      	lsls	r2, r0
 8000704:	2400      	movs	r4, #0
 8000706:	42b3      	cmp	r3, r6
 8000708:	db00      	blt.n	800070c <__aeabi_dadd+0x2d8>
 800070a:	e6fc      	b.n	8000506 <__aeabi_dadd+0xd2>
 800070c:	1af6      	subs	r6, r6, r3
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <__aeabi_dadd+0x370>)
 8000710:	401a      	ands	r2, r3
 8000712:	4692      	mov	sl, r2
 8000714:	e70a      	b.n	800052c <__aeabi_dadd+0xf8>
 8000716:	2f00      	cmp	r7, #0
 8000718:	d02b      	beq.n	8000772 <__aeabi_dadd+0x33e>
 800071a:	1b97      	subs	r7, r2, r6
 800071c:	2e00      	cmp	r6, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x2ee>
 8000720:	e0b8      	b.n	8000894 <__aeabi_dadd+0x460>
 8000722:	4c1f      	ldr	r4, [pc, #124]	; (80007a0 <__aeabi_dadd+0x36c>)
 8000724:	42a2      	cmp	r2, r4
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0x2f6>
 8000728:	e11c      	b.n	8000964 <__aeabi_dadd+0x530>
 800072a:	2480      	movs	r4, #128	; 0x80
 800072c:	0424      	lsls	r4, r4, #16
 800072e:	4321      	orrs	r1, r4
 8000730:	2f38      	cmp	r7, #56	; 0x38
 8000732:	dd00      	ble.n	8000736 <__aeabi_dadd+0x302>
 8000734:	e11e      	b.n	8000974 <__aeabi_dadd+0x540>
 8000736:	2f1f      	cmp	r7, #31
 8000738:	dd00      	ble.n	800073c <__aeabi_dadd+0x308>
 800073a:	e19e      	b.n	8000a7a <__aeabi_dadd+0x646>
 800073c:	2620      	movs	r6, #32
 800073e:	000c      	movs	r4, r1
 8000740:	1bf6      	subs	r6, r6, r7
 8000742:	0018      	movs	r0, r3
 8000744:	40b3      	lsls	r3, r6
 8000746:	40b4      	lsls	r4, r6
 8000748:	40f8      	lsrs	r0, r7
 800074a:	1e5e      	subs	r6, r3, #1
 800074c:	41b3      	sbcs	r3, r6
 800074e:	40f9      	lsrs	r1, r7
 8000750:	4304      	orrs	r4, r0
 8000752:	431c      	orrs	r4, r3
 8000754:	4489      	add	r9, r1
 8000756:	4444      	add	r4, r8
 8000758:	4544      	cmp	r4, r8
 800075a:	419b      	sbcs	r3, r3
 800075c:	425b      	negs	r3, r3
 800075e:	444b      	add	r3, r9
 8000760:	469a      	mov	sl, r3
 8000762:	0016      	movs	r6, r2
 8000764:	e7a8      	b.n	80006b8 <__aeabi_dadd+0x284>
 8000766:	4642      	mov	r2, r8
 8000768:	464c      	mov	r4, r9
 800076a:	4314      	orrs	r4, r2
 800076c:	1e62      	subs	r2, r4, #1
 800076e:	4194      	sbcs	r4, r2
 8000770:	e6a6      	b.n	80004c0 <__aeabi_dadd+0x8c>
 8000772:	4c0d      	ldr	r4, [pc, #52]	; (80007a8 <__aeabi_dadd+0x374>)
 8000774:	1c72      	adds	r2, r6, #1
 8000776:	4222      	tst	r2, r4
 8000778:	d000      	beq.n	800077c <__aeabi_dadd+0x348>
 800077a:	e0a8      	b.n	80008ce <__aeabi_dadd+0x49a>
 800077c:	000a      	movs	r2, r1
 800077e:	431a      	orrs	r2, r3
 8000780:	2e00      	cmp	r6, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_dadd+0x352>
 8000784:	e10a      	b.n	800099c <__aeabi_dadd+0x568>
 8000786:	2a00      	cmp	r2, #0
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x358>
 800078a:	e15e      	b.n	8000a4a <__aeabi_dadd+0x616>
 800078c:	464a      	mov	r2, r9
 800078e:	4302      	orrs	r2, r0
 8000790:	d000      	beq.n	8000794 <__aeabi_dadd+0x360>
 8000792:	e161      	b.n	8000a58 <__aeabi_dadd+0x624>
 8000794:	074a      	lsls	r2, r1, #29
 8000796:	08db      	lsrs	r3, r3, #3
 8000798:	4313      	orrs	r3, r2
 800079a:	08c9      	lsrs	r1, r1, #3
 800079c:	e77c      	b.n	8000698 <__aeabi_dadd+0x264>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	000007ff 	.word	0x000007ff
 80007a4:	ff7fffff 	.word	0xff7fffff
 80007a8:	000007fe 	.word	0x000007fe
 80007ac:	4ccf      	ldr	r4, [pc, #828]	; (8000aec <__aeabi_dadd+0x6b8>)
 80007ae:	42a2      	cmp	r2, r4
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x380>
 80007b2:	e0ce      	b.n	8000952 <__aeabi_dadd+0x51e>
 80007b4:	2480      	movs	r4, #128	; 0x80
 80007b6:	0424      	lsls	r4, r4, #16
 80007b8:	4321      	orrs	r1, r4
 80007ba:	2f38      	cmp	r7, #56	; 0x38
 80007bc:	dc5b      	bgt.n	8000876 <__aeabi_dadd+0x442>
 80007be:	2f1f      	cmp	r7, #31
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_dadd+0x390>
 80007c2:	e0dc      	b.n	800097e <__aeabi_dadd+0x54a>
 80007c4:	2520      	movs	r5, #32
 80007c6:	000c      	movs	r4, r1
 80007c8:	1bed      	subs	r5, r5, r7
 80007ca:	001e      	movs	r6, r3
 80007cc:	40ab      	lsls	r3, r5
 80007ce:	40ac      	lsls	r4, r5
 80007d0:	40fe      	lsrs	r6, r7
 80007d2:	1e5d      	subs	r5, r3, #1
 80007d4:	41ab      	sbcs	r3, r5
 80007d6:	4334      	orrs	r4, r6
 80007d8:	40f9      	lsrs	r1, r7
 80007da:	431c      	orrs	r4, r3
 80007dc:	464b      	mov	r3, r9
 80007de:	1a5b      	subs	r3, r3, r1
 80007e0:	4699      	mov	r9, r3
 80007e2:	e04c      	b.n	800087e <__aeabi_dadd+0x44a>
 80007e4:	464a      	mov	r2, r9
 80007e6:	1a1c      	subs	r4, r3, r0
 80007e8:	1a88      	subs	r0, r1, r2
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	4192      	sbcs	r2, r2
 80007ee:	4252      	negs	r2, r2
 80007f0:	4692      	mov	sl, r2
 80007f2:	0002      	movs	r2, r0
 80007f4:	4650      	mov	r0, sl
 80007f6:	1a12      	subs	r2, r2, r0
 80007f8:	4692      	mov	sl, r2
 80007fa:	0212      	lsls	r2, r2, #8
 80007fc:	d478      	bmi.n	80008f0 <__aeabi_dadd+0x4bc>
 80007fe:	4653      	mov	r3, sl
 8000800:	4323      	orrs	r3, r4
 8000802:	d000      	beq.n	8000806 <__aeabi_dadd+0x3d2>
 8000804:	e66a      	b.n	80004dc <__aeabi_dadd+0xa8>
 8000806:	2100      	movs	r1, #0
 8000808:	2500      	movs	r5, #0
 800080a:	e745      	b.n	8000698 <__aeabi_dadd+0x264>
 800080c:	074a      	lsls	r2, r1, #29
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	4313      	orrs	r3, r2
 8000812:	08c9      	lsrs	r1, r1, #3
 8000814:	e73d      	b.n	8000692 <__aeabi_dadd+0x25e>
 8000816:	181c      	adds	r4, r3, r0
 8000818:	429c      	cmp	r4, r3
 800081a:	419b      	sbcs	r3, r3
 800081c:	4449      	add	r1, r9
 800081e:	468a      	mov	sl, r1
 8000820:	425b      	negs	r3, r3
 8000822:	449a      	add	sl, r3
 8000824:	4653      	mov	r3, sl
 8000826:	2601      	movs	r6, #1
 8000828:	021b      	lsls	r3, r3, #8
 800082a:	d400      	bmi.n	800082e <__aeabi_dadd+0x3fa>
 800082c:	e727      	b.n	800067e <__aeabi_dadd+0x24a>
 800082e:	2602      	movs	r6, #2
 8000830:	4652      	mov	r2, sl
 8000832:	4baf      	ldr	r3, [pc, #700]	; (8000af0 <__aeabi_dadd+0x6bc>)
 8000834:	2101      	movs	r1, #1
 8000836:	401a      	ands	r2, r3
 8000838:	0013      	movs	r3, r2
 800083a:	4021      	ands	r1, r4
 800083c:	0862      	lsrs	r2, r4, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	07dc      	lsls	r4, r3, #31
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	469a      	mov	sl, r3
 8000846:	4314      	orrs	r4, r2
 8000848:	e670      	b.n	800052c <__aeabi_dadd+0xf8>
 800084a:	003a      	movs	r2, r7
 800084c:	464c      	mov	r4, r9
 800084e:	3a20      	subs	r2, #32
 8000850:	40d4      	lsrs	r4, r2
 8000852:	46a4      	mov	ip, r4
 8000854:	2f20      	cmp	r7, #32
 8000856:	d007      	beq.n	8000868 <__aeabi_dadd+0x434>
 8000858:	2240      	movs	r2, #64	; 0x40
 800085a:	4648      	mov	r0, r9
 800085c:	1bd2      	subs	r2, r2, r7
 800085e:	4090      	lsls	r0, r2
 8000860:	0002      	movs	r2, r0
 8000862:	4640      	mov	r0, r8
 8000864:	4310      	orrs	r0, r2
 8000866:	4680      	mov	r8, r0
 8000868:	4640      	mov	r0, r8
 800086a:	1e42      	subs	r2, r0, #1
 800086c:	4190      	sbcs	r0, r2
 800086e:	4662      	mov	r2, ip
 8000870:	0004      	movs	r4, r0
 8000872:	4314      	orrs	r4, r2
 8000874:	e624      	b.n	80004c0 <__aeabi_dadd+0x8c>
 8000876:	4319      	orrs	r1, r3
 8000878:	000c      	movs	r4, r1
 800087a:	1e63      	subs	r3, r4, #1
 800087c:	419c      	sbcs	r4, r3
 800087e:	4643      	mov	r3, r8
 8000880:	1b1c      	subs	r4, r3, r4
 8000882:	45a0      	cmp	r8, r4
 8000884:	419b      	sbcs	r3, r3
 8000886:	4649      	mov	r1, r9
 8000888:	425b      	negs	r3, r3
 800088a:	1acb      	subs	r3, r1, r3
 800088c:	469a      	mov	sl, r3
 800088e:	4665      	mov	r5, ip
 8000890:	0016      	movs	r6, r2
 8000892:	e61b      	b.n	80004cc <__aeabi_dadd+0x98>
 8000894:	000c      	movs	r4, r1
 8000896:	431c      	orrs	r4, r3
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x468>
 800089a:	e0c7      	b.n	8000a2c <__aeabi_dadd+0x5f8>
 800089c:	1e7c      	subs	r4, r7, #1
 800089e:	2f01      	cmp	r7, #1
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x470>
 80008a2:	e0f9      	b.n	8000a98 <__aeabi_dadd+0x664>
 80008a4:	4e91      	ldr	r6, [pc, #580]	; (8000aec <__aeabi_dadd+0x6b8>)
 80008a6:	42b7      	cmp	r7, r6
 80008a8:	d05c      	beq.n	8000964 <__aeabi_dadd+0x530>
 80008aa:	0027      	movs	r7, r4
 80008ac:	e740      	b.n	8000730 <__aeabi_dadd+0x2fc>
 80008ae:	2220      	movs	r2, #32
 80008b0:	464c      	mov	r4, r9
 80008b2:	4640      	mov	r0, r8
 80008b4:	1bd2      	subs	r2, r2, r7
 80008b6:	4094      	lsls	r4, r2
 80008b8:	40f8      	lsrs	r0, r7
 80008ba:	4304      	orrs	r4, r0
 80008bc:	4640      	mov	r0, r8
 80008be:	4090      	lsls	r0, r2
 80008c0:	1e42      	subs	r2, r0, #1
 80008c2:	4190      	sbcs	r0, r2
 80008c4:	464a      	mov	r2, r9
 80008c6:	40fa      	lsrs	r2, r7
 80008c8:	4304      	orrs	r4, r0
 80008ca:	1889      	adds	r1, r1, r2
 80008cc:	e6ee      	b.n	80006ac <__aeabi_dadd+0x278>
 80008ce:	4c87      	ldr	r4, [pc, #540]	; (8000aec <__aeabi_dadd+0x6b8>)
 80008d0:	42a2      	cmp	r2, r4
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x4a2>
 80008d4:	e6f9      	b.n	80006ca <__aeabi_dadd+0x296>
 80008d6:	1818      	adds	r0, r3, r0
 80008d8:	4298      	cmp	r0, r3
 80008da:	419b      	sbcs	r3, r3
 80008dc:	4449      	add	r1, r9
 80008de:	425b      	negs	r3, r3
 80008e0:	18cb      	adds	r3, r1, r3
 80008e2:	07dc      	lsls	r4, r3, #31
 80008e4:	0840      	lsrs	r0, r0, #1
 80008e6:	085b      	lsrs	r3, r3, #1
 80008e8:	469a      	mov	sl, r3
 80008ea:	0016      	movs	r6, r2
 80008ec:	4304      	orrs	r4, r0
 80008ee:	e6c6      	b.n	800067e <__aeabi_dadd+0x24a>
 80008f0:	4642      	mov	r2, r8
 80008f2:	1ad4      	subs	r4, r2, r3
 80008f4:	45a0      	cmp	r8, r4
 80008f6:	4180      	sbcs	r0, r0
 80008f8:	464b      	mov	r3, r9
 80008fa:	4240      	negs	r0, r0
 80008fc:	1a59      	subs	r1, r3, r1
 80008fe:	1a0b      	subs	r3, r1, r0
 8000900:	469a      	mov	sl, r3
 8000902:	4665      	mov	r5, ip
 8000904:	e5ea      	b.n	80004dc <__aeabi_dadd+0xa8>
 8000906:	464b      	mov	r3, r9
 8000908:	464a      	mov	r2, r9
 800090a:	08c0      	lsrs	r0, r0, #3
 800090c:	075b      	lsls	r3, r3, #29
 800090e:	4665      	mov	r5, ip
 8000910:	4303      	orrs	r3, r0
 8000912:	08d1      	lsrs	r1, r2, #3
 8000914:	e6bd      	b.n	8000692 <__aeabi_dadd+0x25e>
 8000916:	2a00      	cmp	r2, #0
 8000918:	d000      	beq.n	800091c <__aeabi_dadd+0x4e8>
 800091a:	e08e      	b.n	8000a3a <__aeabi_dadd+0x606>
 800091c:	464b      	mov	r3, r9
 800091e:	4303      	orrs	r3, r0
 8000920:	d117      	bne.n	8000952 <__aeabi_dadd+0x51e>
 8000922:	2180      	movs	r1, #128	; 0x80
 8000924:	2500      	movs	r5, #0
 8000926:	0309      	lsls	r1, r1, #12
 8000928:	e6da      	b.n	80006e0 <__aeabi_dadd+0x2ac>
 800092a:	074a      	lsls	r2, r1, #29
 800092c:	08db      	lsrs	r3, r3, #3
 800092e:	4313      	orrs	r3, r2
 8000930:	08c9      	lsrs	r1, r1, #3
 8000932:	e6d1      	b.n	80006d8 <__aeabi_dadd+0x2a4>
 8000934:	1a1c      	subs	r4, r3, r0
 8000936:	464a      	mov	r2, r9
 8000938:	42a3      	cmp	r3, r4
 800093a:	419b      	sbcs	r3, r3
 800093c:	1a89      	subs	r1, r1, r2
 800093e:	425b      	negs	r3, r3
 8000940:	1acb      	subs	r3, r1, r3
 8000942:	469a      	mov	sl, r3
 8000944:	2601      	movs	r6, #1
 8000946:	e5c1      	b.n	80004cc <__aeabi_dadd+0x98>
 8000948:	074a      	lsls	r2, r1, #29
 800094a:	08db      	lsrs	r3, r3, #3
 800094c:	4313      	orrs	r3, r2
 800094e:	08c9      	lsrs	r1, r1, #3
 8000950:	e69f      	b.n	8000692 <__aeabi_dadd+0x25e>
 8000952:	4643      	mov	r3, r8
 8000954:	08d8      	lsrs	r0, r3, #3
 8000956:	464b      	mov	r3, r9
 8000958:	464a      	mov	r2, r9
 800095a:	075b      	lsls	r3, r3, #29
 800095c:	4665      	mov	r5, ip
 800095e:	4303      	orrs	r3, r0
 8000960:	08d1      	lsrs	r1, r2, #3
 8000962:	e6b9      	b.n	80006d8 <__aeabi_dadd+0x2a4>
 8000964:	4643      	mov	r3, r8
 8000966:	08d8      	lsrs	r0, r3, #3
 8000968:	464b      	mov	r3, r9
 800096a:	464a      	mov	r2, r9
 800096c:	075b      	lsls	r3, r3, #29
 800096e:	4303      	orrs	r3, r0
 8000970:	08d1      	lsrs	r1, r2, #3
 8000972:	e6b1      	b.n	80006d8 <__aeabi_dadd+0x2a4>
 8000974:	4319      	orrs	r1, r3
 8000976:	000c      	movs	r4, r1
 8000978:	1e63      	subs	r3, r4, #1
 800097a:	419c      	sbcs	r4, r3
 800097c:	e6eb      	b.n	8000756 <__aeabi_dadd+0x322>
 800097e:	003c      	movs	r4, r7
 8000980:	000d      	movs	r5, r1
 8000982:	3c20      	subs	r4, #32
 8000984:	40e5      	lsrs	r5, r4
 8000986:	2f20      	cmp	r7, #32
 8000988:	d003      	beq.n	8000992 <__aeabi_dadd+0x55e>
 800098a:	2440      	movs	r4, #64	; 0x40
 800098c:	1be4      	subs	r4, r4, r7
 800098e:	40a1      	lsls	r1, r4
 8000990:	430b      	orrs	r3, r1
 8000992:	001c      	movs	r4, r3
 8000994:	1e63      	subs	r3, r4, #1
 8000996:	419c      	sbcs	r4, r3
 8000998:	432c      	orrs	r4, r5
 800099a:	e770      	b.n	800087e <__aeabi_dadd+0x44a>
 800099c:	2a00      	cmp	r2, #0
 800099e:	d0e1      	beq.n	8000964 <__aeabi_dadd+0x530>
 80009a0:	464a      	mov	r2, r9
 80009a2:	4302      	orrs	r2, r0
 80009a4:	d0c1      	beq.n	800092a <__aeabi_dadd+0x4f6>
 80009a6:	074a      	lsls	r2, r1, #29
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	08c9      	lsrs	r1, r1, #3
 80009b0:	0312      	lsls	r2, r2, #12
 80009b2:	4211      	tst	r1, r2
 80009b4:	d008      	beq.n	80009c8 <__aeabi_dadd+0x594>
 80009b6:	4648      	mov	r0, r9
 80009b8:	08c4      	lsrs	r4, r0, #3
 80009ba:	4214      	tst	r4, r2
 80009bc:	d104      	bne.n	80009c8 <__aeabi_dadd+0x594>
 80009be:	4643      	mov	r3, r8
 80009c0:	0021      	movs	r1, r4
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	0742      	lsls	r2, r0, #29
 80009c6:	4313      	orrs	r3, r2
 80009c8:	0f5a      	lsrs	r2, r3, #29
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	0752      	lsls	r2, r2, #29
 80009ce:	08db      	lsrs	r3, r3, #3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	e681      	b.n	80006d8 <__aeabi_dadd+0x2a4>
 80009d4:	464b      	mov	r3, r9
 80009d6:	4303      	orrs	r3, r0
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x5a8>
 80009da:	e714      	b.n	8000806 <__aeabi_dadd+0x3d2>
 80009dc:	464b      	mov	r3, r9
 80009de:	464a      	mov	r2, r9
 80009e0:	08c0      	lsrs	r0, r0, #3
 80009e2:	075b      	lsls	r3, r3, #29
 80009e4:	4665      	mov	r5, ip
 80009e6:	4303      	orrs	r3, r0
 80009e8:	08d1      	lsrs	r1, r2, #3
 80009ea:	e655      	b.n	8000698 <__aeabi_dadd+0x264>
 80009ec:	1ac4      	subs	r4, r0, r3
 80009ee:	45a0      	cmp	r8, r4
 80009f0:	4180      	sbcs	r0, r0
 80009f2:	464b      	mov	r3, r9
 80009f4:	4240      	negs	r0, r0
 80009f6:	1a59      	subs	r1, r3, r1
 80009f8:	1a0b      	subs	r3, r1, r0
 80009fa:	469a      	mov	sl, r3
 80009fc:	4665      	mov	r5, ip
 80009fe:	2601      	movs	r6, #1
 8000a00:	e564      	b.n	80004cc <__aeabi_dadd+0x98>
 8000a02:	1a1c      	subs	r4, r3, r0
 8000a04:	464a      	mov	r2, r9
 8000a06:	42a3      	cmp	r3, r4
 8000a08:	4180      	sbcs	r0, r0
 8000a0a:	1a8a      	subs	r2, r1, r2
 8000a0c:	4240      	negs	r0, r0
 8000a0e:	1a12      	subs	r2, r2, r0
 8000a10:	4692      	mov	sl, r2
 8000a12:	0212      	lsls	r2, r2, #8
 8000a14:	d549      	bpl.n	8000aaa <__aeabi_dadd+0x676>
 8000a16:	4642      	mov	r2, r8
 8000a18:	1ad4      	subs	r4, r2, r3
 8000a1a:	45a0      	cmp	r8, r4
 8000a1c:	4180      	sbcs	r0, r0
 8000a1e:	464b      	mov	r3, r9
 8000a20:	4240      	negs	r0, r0
 8000a22:	1a59      	subs	r1, r3, r1
 8000a24:	1a0b      	subs	r3, r1, r0
 8000a26:	469a      	mov	sl, r3
 8000a28:	4665      	mov	r5, ip
 8000a2a:	e57f      	b.n	800052c <__aeabi_dadd+0xf8>
 8000a2c:	464b      	mov	r3, r9
 8000a2e:	464a      	mov	r2, r9
 8000a30:	08c0      	lsrs	r0, r0, #3
 8000a32:	075b      	lsls	r3, r3, #29
 8000a34:	4303      	orrs	r3, r0
 8000a36:	08d1      	lsrs	r1, r2, #3
 8000a38:	e62b      	b.n	8000692 <__aeabi_dadd+0x25e>
 8000a3a:	464a      	mov	r2, r9
 8000a3c:	08db      	lsrs	r3, r3, #3
 8000a3e:	4302      	orrs	r2, r0
 8000a40:	d138      	bne.n	8000ab4 <__aeabi_dadd+0x680>
 8000a42:	074a      	lsls	r2, r1, #29
 8000a44:	4313      	orrs	r3, r2
 8000a46:	08c9      	lsrs	r1, r1, #3
 8000a48:	e646      	b.n	80006d8 <__aeabi_dadd+0x2a4>
 8000a4a:	464b      	mov	r3, r9
 8000a4c:	464a      	mov	r2, r9
 8000a4e:	08c0      	lsrs	r0, r0, #3
 8000a50:	075b      	lsls	r3, r3, #29
 8000a52:	4303      	orrs	r3, r0
 8000a54:	08d1      	lsrs	r1, r2, #3
 8000a56:	e61f      	b.n	8000698 <__aeabi_dadd+0x264>
 8000a58:	181c      	adds	r4, r3, r0
 8000a5a:	429c      	cmp	r4, r3
 8000a5c:	419b      	sbcs	r3, r3
 8000a5e:	4449      	add	r1, r9
 8000a60:	468a      	mov	sl, r1
 8000a62:	425b      	negs	r3, r3
 8000a64:	449a      	add	sl, r3
 8000a66:	4653      	mov	r3, sl
 8000a68:	021b      	lsls	r3, r3, #8
 8000a6a:	d400      	bmi.n	8000a6e <__aeabi_dadd+0x63a>
 8000a6c:	e607      	b.n	800067e <__aeabi_dadd+0x24a>
 8000a6e:	4652      	mov	r2, sl
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <__aeabi_dadd+0x6bc>)
 8000a72:	2601      	movs	r6, #1
 8000a74:	401a      	ands	r2, r3
 8000a76:	4692      	mov	sl, r2
 8000a78:	e601      	b.n	800067e <__aeabi_dadd+0x24a>
 8000a7a:	003c      	movs	r4, r7
 8000a7c:	000e      	movs	r6, r1
 8000a7e:	3c20      	subs	r4, #32
 8000a80:	40e6      	lsrs	r6, r4
 8000a82:	2f20      	cmp	r7, #32
 8000a84:	d003      	beq.n	8000a8e <__aeabi_dadd+0x65a>
 8000a86:	2440      	movs	r4, #64	; 0x40
 8000a88:	1be4      	subs	r4, r4, r7
 8000a8a:	40a1      	lsls	r1, r4
 8000a8c:	430b      	orrs	r3, r1
 8000a8e:	001c      	movs	r4, r3
 8000a90:	1e63      	subs	r3, r4, #1
 8000a92:	419c      	sbcs	r4, r3
 8000a94:	4334      	orrs	r4, r6
 8000a96:	e65e      	b.n	8000756 <__aeabi_dadd+0x322>
 8000a98:	4443      	add	r3, r8
 8000a9a:	4283      	cmp	r3, r0
 8000a9c:	4180      	sbcs	r0, r0
 8000a9e:	4449      	add	r1, r9
 8000aa0:	468a      	mov	sl, r1
 8000aa2:	4240      	negs	r0, r0
 8000aa4:	001c      	movs	r4, r3
 8000aa6:	4482      	add	sl, r0
 8000aa8:	e6bc      	b.n	8000824 <__aeabi_dadd+0x3f0>
 8000aaa:	4653      	mov	r3, sl
 8000aac:	4323      	orrs	r3, r4
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x67e>
 8000ab0:	e6a9      	b.n	8000806 <__aeabi_dadd+0x3d2>
 8000ab2:	e5e4      	b.n	800067e <__aeabi_dadd+0x24a>
 8000ab4:	074a      	lsls	r2, r1, #29
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	08c9      	lsrs	r1, r1, #3
 8000abc:	0312      	lsls	r2, r2, #12
 8000abe:	4211      	tst	r1, r2
 8000ac0:	d009      	beq.n	8000ad6 <__aeabi_dadd+0x6a2>
 8000ac2:	4648      	mov	r0, r9
 8000ac4:	08c4      	lsrs	r4, r0, #3
 8000ac6:	4214      	tst	r4, r2
 8000ac8:	d105      	bne.n	8000ad6 <__aeabi_dadd+0x6a2>
 8000aca:	4643      	mov	r3, r8
 8000acc:	4665      	mov	r5, ip
 8000ace:	0021      	movs	r1, r4
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	0742      	lsls	r2, r0, #29
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	0f5a      	lsrs	r2, r3, #29
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	0752      	lsls	r2, r2, #29
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	e5fa      	b.n	80006d8 <__aeabi_dadd+0x2a4>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	4a01      	ldr	r2, [pc, #4]	; (8000aec <__aeabi_dadd+0x6b8>)
 8000ae6:	001c      	movs	r4, r3
 8000ae8:	e540      	b.n	800056c <__aeabi_dadd+0x138>
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	000007ff 	.word	0x000007ff
 8000af0:	ff7fffff 	.word	0xff7fffff

08000af4 <__aeabi_ddiv>:
 8000af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af6:	4657      	mov	r7, sl
 8000af8:	464e      	mov	r6, r9
 8000afa:	4645      	mov	r5, r8
 8000afc:	46de      	mov	lr, fp
 8000afe:	b5e0      	push	{r5, r6, r7, lr}
 8000b00:	030c      	lsls	r4, r1, #12
 8000b02:	001f      	movs	r7, r3
 8000b04:	004b      	lsls	r3, r1, #1
 8000b06:	4681      	mov	r9, r0
 8000b08:	4692      	mov	sl, r2
 8000b0a:	0005      	movs	r5, r0
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	0b24      	lsrs	r4, r4, #12
 8000b10:	0d5b      	lsrs	r3, r3, #21
 8000b12:	0fce      	lsrs	r6, r1, #31
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d100      	bne.n	8000b1a <__aeabi_ddiv+0x26>
 8000b18:	e152      	b.n	8000dc0 <__aeabi_ddiv+0x2cc>
 8000b1a:	4ad2      	ldr	r2, [pc, #840]	; (8000e64 <__aeabi_ddiv+0x370>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_ddiv+0x2e>
 8000b20:	e16e      	b.n	8000e00 <__aeabi_ddiv+0x30c>
 8000b22:	0f42      	lsrs	r2, r0, #29
 8000b24:	00e4      	lsls	r4, r4, #3
 8000b26:	4314      	orrs	r4, r2
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	0412      	lsls	r2, r2, #16
 8000b2c:	4322      	orrs	r2, r4
 8000b2e:	4690      	mov	r8, r2
 8000b30:	4acd      	ldr	r2, [pc, #820]	; (8000e68 <__aeabi_ddiv+0x374>)
 8000b32:	00c5      	lsls	r5, r0, #3
 8000b34:	4693      	mov	fp, r2
 8000b36:	449b      	add	fp, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4699      	mov	r9, r3
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	033c      	lsls	r4, r7, #12
 8000b40:	007b      	lsls	r3, r7, #1
 8000b42:	4650      	mov	r0, sl
 8000b44:	0b24      	lsrs	r4, r4, #12
 8000b46:	0d5b      	lsrs	r3, r3, #21
 8000b48:	0fff      	lsrs	r7, r7, #31
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_ddiv+0x5c>
 8000b4e:	e11a      	b.n	8000d86 <__aeabi_ddiv+0x292>
 8000b50:	4ac4      	ldr	r2, [pc, #784]	; (8000e64 <__aeabi_ddiv+0x370>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d100      	bne.n	8000b58 <__aeabi_ddiv+0x64>
 8000b56:	e15e      	b.n	8000e16 <__aeabi_ddiv+0x322>
 8000b58:	0f42      	lsrs	r2, r0, #29
 8000b5a:	00e4      	lsls	r4, r4, #3
 8000b5c:	4322      	orrs	r2, r4
 8000b5e:	2480      	movs	r4, #128	; 0x80
 8000b60:	0424      	lsls	r4, r4, #16
 8000b62:	4314      	orrs	r4, r2
 8000b64:	4ac0      	ldr	r2, [pc, #768]	; (8000e68 <__aeabi_ddiv+0x374>)
 8000b66:	00c1      	lsls	r1, r0, #3
 8000b68:	4694      	mov	ip, r2
 8000b6a:	465a      	mov	r2, fp
 8000b6c:	4463      	add	r3, ip
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	469b      	mov	fp, r3
 8000b72:	2000      	movs	r0, #0
 8000b74:	0033      	movs	r3, r6
 8000b76:	407b      	eors	r3, r7
 8000b78:	469a      	mov	sl, r3
 8000b7a:	464b      	mov	r3, r9
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d827      	bhi.n	8000bd0 <__aeabi_ddiv+0xdc>
 8000b80:	4aba      	ldr	r2, [pc, #744]	; (8000e6c <__aeabi_ddiv+0x378>)
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	58d3      	ldr	r3, [r2, r3]
 8000b86:	469f      	mov	pc, r3
 8000b88:	46b2      	mov	sl, r6
 8000b8a:	9b00      	ldr	r3, [sp, #0]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d016      	beq.n	8000bbe <__aeabi_ddiv+0xca>
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d100      	bne.n	8000b96 <__aeabi_ddiv+0xa2>
 8000b94:	e287      	b.n	80010a6 <__aeabi_ddiv+0x5b2>
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d000      	beq.n	8000b9c <__aeabi_ddiv+0xa8>
 8000b9a:	e0d5      	b.n	8000d48 <__aeabi_ddiv+0x254>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2500      	movs	r5, #0
 8000ba2:	051b      	lsls	r3, r3, #20
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	4652      	mov	r2, sl
 8000ba8:	07d2      	lsls	r2, r2, #31
 8000baa:	4313      	orrs	r3, r2
 8000bac:	0028      	movs	r0, r5
 8000bae:	0019      	movs	r1, r3
 8000bb0:	b005      	add	sp, #20
 8000bb2:	bcf0      	pop	{r4, r5, r6, r7}
 8000bb4:	46bb      	mov	fp, r7
 8000bb6:	46b2      	mov	sl, r6
 8000bb8:	46a9      	mov	r9, r5
 8000bba:	46a0      	mov	r8, r4
 8000bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	4ba8      	ldr	r3, [pc, #672]	; (8000e64 <__aeabi_ddiv+0x370>)
 8000bc4:	e7ed      	b.n	8000ba2 <__aeabi_ddiv+0xae>
 8000bc6:	46ba      	mov	sl, r7
 8000bc8:	46a0      	mov	r8, r4
 8000bca:	000d      	movs	r5, r1
 8000bcc:	9000      	str	r0, [sp, #0]
 8000bce:	e7dc      	b.n	8000b8a <__aeabi_ddiv+0x96>
 8000bd0:	4544      	cmp	r4, r8
 8000bd2:	d200      	bcs.n	8000bd6 <__aeabi_ddiv+0xe2>
 8000bd4:	e1c4      	b.n	8000f60 <__aeabi_ddiv+0x46c>
 8000bd6:	d100      	bne.n	8000bda <__aeabi_ddiv+0xe6>
 8000bd8:	e1bf      	b.n	8000f5a <__aeabi_ddiv+0x466>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	425b      	negs	r3, r3
 8000bde:	469c      	mov	ip, r3
 8000be0:	002e      	movs	r6, r5
 8000be2:	4640      	mov	r0, r8
 8000be4:	2500      	movs	r5, #0
 8000be6:	44e3      	add	fp, ip
 8000be8:	0223      	lsls	r3, r4, #8
 8000bea:	0e0c      	lsrs	r4, r1, #24
 8000bec:	431c      	orrs	r4, r3
 8000bee:	0c1b      	lsrs	r3, r3, #16
 8000bf0:	4699      	mov	r9, r3
 8000bf2:	0423      	lsls	r3, r4, #16
 8000bf4:	020a      	lsls	r2, r1, #8
 8000bf6:	0c1f      	lsrs	r7, r3, #16
 8000bf8:	4649      	mov	r1, r9
 8000bfa:	9200      	str	r2, [sp, #0]
 8000bfc:	9701      	str	r7, [sp, #4]
 8000bfe:	f7ff fb09 	bl	8000214 <__aeabi_uidivmod>
 8000c02:	0002      	movs	r2, r0
 8000c04:	437a      	muls	r2, r7
 8000c06:	040b      	lsls	r3, r1, #16
 8000c08:	0c31      	lsrs	r1, r6, #16
 8000c0a:	4680      	mov	r8, r0
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	d907      	bls.n	8000c22 <__aeabi_ddiv+0x12e>
 8000c12:	2301      	movs	r3, #1
 8000c14:	425b      	negs	r3, r3
 8000c16:	469c      	mov	ip, r3
 8000c18:	1909      	adds	r1, r1, r4
 8000c1a:	44e0      	add	r8, ip
 8000c1c:	428c      	cmp	r4, r1
 8000c1e:	d800      	bhi.n	8000c22 <__aeabi_ddiv+0x12e>
 8000c20:	e201      	b.n	8001026 <__aeabi_ddiv+0x532>
 8000c22:	1a88      	subs	r0, r1, r2
 8000c24:	4649      	mov	r1, r9
 8000c26:	f7ff faf5 	bl	8000214 <__aeabi_uidivmod>
 8000c2a:	9a01      	ldr	r2, [sp, #4]
 8000c2c:	0436      	lsls	r6, r6, #16
 8000c2e:	4342      	muls	r2, r0
 8000c30:	0409      	lsls	r1, r1, #16
 8000c32:	0c36      	lsrs	r6, r6, #16
 8000c34:	0003      	movs	r3, r0
 8000c36:	430e      	orrs	r6, r1
 8000c38:	42b2      	cmp	r2, r6
 8000c3a:	d904      	bls.n	8000c46 <__aeabi_ddiv+0x152>
 8000c3c:	1936      	adds	r6, r6, r4
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	42b4      	cmp	r4, r6
 8000c42:	d800      	bhi.n	8000c46 <__aeabi_ddiv+0x152>
 8000c44:	e1e9      	b.n	800101a <__aeabi_ddiv+0x526>
 8000c46:	1ab0      	subs	r0, r6, r2
 8000c48:	4642      	mov	r2, r8
 8000c4a:	9e00      	ldr	r6, [sp, #0]
 8000c4c:	0412      	lsls	r2, r2, #16
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	0c33      	lsrs	r3, r6, #16
 8000c52:	001f      	movs	r7, r3
 8000c54:	0c11      	lsrs	r1, r2, #16
 8000c56:	4690      	mov	r8, r2
 8000c58:	9302      	str	r3, [sp, #8]
 8000c5a:	0413      	lsls	r3, r2, #16
 8000c5c:	0432      	lsls	r2, r6, #16
 8000c5e:	0c16      	lsrs	r6, r2, #16
 8000c60:	0032      	movs	r2, r6
 8000c62:	0c1b      	lsrs	r3, r3, #16
 8000c64:	435a      	muls	r2, r3
 8000c66:	9603      	str	r6, [sp, #12]
 8000c68:	437b      	muls	r3, r7
 8000c6a:	434e      	muls	r6, r1
 8000c6c:	4379      	muls	r1, r7
 8000c6e:	0c17      	lsrs	r7, r2, #16
 8000c70:	46bc      	mov	ip, r7
 8000c72:	199b      	adds	r3, r3, r6
 8000c74:	4463      	add	r3, ip
 8000c76:	429e      	cmp	r6, r3
 8000c78:	d903      	bls.n	8000c82 <__aeabi_ddiv+0x18e>
 8000c7a:	2680      	movs	r6, #128	; 0x80
 8000c7c:	0276      	lsls	r6, r6, #9
 8000c7e:	46b4      	mov	ip, r6
 8000c80:	4461      	add	r1, ip
 8000c82:	0c1e      	lsrs	r6, r3, #16
 8000c84:	1871      	adds	r1, r6, r1
 8000c86:	0416      	lsls	r6, r2, #16
 8000c88:	041b      	lsls	r3, r3, #16
 8000c8a:	0c36      	lsrs	r6, r6, #16
 8000c8c:	199e      	adds	r6, r3, r6
 8000c8e:	4288      	cmp	r0, r1
 8000c90:	d302      	bcc.n	8000c98 <__aeabi_ddiv+0x1a4>
 8000c92:	d112      	bne.n	8000cba <__aeabi_ddiv+0x1c6>
 8000c94:	42b5      	cmp	r5, r6
 8000c96:	d210      	bcs.n	8000cba <__aeabi_ddiv+0x1c6>
 8000c98:	4643      	mov	r3, r8
 8000c9a:	1e5a      	subs	r2, r3, #1
 8000c9c:	9b00      	ldr	r3, [sp, #0]
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	4465      	add	r5, ip
 8000ca2:	001f      	movs	r7, r3
 8000ca4:	429d      	cmp	r5, r3
 8000ca6:	419b      	sbcs	r3, r3
 8000ca8:	425b      	negs	r3, r3
 8000caa:	191b      	adds	r3, r3, r4
 8000cac:	18c0      	adds	r0, r0, r3
 8000cae:	4284      	cmp	r4, r0
 8000cb0:	d200      	bcs.n	8000cb4 <__aeabi_ddiv+0x1c0>
 8000cb2:	e19e      	b.n	8000ff2 <__aeabi_ddiv+0x4fe>
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_ddiv+0x1c4>
 8000cb6:	e199      	b.n	8000fec <__aeabi_ddiv+0x4f8>
 8000cb8:	4690      	mov	r8, r2
 8000cba:	1bae      	subs	r6, r5, r6
 8000cbc:	42b5      	cmp	r5, r6
 8000cbe:	41ad      	sbcs	r5, r5
 8000cc0:	1a40      	subs	r0, r0, r1
 8000cc2:	426d      	negs	r5, r5
 8000cc4:	1b40      	subs	r0, r0, r5
 8000cc6:	4284      	cmp	r4, r0
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_ddiv+0x1d8>
 8000cca:	e1d2      	b.n	8001072 <__aeabi_ddiv+0x57e>
 8000ccc:	4649      	mov	r1, r9
 8000cce:	f7ff faa1 	bl	8000214 <__aeabi_uidivmod>
 8000cd2:	9a01      	ldr	r2, [sp, #4]
 8000cd4:	040b      	lsls	r3, r1, #16
 8000cd6:	4342      	muls	r2, r0
 8000cd8:	0c31      	lsrs	r1, r6, #16
 8000cda:	0005      	movs	r5, r0
 8000cdc:	4319      	orrs	r1, r3
 8000cde:	428a      	cmp	r2, r1
 8000ce0:	d900      	bls.n	8000ce4 <__aeabi_ddiv+0x1f0>
 8000ce2:	e16c      	b.n	8000fbe <__aeabi_ddiv+0x4ca>
 8000ce4:	1a88      	subs	r0, r1, r2
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	f7ff fa94 	bl	8000214 <__aeabi_uidivmod>
 8000cec:	9a01      	ldr	r2, [sp, #4]
 8000cee:	0436      	lsls	r6, r6, #16
 8000cf0:	4342      	muls	r2, r0
 8000cf2:	0409      	lsls	r1, r1, #16
 8000cf4:	0c36      	lsrs	r6, r6, #16
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	430e      	orrs	r6, r1
 8000cfa:	42b2      	cmp	r2, r6
 8000cfc:	d900      	bls.n	8000d00 <__aeabi_ddiv+0x20c>
 8000cfe:	e153      	b.n	8000fa8 <__aeabi_ddiv+0x4b4>
 8000d00:	9803      	ldr	r0, [sp, #12]
 8000d02:	1ab6      	subs	r6, r6, r2
 8000d04:	0002      	movs	r2, r0
 8000d06:	042d      	lsls	r5, r5, #16
 8000d08:	431d      	orrs	r5, r3
 8000d0a:	9f02      	ldr	r7, [sp, #8]
 8000d0c:	042b      	lsls	r3, r5, #16
 8000d0e:	0c1b      	lsrs	r3, r3, #16
 8000d10:	435a      	muls	r2, r3
 8000d12:	437b      	muls	r3, r7
 8000d14:	469c      	mov	ip, r3
 8000d16:	0c29      	lsrs	r1, r5, #16
 8000d18:	4348      	muls	r0, r1
 8000d1a:	0c13      	lsrs	r3, r2, #16
 8000d1c:	4484      	add	ip, r0
 8000d1e:	4463      	add	r3, ip
 8000d20:	4379      	muls	r1, r7
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d903      	bls.n	8000d2e <__aeabi_ddiv+0x23a>
 8000d26:	2080      	movs	r0, #128	; 0x80
 8000d28:	0240      	lsls	r0, r0, #9
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	4461      	add	r1, ip
 8000d2e:	0c18      	lsrs	r0, r3, #16
 8000d30:	0412      	lsls	r2, r2, #16
 8000d32:	041b      	lsls	r3, r3, #16
 8000d34:	0c12      	lsrs	r2, r2, #16
 8000d36:	1840      	adds	r0, r0, r1
 8000d38:	189b      	adds	r3, r3, r2
 8000d3a:	4286      	cmp	r6, r0
 8000d3c:	d200      	bcs.n	8000d40 <__aeabi_ddiv+0x24c>
 8000d3e:	e100      	b.n	8000f42 <__aeabi_ddiv+0x44e>
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0x250>
 8000d42:	e0fb      	b.n	8000f3c <__aeabi_ddiv+0x448>
 8000d44:	2301      	movs	r3, #1
 8000d46:	431d      	orrs	r5, r3
 8000d48:	4b49      	ldr	r3, [pc, #292]	; (8000e70 <__aeabi_ddiv+0x37c>)
 8000d4a:	445b      	add	r3, fp
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	dc00      	bgt.n	8000d52 <__aeabi_ddiv+0x25e>
 8000d50:	e0aa      	b.n	8000ea8 <__aeabi_ddiv+0x3b4>
 8000d52:	076a      	lsls	r2, r5, #29
 8000d54:	d000      	beq.n	8000d58 <__aeabi_ddiv+0x264>
 8000d56:	e13d      	b.n	8000fd4 <__aeabi_ddiv+0x4e0>
 8000d58:	08e9      	lsrs	r1, r5, #3
 8000d5a:	4642      	mov	r2, r8
 8000d5c:	01d2      	lsls	r2, r2, #7
 8000d5e:	d506      	bpl.n	8000d6e <__aeabi_ddiv+0x27a>
 8000d60:	4642      	mov	r2, r8
 8000d62:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <__aeabi_ddiv+0x380>)
 8000d64:	401a      	ands	r2, r3
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	4690      	mov	r8, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	445b      	add	r3, fp
 8000d6e:	4a42      	ldr	r2, [pc, #264]	; (8000e78 <__aeabi_ddiv+0x384>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	dd00      	ble.n	8000d76 <__aeabi_ddiv+0x282>
 8000d74:	e723      	b.n	8000bbe <__aeabi_ddiv+0xca>
 8000d76:	4642      	mov	r2, r8
 8000d78:	055b      	lsls	r3, r3, #21
 8000d7a:	0755      	lsls	r5, r2, #29
 8000d7c:	0252      	lsls	r2, r2, #9
 8000d7e:	430d      	orrs	r5, r1
 8000d80:	0b12      	lsrs	r2, r2, #12
 8000d82:	0d5b      	lsrs	r3, r3, #21
 8000d84:	e70d      	b.n	8000ba2 <__aeabi_ddiv+0xae>
 8000d86:	4651      	mov	r1, sl
 8000d88:	4321      	orrs	r1, r4
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_ddiv+0x29a>
 8000d8c:	e07c      	b.n	8000e88 <__aeabi_ddiv+0x394>
 8000d8e:	2c00      	cmp	r4, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_ddiv+0x2a0>
 8000d92:	e0fb      	b.n	8000f8c <__aeabi_ddiv+0x498>
 8000d94:	0020      	movs	r0, r4
 8000d96:	f000 fdc1 	bl	800191c <__clzsi2>
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	3a0b      	subs	r2, #11
 8000d9e:	231d      	movs	r3, #29
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	4652      	mov	r2, sl
 8000da4:	0001      	movs	r1, r0
 8000da6:	40da      	lsrs	r2, r3
 8000da8:	4653      	mov	r3, sl
 8000daa:	3908      	subs	r1, #8
 8000dac:	408b      	lsls	r3, r1
 8000dae:	408c      	lsls	r4, r1
 8000db0:	0019      	movs	r1, r3
 8000db2:	4314      	orrs	r4, r2
 8000db4:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <__aeabi_ddiv+0x388>)
 8000db6:	4458      	add	r0, fp
 8000db8:	469b      	mov	fp, r3
 8000dba:	4483      	add	fp, r0
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	e6d9      	b.n	8000b74 <__aeabi_ddiv+0x80>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	4323      	orrs	r3, r4
 8000dc4:	4698      	mov	r8, r3
 8000dc6:	d044      	beq.n	8000e52 <__aeabi_ddiv+0x35e>
 8000dc8:	2c00      	cmp	r4, #0
 8000dca:	d100      	bne.n	8000dce <__aeabi_ddiv+0x2da>
 8000dcc:	e0cf      	b.n	8000f6e <__aeabi_ddiv+0x47a>
 8000dce:	0020      	movs	r0, r4
 8000dd0:	f000 fda4 	bl	800191c <__clzsi2>
 8000dd4:	0001      	movs	r1, r0
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	390b      	subs	r1, #11
 8000dda:	231d      	movs	r3, #29
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	4649      	mov	r1, r9
 8000de0:	0010      	movs	r0, r2
 8000de2:	40d9      	lsrs	r1, r3
 8000de4:	3808      	subs	r0, #8
 8000de6:	4084      	lsls	r4, r0
 8000de8:	000b      	movs	r3, r1
 8000dea:	464d      	mov	r5, r9
 8000dec:	4323      	orrs	r3, r4
 8000dee:	4698      	mov	r8, r3
 8000df0:	4085      	lsls	r5, r0
 8000df2:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <__aeabi_ddiv+0x38c>)
 8000df4:	1a9b      	subs	r3, r3, r2
 8000df6:	469b      	mov	fp, r3
 8000df8:	2300      	movs	r3, #0
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	e69e      	b.n	8000b3e <__aeabi_ddiv+0x4a>
 8000e00:	0002      	movs	r2, r0
 8000e02:	4322      	orrs	r2, r4
 8000e04:	4690      	mov	r8, r2
 8000e06:	d11d      	bne.n	8000e44 <__aeabi_ddiv+0x350>
 8000e08:	2208      	movs	r2, #8
 8000e0a:	469b      	mov	fp, r3
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	2500      	movs	r5, #0
 8000e10:	4691      	mov	r9, r2
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	e693      	b.n	8000b3e <__aeabi_ddiv+0x4a>
 8000e16:	4651      	mov	r1, sl
 8000e18:	4321      	orrs	r1, r4
 8000e1a:	d109      	bne.n	8000e30 <__aeabi_ddiv+0x33c>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	464a      	mov	r2, r9
 8000e20:	431a      	orrs	r2, r3
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <__aeabi_ddiv+0x390>)
 8000e24:	4691      	mov	r9, r2
 8000e26:	469c      	mov	ip, r3
 8000e28:	2400      	movs	r4, #0
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	44e3      	add	fp, ip
 8000e2e:	e6a1      	b.n	8000b74 <__aeabi_ddiv+0x80>
 8000e30:	2303      	movs	r3, #3
 8000e32:	464a      	mov	r2, r9
 8000e34:	431a      	orrs	r2, r3
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <__aeabi_ddiv+0x390>)
 8000e38:	4691      	mov	r9, r2
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	4651      	mov	r1, sl
 8000e3e:	2003      	movs	r0, #3
 8000e40:	44e3      	add	fp, ip
 8000e42:	e697      	b.n	8000b74 <__aeabi_ddiv+0x80>
 8000e44:	220c      	movs	r2, #12
 8000e46:	469b      	mov	fp, r3
 8000e48:	2303      	movs	r3, #3
 8000e4a:	46a0      	mov	r8, r4
 8000e4c:	4691      	mov	r9, r2
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	e675      	b.n	8000b3e <__aeabi_ddiv+0x4a>
 8000e52:	2304      	movs	r3, #4
 8000e54:	4699      	mov	r9, r3
 8000e56:	2300      	movs	r3, #0
 8000e58:	469b      	mov	fp, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	e66d      	b.n	8000b3e <__aeabi_ddiv+0x4a>
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	000007ff 	.word	0x000007ff
 8000e68:	fffffc01 	.word	0xfffffc01
 8000e6c:	08005378 	.word	0x08005378
 8000e70:	000003ff 	.word	0x000003ff
 8000e74:	feffffff 	.word	0xfeffffff
 8000e78:	000007fe 	.word	0x000007fe
 8000e7c:	000003f3 	.word	0x000003f3
 8000e80:	fffffc0d 	.word	0xfffffc0d
 8000e84:	fffff801 	.word	0xfffff801
 8000e88:	464a      	mov	r2, r9
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	4691      	mov	r9, r2
 8000e90:	2400      	movs	r4, #0
 8000e92:	2001      	movs	r0, #1
 8000e94:	e66e      	b.n	8000b74 <__aeabi_ddiv+0x80>
 8000e96:	2300      	movs	r3, #0
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	469a      	mov	sl, r3
 8000e9c:	2500      	movs	r5, #0
 8000e9e:	4b88      	ldr	r3, [pc, #544]	; (80010c0 <__aeabi_ddiv+0x5cc>)
 8000ea0:	0312      	lsls	r2, r2, #12
 8000ea2:	e67e      	b.n	8000ba2 <__aeabi_ddiv+0xae>
 8000ea4:	2501      	movs	r5, #1
 8000ea6:	426d      	negs	r5, r5
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	1ad2      	subs	r2, r2, r3
 8000eac:	2a38      	cmp	r2, #56	; 0x38
 8000eae:	dd00      	ble.n	8000eb2 <__aeabi_ddiv+0x3be>
 8000eb0:	e674      	b.n	8000b9c <__aeabi_ddiv+0xa8>
 8000eb2:	2a1f      	cmp	r2, #31
 8000eb4:	dc00      	bgt.n	8000eb8 <__aeabi_ddiv+0x3c4>
 8000eb6:	e0bd      	b.n	8001034 <__aeabi_ddiv+0x540>
 8000eb8:	211f      	movs	r1, #31
 8000eba:	4249      	negs	r1, r1
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	4641      	mov	r1, r8
 8000ec0:	40d9      	lsrs	r1, r3
 8000ec2:	000b      	movs	r3, r1
 8000ec4:	2a20      	cmp	r2, #32
 8000ec6:	d004      	beq.n	8000ed2 <__aeabi_ddiv+0x3de>
 8000ec8:	4641      	mov	r1, r8
 8000eca:	4a7e      	ldr	r2, [pc, #504]	; (80010c4 <__aeabi_ddiv+0x5d0>)
 8000ecc:	445a      	add	r2, fp
 8000ece:	4091      	lsls	r1, r2
 8000ed0:	430d      	orrs	r5, r1
 8000ed2:	0029      	movs	r1, r5
 8000ed4:	1e4a      	subs	r2, r1, #1
 8000ed6:	4191      	sbcs	r1, r2
 8000ed8:	4319      	orrs	r1, r3
 8000eda:	2307      	movs	r3, #7
 8000edc:	001d      	movs	r5, r3
 8000ede:	2200      	movs	r2, #0
 8000ee0:	400d      	ands	r5, r1
 8000ee2:	420b      	tst	r3, r1
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_ddiv+0x3f4>
 8000ee6:	e0d0      	b.n	800108a <__aeabi_ddiv+0x596>
 8000ee8:	220f      	movs	r2, #15
 8000eea:	2300      	movs	r3, #0
 8000eec:	400a      	ands	r2, r1
 8000eee:	2a04      	cmp	r2, #4
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_ddiv+0x400>
 8000ef2:	e0c7      	b.n	8001084 <__aeabi_ddiv+0x590>
 8000ef4:	1d0a      	adds	r2, r1, #4
 8000ef6:	428a      	cmp	r2, r1
 8000ef8:	4189      	sbcs	r1, r1
 8000efa:	4249      	negs	r1, r1
 8000efc:	185b      	adds	r3, r3, r1
 8000efe:	0011      	movs	r1, r2
 8000f00:	021a      	lsls	r2, r3, #8
 8000f02:	d400      	bmi.n	8000f06 <__aeabi_ddiv+0x412>
 8000f04:	e0be      	b.n	8001084 <__aeabi_ddiv+0x590>
 8000f06:	2301      	movs	r3, #1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2500      	movs	r5, #0
 8000f0c:	e649      	b.n	8000ba2 <__aeabi_ddiv+0xae>
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	4643      	mov	r3, r8
 8000f12:	0312      	lsls	r2, r2, #12
 8000f14:	4213      	tst	r3, r2
 8000f16:	d008      	beq.n	8000f2a <__aeabi_ddiv+0x436>
 8000f18:	4214      	tst	r4, r2
 8000f1a:	d106      	bne.n	8000f2a <__aeabi_ddiv+0x436>
 8000f1c:	4322      	orrs	r2, r4
 8000f1e:	0312      	lsls	r2, r2, #12
 8000f20:	46ba      	mov	sl, r7
 8000f22:	000d      	movs	r5, r1
 8000f24:	4b66      	ldr	r3, [pc, #408]	; (80010c0 <__aeabi_ddiv+0x5cc>)
 8000f26:	0b12      	lsrs	r2, r2, #12
 8000f28:	e63b      	b.n	8000ba2 <__aeabi_ddiv+0xae>
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	4643      	mov	r3, r8
 8000f2e:	0312      	lsls	r2, r2, #12
 8000f30:	431a      	orrs	r2, r3
 8000f32:	0312      	lsls	r2, r2, #12
 8000f34:	46b2      	mov	sl, r6
 8000f36:	4b62      	ldr	r3, [pc, #392]	; (80010c0 <__aeabi_ddiv+0x5cc>)
 8000f38:	0b12      	lsrs	r2, r2, #12
 8000f3a:	e632      	b.n	8000ba2 <__aeabi_ddiv+0xae>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_ddiv+0x44e>
 8000f40:	e702      	b.n	8000d48 <__aeabi_ddiv+0x254>
 8000f42:	19a6      	adds	r6, r4, r6
 8000f44:	1e6a      	subs	r2, r5, #1
 8000f46:	42a6      	cmp	r6, r4
 8000f48:	d200      	bcs.n	8000f4c <__aeabi_ddiv+0x458>
 8000f4a:	e089      	b.n	8001060 <__aeabi_ddiv+0x56c>
 8000f4c:	4286      	cmp	r6, r0
 8000f4e:	d200      	bcs.n	8000f52 <__aeabi_ddiv+0x45e>
 8000f50:	e09f      	b.n	8001092 <__aeabi_ddiv+0x59e>
 8000f52:	d100      	bne.n	8000f56 <__aeabi_ddiv+0x462>
 8000f54:	e0af      	b.n	80010b6 <__aeabi_ddiv+0x5c2>
 8000f56:	0015      	movs	r5, r2
 8000f58:	e6f4      	b.n	8000d44 <__aeabi_ddiv+0x250>
 8000f5a:	42a9      	cmp	r1, r5
 8000f5c:	d900      	bls.n	8000f60 <__aeabi_ddiv+0x46c>
 8000f5e:	e63c      	b.n	8000bda <__aeabi_ddiv+0xe6>
 8000f60:	4643      	mov	r3, r8
 8000f62:	07de      	lsls	r6, r3, #31
 8000f64:	0858      	lsrs	r0, r3, #1
 8000f66:	086b      	lsrs	r3, r5, #1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	07ed      	lsls	r5, r5, #31
 8000f6c:	e63c      	b.n	8000be8 <__aeabi_ddiv+0xf4>
 8000f6e:	f000 fcd5 	bl	800191c <__clzsi2>
 8000f72:	0001      	movs	r1, r0
 8000f74:	0002      	movs	r2, r0
 8000f76:	3115      	adds	r1, #21
 8000f78:	3220      	adds	r2, #32
 8000f7a:	291c      	cmp	r1, #28
 8000f7c:	dc00      	bgt.n	8000f80 <__aeabi_ddiv+0x48c>
 8000f7e:	e72c      	b.n	8000dda <__aeabi_ddiv+0x2e6>
 8000f80:	464b      	mov	r3, r9
 8000f82:	3808      	subs	r0, #8
 8000f84:	4083      	lsls	r3, r0
 8000f86:	2500      	movs	r5, #0
 8000f88:	4698      	mov	r8, r3
 8000f8a:	e732      	b.n	8000df2 <__aeabi_ddiv+0x2fe>
 8000f8c:	f000 fcc6 	bl	800191c <__clzsi2>
 8000f90:	0003      	movs	r3, r0
 8000f92:	001a      	movs	r2, r3
 8000f94:	3215      	adds	r2, #21
 8000f96:	3020      	adds	r0, #32
 8000f98:	2a1c      	cmp	r2, #28
 8000f9a:	dc00      	bgt.n	8000f9e <__aeabi_ddiv+0x4aa>
 8000f9c:	e6ff      	b.n	8000d9e <__aeabi_ddiv+0x2aa>
 8000f9e:	4654      	mov	r4, sl
 8000fa0:	3b08      	subs	r3, #8
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	409c      	lsls	r4, r3
 8000fa6:	e705      	b.n	8000db4 <__aeabi_ddiv+0x2c0>
 8000fa8:	1936      	adds	r6, r6, r4
 8000faa:	3b01      	subs	r3, #1
 8000fac:	42b4      	cmp	r4, r6
 8000fae:	d900      	bls.n	8000fb2 <__aeabi_ddiv+0x4be>
 8000fb0:	e6a6      	b.n	8000d00 <__aeabi_ddiv+0x20c>
 8000fb2:	42b2      	cmp	r2, r6
 8000fb4:	d800      	bhi.n	8000fb8 <__aeabi_ddiv+0x4c4>
 8000fb6:	e6a3      	b.n	8000d00 <__aeabi_ddiv+0x20c>
 8000fb8:	1e83      	subs	r3, r0, #2
 8000fba:	1936      	adds	r6, r6, r4
 8000fbc:	e6a0      	b.n	8000d00 <__aeabi_ddiv+0x20c>
 8000fbe:	1909      	adds	r1, r1, r4
 8000fc0:	3d01      	subs	r5, #1
 8000fc2:	428c      	cmp	r4, r1
 8000fc4:	d900      	bls.n	8000fc8 <__aeabi_ddiv+0x4d4>
 8000fc6:	e68d      	b.n	8000ce4 <__aeabi_ddiv+0x1f0>
 8000fc8:	428a      	cmp	r2, r1
 8000fca:	d800      	bhi.n	8000fce <__aeabi_ddiv+0x4da>
 8000fcc:	e68a      	b.n	8000ce4 <__aeabi_ddiv+0x1f0>
 8000fce:	1e85      	subs	r5, r0, #2
 8000fd0:	1909      	adds	r1, r1, r4
 8000fd2:	e687      	b.n	8000ce4 <__aeabi_ddiv+0x1f0>
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	402a      	ands	r2, r5
 8000fd8:	2a04      	cmp	r2, #4
 8000fda:	d100      	bne.n	8000fde <__aeabi_ddiv+0x4ea>
 8000fdc:	e6bc      	b.n	8000d58 <__aeabi_ddiv+0x264>
 8000fde:	1d29      	adds	r1, r5, #4
 8000fe0:	42a9      	cmp	r1, r5
 8000fe2:	41ad      	sbcs	r5, r5
 8000fe4:	426d      	negs	r5, r5
 8000fe6:	08c9      	lsrs	r1, r1, #3
 8000fe8:	44a8      	add	r8, r5
 8000fea:	e6b6      	b.n	8000d5a <__aeabi_ddiv+0x266>
 8000fec:	42af      	cmp	r7, r5
 8000fee:	d900      	bls.n	8000ff2 <__aeabi_ddiv+0x4fe>
 8000ff0:	e662      	b.n	8000cb8 <__aeabi_ddiv+0x1c4>
 8000ff2:	4281      	cmp	r1, r0
 8000ff4:	d804      	bhi.n	8001000 <__aeabi_ddiv+0x50c>
 8000ff6:	d000      	beq.n	8000ffa <__aeabi_ddiv+0x506>
 8000ff8:	e65e      	b.n	8000cb8 <__aeabi_ddiv+0x1c4>
 8000ffa:	42ae      	cmp	r6, r5
 8000ffc:	d800      	bhi.n	8001000 <__aeabi_ddiv+0x50c>
 8000ffe:	e65b      	b.n	8000cb8 <__aeabi_ddiv+0x1c4>
 8001000:	2302      	movs	r3, #2
 8001002:	425b      	negs	r3, r3
 8001004:	469c      	mov	ip, r3
 8001006:	9b00      	ldr	r3, [sp, #0]
 8001008:	44e0      	add	r8, ip
 800100a:	469c      	mov	ip, r3
 800100c:	4465      	add	r5, ip
 800100e:	429d      	cmp	r5, r3
 8001010:	419b      	sbcs	r3, r3
 8001012:	425b      	negs	r3, r3
 8001014:	191b      	adds	r3, r3, r4
 8001016:	18c0      	adds	r0, r0, r3
 8001018:	e64f      	b.n	8000cba <__aeabi_ddiv+0x1c6>
 800101a:	42b2      	cmp	r2, r6
 800101c:	d800      	bhi.n	8001020 <__aeabi_ddiv+0x52c>
 800101e:	e612      	b.n	8000c46 <__aeabi_ddiv+0x152>
 8001020:	1e83      	subs	r3, r0, #2
 8001022:	1936      	adds	r6, r6, r4
 8001024:	e60f      	b.n	8000c46 <__aeabi_ddiv+0x152>
 8001026:	428a      	cmp	r2, r1
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x538>
 800102a:	e5fa      	b.n	8000c22 <__aeabi_ddiv+0x12e>
 800102c:	1e83      	subs	r3, r0, #2
 800102e:	4698      	mov	r8, r3
 8001030:	1909      	adds	r1, r1, r4
 8001032:	e5f6      	b.n	8000c22 <__aeabi_ddiv+0x12e>
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <__aeabi_ddiv+0x5d4>)
 8001036:	0028      	movs	r0, r5
 8001038:	445b      	add	r3, fp
 800103a:	4641      	mov	r1, r8
 800103c:	409d      	lsls	r5, r3
 800103e:	4099      	lsls	r1, r3
 8001040:	40d0      	lsrs	r0, r2
 8001042:	1e6b      	subs	r3, r5, #1
 8001044:	419d      	sbcs	r5, r3
 8001046:	4643      	mov	r3, r8
 8001048:	4301      	orrs	r1, r0
 800104a:	4329      	orrs	r1, r5
 800104c:	40d3      	lsrs	r3, r2
 800104e:	074a      	lsls	r2, r1, #29
 8001050:	d100      	bne.n	8001054 <__aeabi_ddiv+0x560>
 8001052:	e755      	b.n	8000f00 <__aeabi_ddiv+0x40c>
 8001054:	220f      	movs	r2, #15
 8001056:	400a      	ands	r2, r1
 8001058:	2a04      	cmp	r2, #4
 800105a:	d000      	beq.n	800105e <__aeabi_ddiv+0x56a>
 800105c:	e74a      	b.n	8000ef4 <__aeabi_ddiv+0x400>
 800105e:	e74f      	b.n	8000f00 <__aeabi_ddiv+0x40c>
 8001060:	0015      	movs	r5, r2
 8001062:	4286      	cmp	r6, r0
 8001064:	d000      	beq.n	8001068 <__aeabi_ddiv+0x574>
 8001066:	e66d      	b.n	8000d44 <__aeabi_ddiv+0x250>
 8001068:	9a00      	ldr	r2, [sp, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d000      	beq.n	8001070 <__aeabi_ddiv+0x57c>
 800106e:	e669      	b.n	8000d44 <__aeabi_ddiv+0x250>
 8001070:	e66a      	b.n	8000d48 <__aeabi_ddiv+0x254>
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <__aeabi_ddiv+0x5d8>)
 8001074:	445b      	add	r3, fp
 8001076:	2b00      	cmp	r3, #0
 8001078:	dc00      	bgt.n	800107c <__aeabi_ddiv+0x588>
 800107a:	e713      	b.n	8000ea4 <__aeabi_ddiv+0x3b0>
 800107c:	2501      	movs	r5, #1
 800107e:	2100      	movs	r1, #0
 8001080:	44a8      	add	r8, r5
 8001082:	e66a      	b.n	8000d5a <__aeabi_ddiv+0x266>
 8001084:	075d      	lsls	r5, r3, #29
 8001086:	025b      	lsls	r3, r3, #9
 8001088:	0b1a      	lsrs	r2, r3, #12
 800108a:	08c9      	lsrs	r1, r1, #3
 800108c:	2300      	movs	r3, #0
 800108e:	430d      	orrs	r5, r1
 8001090:	e587      	b.n	8000ba2 <__aeabi_ddiv+0xae>
 8001092:	9900      	ldr	r1, [sp, #0]
 8001094:	3d02      	subs	r5, #2
 8001096:	004a      	lsls	r2, r1, #1
 8001098:	428a      	cmp	r2, r1
 800109a:	41bf      	sbcs	r7, r7
 800109c:	427f      	negs	r7, r7
 800109e:	193f      	adds	r7, r7, r4
 80010a0:	19f6      	adds	r6, r6, r7
 80010a2:	9200      	str	r2, [sp, #0]
 80010a4:	e7dd      	b.n	8001062 <__aeabi_ddiv+0x56e>
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	4643      	mov	r3, r8
 80010aa:	0312      	lsls	r2, r2, #12
 80010ac:	431a      	orrs	r2, r3
 80010ae:	0312      	lsls	r2, r2, #12
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <__aeabi_ddiv+0x5cc>)
 80010b2:	0b12      	lsrs	r2, r2, #12
 80010b4:	e575      	b.n	8000ba2 <__aeabi_ddiv+0xae>
 80010b6:	9900      	ldr	r1, [sp, #0]
 80010b8:	4299      	cmp	r1, r3
 80010ba:	d3ea      	bcc.n	8001092 <__aeabi_ddiv+0x59e>
 80010bc:	0015      	movs	r5, r2
 80010be:	e7d3      	b.n	8001068 <__aeabi_ddiv+0x574>
 80010c0:	000007ff 	.word	0x000007ff
 80010c4:	0000043e 	.word	0x0000043e
 80010c8:	0000041e 	.word	0x0000041e
 80010cc:	000003ff 	.word	0x000003ff

080010d0 <__aeabi_dsub>:
 80010d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d2:	4657      	mov	r7, sl
 80010d4:	464e      	mov	r6, r9
 80010d6:	4645      	mov	r5, r8
 80010d8:	46de      	mov	lr, fp
 80010da:	b5e0      	push	{r5, r6, r7, lr}
 80010dc:	000d      	movs	r5, r1
 80010de:	0004      	movs	r4, r0
 80010e0:	0019      	movs	r1, r3
 80010e2:	0010      	movs	r0, r2
 80010e4:	032b      	lsls	r3, r5, #12
 80010e6:	0a5b      	lsrs	r3, r3, #9
 80010e8:	0f62      	lsrs	r2, r4, #29
 80010ea:	431a      	orrs	r2, r3
 80010ec:	00e3      	lsls	r3, r4, #3
 80010ee:	030c      	lsls	r4, r1, #12
 80010f0:	0a64      	lsrs	r4, r4, #9
 80010f2:	0f47      	lsrs	r7, r0, #29
 80010f4:	4327      	orrs	r7, r4
 80010f6:	4cd0      	ldr	r4, [pc, #832]	; (8001438 <__aeabi_dsub+0x368>)
 80010f8:	006e      	lsls	r6, r5, #1
 80010fa:	4691      	mov	r9, r2
 80010fc:	b083      	sub	sp, #12
 80010fe:	004a      	lsls	r2, r1, #1
 8001100:	00c0      	lsls	r0, r0, #3
 8001102:	4698      	mov	r8, r3
 8001104:	46a2      	mov	sl, r4
 8001106:	0d76      	lsrs	r6, r6, #21
 8001108:	0fed      	lsrs	r5, r5, #31
 800110a:	0d52      	lsrs	r2, r2, #21
 800110c:	0fc9      	lsrs	r1, r1, #31
 800110e:	9001      	str	r0, [sp, #4]
 8001110:	42a2      	cmp	r2, r4
 8001112:	d100      	bne.n	8001116 <__aeabi_dsub+0x46>
 8001114:	e0b9      	b.n	800128a <__aeabi_dsub+0x1ba>
 8001116:	2401      	movs	r4, #1
 8001118:	4061      	eors	r1, r4
 800111a:	468b      	mov	fp, r1
 800111c:	428d      	cmp	r5, r1
 800111e:	d100      	bne.n	8001122 <__aeabi_dsub+0x52>
 8001120:	e08d      	b.n	800123e <__aeabi_dsub+0x16e>
 8001122:	1ab4      	subs	r4, r6, r2
 8001124:	46a4      	mov	ip, r4
 8001126:	2c00      	cmp	r4, #0
 8001128:	dc00      	bgt.n	800112c <__aeabi_dsub+0x5c>
 800112a:	e0b7      	b.n	800129c <__aeabi_dsub+0x1cc>
 800112c:	2a00      	cmp	r2, #0
 800112e:	d100      	bne.n	8001132 <__aeabi_dsub+0x62>
 8001130:	e0cb      	b.n	80012ca <__aeabi_dsub+0x1fa>
 8001132:	4ac1      	ldr	r2, [pc, #772]	; (8001438 <__aeabi_dsub+0x368>)
 8001134:	4296      	cmp	r6, r2
 8001136:	d100      	bne.n	800113a <__aeabi_dsub+0x6a>
 8001138:	e186      	b.n	8001448 <__aeabi_dsub+0x378>
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	0412      	lsls	r2, r2, #16
 800113e:	4317      	orrs	r7, r2
 8001140:	4662      	mov	r2, ip
 8001142:	2a38      	cmp	r2, #56	; 0x38
 8001144:	dd00      	ble.n	8001148 <__aeabi_dsub+0x78>
 8001146:	e1a4      	b.n	8001492 <__aeabi_dsub+0x3c2>
 8001148:	2a1f      	cmp	r2, #31
 800114a:	dd00      	ble.n	800114e <__aeabi_dsub+0x7e>
 800114c:	e21d      	b.n	800158a <__aeabi_dsub+0x4ba>
 800114e:	4661      	mov	r1, ip
 8001150:	2220      	movs	r2, #32
 8001152:	003c      	movs	r4, r7
 8001154:	1a52      	subs	r2, r2, r1
 8001156:	0001      	movs	r1, r0
 8001158:	4090      	lsls	r0, r2
 800115a:	4094      	lsls	r4, r2
 800115c:	1e42      	subs	r2, r0, #1
 800115e:	4190      	sbcs	r0, r2
 8001160:	4662      	mov	r2, ip
 8001162:	46a0      	mov	r8, r4
 8001164:	4664      	mov	r4, ip
 8001166:	40d7      	lsrs	r7, r2
 8001168:	464a      	mov	r2, r9
 800116a:	40e1      	lsrs	r1, r4
 800116c:	4644      	mov	r4, r8
 800116e:	1bd2      	subs	r2, r2, r7
 8001170:	4691      	mov	r9, r2
 8001172:	430c      	orrs	r4, r1
 8001174:	4304      	orrs	r4, r0
 8001176:	1b1c      	subs	r4, r3, r4
 8001178:	42a3      	cmp	r3, r4
 800117a:	4192      	sbcs	r2, r2
 800117c:	464b      	mov	r3, r9
 800117e:	4252      	negs	r2, r2
 8001180:	1a9b      	subs	r3, r3, r2
 8001182:	469a      	mov	sl, r3
 8001184:	4653      	mov	r3, sl
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	d400      	bmi.n	800118c <__aeabi_dsub+0xbc>
 800118a:	e12b      	b.n	80013e4 <__aeabi_dsub+0x314>
 800118c:	4653      	mov	r3, sl
 800118e:	025a      	lsls	r2, r3, #9
 8001190:	0a53      	lsrs	r3, r2, #9
 8001192:	469a      	mov	sl, r3
 8001194:	4653      	mov	r3, sl
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <__aeabi_dsub+0xcc>
 800119a:	e166      	b.n	800146a <__aeabi_dsub+0x39a>
 800119c:	4650      	mov	r0, sl
 800119e:	f000 fbbd 	bl	800191c <__clzsi2>
 80011a2:	0003      	movs	r3, r0
 80011a4:	3b08      	subs	r3, #8
 80011a6:	2220      	movs	r2, #32
 80011a8:	0020      	movs	r0, r4
 80011aa:	1ad2      	subs	r2, r2, r3
 80011ac:	4651      	mov	r1, sl
 80011ae:	40d0      	lsrs	r0, r2
 80011b0:	4099      	lsls	r1, r3
 80011b2:	0002      	movs	r2, r0
 80011b4:	409c      	lsls	r4, r3
 80011b6:	430a      	orrs	r2, r1
 80011b8:	429e      	cmp	r6, r3
 80011ba:	dd00      	ble.n	80011be <__aeabi_dsub+0xee>
 80011bc:	e164      	b.n	8001488 <__aeabi_dsub+0x3b8>
 80011be:	1b9b      	subs	r3, r3, r6
 80011c0:	1c59      	adds	r1, r3, #1
 80011c2:	291f      	cmp	r1, #31
 80011c4:	dd00      	ble.n	80011c8 <__aeabi_dsub+0xf8>
 80011c6:	e0fe      	b.n	80013c6 <__aeabi_dsub+0x2f6>
 80011c8:	2320      	movs	r3, #32
 80011ca:	0010      	movs	r0, r2
 80011cc:	0026      	movs	r6, r4
 80011ce:	1a5b      	subs	r3, r3, r1
 80011d0:	409c      	lsls	r4, r3
 80011d2:	4098      	lsls	r0, r3
 80011d4:	40ce      	lsrs	r6, r1
 80011d6:	40ca      	lsrs	r2, r1
 80011d8:	1e63      	subs	r3, r4, #1
 80011da:	419c      	sbcs	r4, r3
 80011dc:	4330      	orrs	r0, r6
 80011de:	4692      	mov	sl, r2
 80011e0:	2600      	movs	r6, #0
 80011e2:	4304      	orrs	r4, r0
 80011e4:	0763      	lsls	r3, r4, #29
 80011e6:	d009      	beq.n	80011fc <__aeabi_dsub+0x12c>
 80011e8:	230f      	movs	r3, #15
 80011ea:	4023      	ands	r3, r4
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d005      	beq.n	80011fc <__aeabi_dsub+0x12c>
 80011f0:	1d23      	adds	r3, r4, #4
 80011f2:	42a3      	cmp	r3, r4
 80011f4:	41a4      	sbcs	r4, r4
 80011f6:	4264      	negs	r4, r4
 80011f8:	44a2      	add	sl, r4
 80011fa:	001c      	movs	r4, r3
 80011fc:	4653      	mov	r3, sl
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	d400      	bmi.n	8001204 <__aeabi_dsub+0x134>
 8001202:	e0f2      	b.n	80013ea <__aeabi_dsub+0x31a>
 8001204:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <__aeabi_dsub+0x368>)
 8001206:	3601      	adds	r6, #1
 8001208:	429e      	cmp	r6, r3
 800120a:	d100      	bne.n	800120e <__aeabi_dsub+0x13e>
 800120c:	e10f      	b.n	800142e <__aeabi_dsub+0x35e>
 800120e:	4653      	mov	r3, sl
 8001210:	498a      	ldr	r1, [pc, #552]	; (800143c <__aeabi_dsub+0x36c>)
 8001212:	08e4      	lsrs	r4, r4, #3
 8001214:	400b      	ands	r3, r1
 8001216:	0019      	movs	r1, r3
 8001218:	075b      	lsls	r3, r3, #29
 800121a:	4323      	orrs	r3, r4
 800121c:	0572      	lsls	r2, r6, #21
 800121e:	024c      	lsls	r4, r1, #9
 8001220:	0b24      	lsrs	r4, r4, #12
 8001222:	0d52      	lsrs	r2, r2, #21
 8001224:	0512      	lsls	r2, r2, #20
 8001226:	4322      	orrs	r2, r4
 8001228:	07ed      	lsls	r5, r5, #31
 800122a:	432a      	orrs	r2, r5
 800122c:	0018      	movs	r0, r3
 800122e:	0011      	movs	r1, r2
 8001230:	b003      	add	sp, #12
 8001232:	bcf0      	pop	{r4, r5, r6, r7}
 8001234:	46bb      	mov	fp, r7
 8001236:	46b2      	mov	sl, r6
 8001238:	46a9      	mov	r9, r5
 800123a:	46a0      	mov	r8, r4
 800123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800123e:	1ab4      	subs	r4, r6, r2
 8001240:	46a4      	mov	ip, r4
 8001242:	2c00      	cmp	r4, #0
 8001244:	dd59      	ble.n	80012fa <__aeabi_dsub+0x22a>
 8001246:	2a00      	cmp	r2, #0
 8001248:	d100      	bne.n	800124c <__aeabi_dsub+0x17c>
 800124a:	e0b0      	b.n	80013ae <__aeabi_dsub+0x2de>
 800124c:	4556      	cmp	r6, sl
 800124e:	d100      	bne.n	8001252 <__aeabi_dsub+0x182>
 8001250:	e0fa      	b.n	8001448 <__aeabi_dsub+0x378>
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	0412      	lsls	r2, r2, #16
 8001256:	4317      	orrs	r7, r2
 8001258:	4662      	mov	r2, ip
 800125a:	2a38      	cmp	r2, #56	; 0x38
 800125c:	dd00      	ble.n	8001260 <__aeabi_dsub+0x190>
 800125e:	e0d4      	b.n	800140a <__aeabi_dsub+0x33a>
 8001260:	2a1f      	cmp	r2, #31
 8001262:	dc00      	bgt.n	8001266 <__aeabi_dsub+0x196>
 8001264:	e1c0      	b.n	80015e8 <__aeabi_dsub+0x518>
 8001266:	0039      	movs	r1, r7
 8001268:	3a20      	subs	r2, #32
 800126a:	40d1      	lsrs	r1, r2
 800126c:	4662      	mov	r2, ip
 800126e:	2a20      	cmp	r2, #32
 8001270:	d006      	beq.n	8001280 <__aeabi_dsub+0x1b0>
 8001272:	4664      	mov	r4, ip
 8001274:	2240      	movs	r2, #64	; 0x40
 8001276:	1b12      	subs	r2, r2, r4
 8001278:	003c      	movs	r4, r7
 800127a:	4094      	lsls	r4, r2
 800127c:	4304      	orrs	r4, r0
 800127e:	9401      	str	r4, [sp, #4]
 8001280:	9c01      	ldr	r4, [sp, #4]
 8001282:	1e62      	subs	r2, r4, #1
 8001284:	4194      	sbcs	r4, r2
 8001286:	430c      	orrs	r4, r1
 8001288:	e0c3      	b.n	8001412 <__aeabi_dsub+0x342>
 800128a:	003c      	movs	r4, r7
 800128c:	4304      	orrs	r4, r0
 800128e:	d02b      	beq.n	80012e8 <__aeabi_dsub+0x218>
 8001290:	468b      	mov	fp, r1
 8001292:	428d      	cmp	r5, r1
 8001294:	d02e      	beq.n	80012f4 <__aeabi_dsub+0x224>
 8001296:	4c6a      	ldr	r4, [pc, #424]	; (8001440 <__aeabi_dsub+0x370>)
 8001298:	46a4      	mov	ip, r4
 800129a:	44b4      	add	ip, r6
 800129c:	4664      	mov	r4, ip
 800129e:	2c00      	cmp	r4, #0
 80012a0:	d05f      	beq.n	8001362 <__aeabi_dsub+0x292>
 80012a2:	1b94      	subs	r4, r2, r6
 80012a4:	46a4      	mov	ip, r4
 80012a6:	2e00      	cmp	r6, #0
 80012a8:	d000      	beq.n	80012ac <__aeabi_dsub+0x1dc>
 80012aa:	e120      	b.n	80014ee <__aeabi_dsub+0x41e>
 80012ac:	464c      	mov	r4, r9
 80012ae:	431c      	orrs	r4, r3
 80012b0:	d100      	bne.n	80012b4 <__aeabi_dsub+0x1e4>
 80012b2:	e1c7      	b.n	8001644 <__aeabi_dsub+0x574>
 80012b4:	4661      	mov	r1, ip
 80012b6:	1e4c      	subs	r4, r1, #1
 80012b8:	2901      	cmp	r1, #1
 80012ba:	d100      	bne.n	80012be <__aeabi_dsub+0x1ee>
 80012bc:	e223      	b.n	8001706 <__aeabi_dsub+0x636>
 80012be:	4d5e      	ldr	r5, [pc, #376]	; (8001438 <__aeabi_dsub+0x368>)
 80012c0:	45ac      	cmp	ip, r5
 80012c2:	d100      	bne.n	80012c6 <__aeabi_dsub+0x1f6>
 80012c4:	e1d8      	b.n	8001678 <__aeabi_dsub+0x5a8>
 80012c6:	46a4      	mov	ip, r4
 80012c8:	e11a      	b.n	8001500 <__aeabi_dsub+0x430>
 80012ca:	003a      	movs	r2, r7
 80012cc:	4302      	orrs	r2, r0
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dsub+0x202>
 80012d0:	e0e4      	b.n	800149c <__aeabi_dsub+0x3cc>
 80012d2:	0022      	movs	r2, r4
 80012d4:	3a01      	subs	r2, #1
 80012d6:	2c01      	cmp	r4, #1
 80012d8:	d100      	bne.n	80012dc <__aeabi_dsub+0x20c>
 80012da:	e1c3      	b.n	8001664 <__aeabi_dsub+0x594>
 80012dc:	4956      	ldr	r1, [pc, #344]	; (8001438 <__aeabi_dsub+0x368>)
 80012de:	428c      	cmp	r4, r1
 80012e0:	d100      	bne.n	80012e4 <__aeabi_dsub+0x214>
 80012e2:	e0b1      	b.n	8001448 <__aeabi_dsub+0x378>
 80012e4:	4694      	mov	ip, r2
 80012e6:	e72b      	b.n	8001140 <__aeabi_dsub+0x70>
 80012e8:	2401      	movs	r4, #1
 80012ea:	4061      	eors	r1, r4
 80012ec:	468b      	mov	fp, r1
 80012ee:	428d      	cmp	r5, r1
 80012f0:	d000      	beq.n	80012f4 <__aeabi_dsub+0x224>
 80012f2:	e716      	b.n	8001122 <__aeabi_dsub+0x52>
 80012f4:	4952      	ldr	r1, [pc, #328]	; (8001440 <__aeabi_dsub+0x370>)
 80012f6:	468c      	mov	ip, r1
 80012f8:	44b4      	add	ip, r6
 80012fa:	4664      	mov	r4, ip
 80012fc:	2c00      	cmp	r4, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_dsub+0x232>
 8001300:	e0d3      	b.n	80014aa <__aeabi_dsub+0x3da>
 8001302:	1b91      	subs	r1, r2, r6
 8001304:	468c      	mov	ip, r1
 8001306:	2e00      	cmp	r6, #0
 8001308:	d100      	bne.n	800130c <__aeabi_dsub+0x23c>
 800130a:	e15e      	b.n	80015ca <__aeabi_dsub+0x4fa>
 800130c:	494a      	ldr	r1, [pc, #296]	; (8001438 <__aeabi_dsub+0x368>)
 800130e:	428a      	cmp	r2, r1
 8001310:	d100      	bne.n	8001314 <__aeabi_dsub+0x244>
 8001312:	e1be      	b.n	8001692 <__aeabi_dsub+0x5c2>
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	464c      	mov	r4, r9
 8001318:	0409      	lsls	r1, r1, #16
 800131a:	430c      	orrs	r4, r1
 800131c:	46a1      	mov	r9, r4
 800131e:	4661      	mov	r1, ip
 8001320:	2938      	cmp	r1, #56	; 0x38
 8001322:	dd00      	ble.n	8001326 <__aeabi_dsub+0x256>
 8001324:	e1ba      	b.n	800169c <__aeabi_dsub+0x5cc>
 8001326:	291f      	cmp	r1, #31
 8001328:	dd00      	ble.n	800132c <__aeabi_dsub+0x25c>
 800132a:	e227      	b.n	800177c <__aeabi_dsub+0x6ac>
 800132c:	2420      	movs	r4, #32
 800132e:	1a64      	subs	r4, r4, r1
 8001330:	4649      	mov	r1, r9
 8001332:	40a1      	lsls	r1, r4
 8001334:	001e      	movs	r6, r3
 8001336:	4688      	mov	r8, r1
 8001338:	4661      	mov	r1, ip
 800133a:	40a3      	lsls	r3, r4
 800133c:	40ce      	lsrs	r6, r1
 800133e:	4641      	mov	r1, r8
 8001340:	1e5c      	subs	r4, r3, #1
 8001342:	41a3      	sbcs	r3, r4
 8001344:	4331      	orrs	r1, r6
 8001346:	4319      	orrs	r1, r3
 8001348:	000c      	movs	r4, r1
 800134a:	4663      	mov	r3, ip
 800134c:	4649      	mov	r1, r9
 800134e:	40d9      	lsrs	r1, r3
 8001350:	187f      	adds	r7, r7, r1
 8001352:	1824      	adds	r4, r4, r0
 8001354:	4284      	cmp	r4, r0
 8001356:	419b      	sbcs	r3, r3
 8001358:	425b      	negs	r3, r3
 800135a:	469a      	mov	sl, r3
 800135c:	0016      	movs	r6, r2
 800135e:	44ba      	add	sl, r7
 8001360:	e05d      	b.n	800141e <__aeabi_dsub+0x34e>
 8001362:	4c38      	ldr	r4, [pc, #224]	; (8001444 <__aeabi_dsub+0x374>)
 8001364:	1c72      	adds	r2, r6, #1
 8001366:	4222      	tst	r2, r4
 8001368:	d000      	beq.n	800136c <__aeabi_dsub+0x29c>
 800136a:	e0df      	b.n	800152c <__aeabi_dsub+0x45c>
 800136c:	464a      	mov	r2, r9
 800136e:	431a      	orrs	r2, r3
 8001370:	2e00      	cmp	r6, #0
 8001372:	d000      	beq.n	8001376 <__aeabi_dsub+0x2a6>
 8001374:	e15c      	b.n	8001630 <__aeabi_dsub+0x560>
 8001376:	2a00      	cmp	r2, #0
 8001378:	d100      	bne.n	800137c <__aeabi_dsub+0x2ac>
 800137a:	e1cf      	b.n	800171c <__aeabi_dsub+0x64c>
 800137c:	003a      	movs	r2, r7
 800137e:	4302      	orrs	r2, r0
 8001380:	d100      	bne.n	8001384 <__aeabi_dsub+0x2b4>
 8001382:	e17f      	b.n	8001684 <__aeabi_dsub+0x5b4>
 8001384:	1a1c      	subs	r4, r3, r0
 8001386:	464a      	mov	r2, r9
 8001388:	42a3      	cmp	r3, r4
 800138a:	4189      	sbcs	r1, r1
 800138c:	1bd2      	subs	r2, r2, r7
 800138e:	4249      	negs	r1, r1
 8001390:	1a52      	subs	r2, r2, r1
 8001392:	4692      	mov	sl, r2
 8001394:	0212      	lsls	r2, r2, #8
 8001396:	d400      	bmi.n	800139a <__aeabi_dsub+0x2ca>
 8001398:	e20a      	b.n	80017b0 <__aeabi_dsub+0x6e0>
 800139a:	1ac4      	subs	r4, r0, r3
 800139c:	42a0      	cmp	r0, r4
 800139e:	4180      	sbcs	r0, r0
 80013a0:	464b      	mov	r3, r9
 80013a2:	4240      	negs	r0, r0
 80013a4:	1aff      	subs	r7, r7, r3
 80013a6:	1a3b      	subs	r3, r7, r0
 80013a8:	469a      	mov	sl, r3
 80013aa:	465d      	mov	r5, fp
 80013ac:	e71a      	b.n	80011e4 <__aeabi_dsub+0x114>
 80013ae:	003a      	movs	r2, r7
 80013b0:	4302      	orrs	r2, r0
 80013b2:	d073      	beq.n	800149c <__aeabi_dsub+0x3cc>
 80013b4:	0022      	movs	r2, r4
 80013b6:	3a01      	subs	r2, #1
 80013b8:	2c01      	cmp	r4, #1
 80013ba:	d100      	bne.n	80013be <__aeabi_dsub+0x2ee>
 80013bc:	e0cb      	b.n	8001556 <__aeabi_dsub+0x486>
 80013be:	4554      	cmp	r4, sl
 80013c0:	d042      	beq.n	8001448 <__aeabi_dsub+0x378>
 80013c2:	4694      	mov	ip, r2
 80013c4:	e748      	b.n	8001258 <__aeabi_dsub+0x188>
 80013c6:	0010      	movs	r0, r2
 80013c8:	3b1f      	subs	r3, #31
 80013ca:	40d8      	lsrs	r0, r3
 80013cc:	2920      	cmp	r1, #32
 80013ce:	d003      	beq.n	80013d8 <__aeabi_dsub+0x308>
 80013d0:	2340      	movs	r3, #64	; 0x40
 80013d2:	1a5b      	subs	r3, r3, r1
 80013d4:	409a      	lsls	r2, r3
 80013d6:	4314      	orrs	r4, r2
 80013d8:	1e63      	subs	r3, r4, #1
 80013da:	419c      	sbcs	r4, r3
 80013dc:	2300      	movs	r3, #0
 80013de:	2600      	movs	r6, #0
 80013e0:	469a      	mov	sl, r3
 80013e2:	4304      	orrs	r4, r0
 80013e4:	0763      	lsls	r3, r4, #29
 80013e6:	d000      	beq.n	80013ea <__aeabi_dsub+0x31a>
 80013e8:	e6fe      	b.n	80011e8 <__aeabi_dsub+0x118>
 80013ea:	4652      	mov	r2, sl
 80013ec:	08e3      	lsrs	r3, r4, #3
 80013ee:	0752      	lsls	r2, r2, #29
 80013f0:	4313      	orrs	r3, r2
 80013f2:	4652      	mov	r2, sl
 80013f4:	46b4      	mov	ip, r6
 80013f6:	08d2      	lsrs	r2, r2, #3
 80013f8:	490f      	ldr	r1, [pc, #60]	; (8001438 <__aeabi_dsub+0x368>)
 80013fa:	458c      	cmp	ip, r1
 80013fc:	d02a      	beq.n	8001454 <__aeabi_dsub+0x384>
 80013fe:	0312      	lsls	r2, r2, #12
 8001400:	0b14      	lsrs	r4, r2, #12
 8001402:	4662      	mov	r2, ip
 8001404:	0552      	lsls	r2, r2, #21
 8001406:	0d52      	lsrs	r2, r2, #21
 8001408:	e70c      	b.n	8001224 <__aeabi_dsub+0x154>
 800140a:	003c      	movs	r4, r7
 800140c:	4304      	orrs	r4, r0
 800140e:	1e62      	subs	r2, r4, #1
 8001410:	4194      	sbcs	r4, r2
 8001412:	18e4      	adds	r4, r4, r3
 8001414:	429c      	cmp	r4, r3
 8001416:	4192      	sbcs	r2, r2
 8001418:	4252      	negs	r2, r2
 800141a:	444a      	add	r2, r9
 800141c:	4692      	mov	sl, r2
 800141e:	4653      	mov	r3, sl
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	d5df      	bpl.n	80013e4 <__aeabi_dsub+0x314>
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__aeabi_dsub+0x368>)
 8001426:	3601      	adds	r6, #1
 8001428:	429e      	cmp	r6, r3
 800142a:	d000      	beq.n	800142e <__aeabi_dsub+0x35e>
 800142c:	e0a0      	b.n	8001570 <__aeabi_dsub+0x4a0>
 800142e:	0032      	movs	r2, r6
 8001430:	2400      	movs	r4, #0
 8001432:	2300      	movs	r3, #0
 8001434:	e6f6      	b.n	8001224 <__aeabi_dsub+0x154>
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	000007ff 	.word	0x000007ff
 800143c:	ff7fffff 	.word	0xff7fffff
 8001440:	fffff801 	.word	0xfffff801
 8001444:	000007fe 	.word	0x000007fe
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	464a      	mov	r2, r9
 800144c:	0752      	lsls	r2, r2, #29
 800144e:	4313      	orrs	r3, r2
 8001450:	464a      	mov	r2, r9
 8001452:	08d2      	lsrs	r2, r2, #3
 8001454:	0019      	movs	r1, r3
 8001456:	4311      	orrs	r1, r2
 8001458:	d100      	bne.n	800145c <__aeabi_dsub+0x38c>
 800145a:	e1b5      	b.n	80017c8 <__aeabi_dsub+0x6f8>
 800145c:	2480      	movs	r4, #128	; 0x80
 800145e:	0324      	lsls	r4, r4, #12
 8001460:	4314      	orrs	r4, r2
 8001462:	0324      	lsls	r4, r4, #12
 8001464:	4ad5      	ldr	r2, [pc, #852]	; (80017bc <__aeabi_dsub+0x6ec>)
 8001466:	0b24      	lsrs	r4, r4, #12
 8001468:	e6dc      	b.n	8001224 <__aeabi_dsub+0x154>
 800146a:	0020      	movs	r0, r4
 800146c:	f000 fa56 	bl	800191c <__clzsi2>
 8001470:	0003      	movs	r3, r0
 8001472:	3318      	adds	r3, #24
 8001474:	2b1f      	cmp	r3, #31
 8001476:	dc00      	bgt.n	800147a <__aeabi_dsub+0x3aa>
 8001478:	e695      	b.n	80011a6 <__aeabi_dsub+0xd6>
 800147a:	0022      	movs	r2, r4
 800147c:	3808      	subs	r0, #8
 800147e:	4082      	lsls	r2, r0
 8001480:	2400      	movs	r4, #0
 8001482:	429e      	cmp	r6, r3
 8001484:	dc00      	bgt.n	8001488 <__aeabi_dsub+0x3b8>
 8001486:	e69a      	b.n	80011be <__aeabi_dsub+0xee>
 8001488:	1af6      	subs	r6, r6, r3
 800148a:	4bcd      	ldr	r3, [pc, #820]	; (80017c0 <__aeabi_dsub+0x6f0>)
 800148c:	401a      	ands	r2, r3
 800148e:	4692      	mov	sl, r2
 8001490:	e6a8      	b.n	80011e4 <__aeabi_dsub+0x114>
 8001492:	003c      	movs	r4, r7
 8001494:	4304      	orrs	r4, r0
 8001496:	1e62      	subs	r2, r4, #1
 8001498:	4194      	sbcs	r4, r2
 800149a:	e66c      	b.n	8001176 <__aeabi_dsub+0xa6>
 800149c:	464a      	mov	r2, r9
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	0752      	lsls	r2, r2, #29
 80014a2:	4313      	orrs	r3, r2
 80014a4:	464a      	mov	r2, r9
 80014a6:	08d2      	lsrs	r2, r2, #3
 80014a8:	e7a6      	b.n	80013f8 <__aeabi_dsub+0x328>
 80014aa:	4cc6      	ldr	r4, [pc, #792]	; (80017c4 <__aeabi_dsub+0x6f4>)
 80014ac:	1c72      	adds	r2, r6, #1
 80014ae:	4222      	tst	r2, r4
 80014b0:	d000      	beq.n	80014b4 <__aeabi_dsub+0x3e4>
 80014b2:	e0ac      	b.n	800160e <__aeabi_dsub+0x53e>
 80014b4:	464a      	mov	r2, r9
 80014b6:	431a      	orrs	r2, r3
 80014b8:	2e00      	cmp	r6, #0
 80014ba:	d000      	beq.n	80014be <__aeabi_dsub+0x3ee>
 80014bc:	e105      	b.n	80016ca <__aeabi_dsub+0x5fa>
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dsub+0x3f4>
 80014c2:	e156      	b.n	8001772 <__aeabi_dsub+0x6a2>
 80014c4:	003a      	movs	r2, r7
 80014c6:	4302      	orrs	r2, r0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dsub+0x3fc>
 80014ca:	e0db      	b.n	8001684 <__aeabi_dsub+0x5b4>
 80014cc:	181c      	adds	r4, r3, r0
 80014ce:	429c      	cmp	r4, r3
 80014d0:	419b      	sbcs	r3, r3
 80014d2:	444f      	add	r7, r9
 80014d4:	46ba      	mov	sl, r7
 80014d6:	425b      	negs	r3, r3
 80014d8:	449a      	add	sl, r3
 80014da:	4653      	mov	r3, sl
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	d400      	bmi.n	80014e2 <__aeabi_dsub+0x412>
 80014e0:	e780      	b.n	80013e4 <__aeabi_dsub+0x314>
 80014e2:	4652      	mov	r2, sl
 80014e4:	4bb6      	ldr	r3, [pc, #728]	; (80017c0 <__aeabi_dsub+0x6f0>)
 80014e6:	2601      	movs	r6, #1
 80014e8:	401a      	ands	r2, r3
 80014ea:	4692      	mov	sl, r2
 80014ec:	e77a      	b.n	80013e4 <__aeabi_dsub+0x314>
 80014ee:	4cb3      	ldr	r4, [pc, #716]	; (80017bc <__aeabi_dsub+0x6ec>)
 80014f0:	42a2      	cmp	r2, r4
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dsub+0x426>
 80014f4:	e0c0      	b.n	8001678 <__aeabi_dsub+0x5a8>
 80014f6:	2480      	movs	r4, #128	; 0x80
 80014f8:	464d      	mov	r5, r9
 80014fa:	0424      	lsls	r4, r4, #16
 80014fc:	4325      	orrs	r5, r4
 80014fe:	46a9      	mov	r9, r5
 8001500:	4664      	mov	r4, ip
 8001502:	2c38      	cmp	r4, #56	; 0x38
 8001504:	dc53      	bgt.n	80015ae <__aeabi_dsub+0x4de>
 8001506:	4661      	mov	r1, ip
 8001508:	2c1f      	cmp	r4, #31
 800150a:	dd00      	ble.n	800150e <__aeabi_dsub+0x43e>
 800150c:	e0cd      	b.n	80016aa <__aeabi_dsub+0x5da>
 800150e:	2520      	movs	r5, #32
 8001510:	001e      	movs	r6, r3
 8001512:	1b2d      	subs	r5, r5, r4
 8001514:	464c      	mov	r4, r9
 8001516:	40ab      	lsls	r3, r5
 8001518:	40ac      	lsls	r4, r5
 800151a:	40ce      	lsrs	r6, r1
 800151c:	1e5d      	subs	r5, r3, #1
 800151e:	41ab      	sbcs	r3, r5
 8001520:	4334      	orrs	r4, r6
 8001522:	4323      	orrs	r3, r4
 8001524:	464c      	mov	r4, r9
 8001526:	40cc      	lsrs	r4, r1
 8001528:	1b3f      	subs	r7, r7, r4
 800152a:	e045      	b.n	80015b8 <__aeabi_dsub+0x4e8>
 800152c:	464a      	mov	r2, r9
 800152e:	1a1c      	subs	r4, r3, r0
 8001530:	1bd1      	subs	r1, r2, r7
 8001532:	42a3      	cmp	r3, r4
 8001534:	4192      	sbcs	r2, r2
 8001536:	4252      	negs	r2, r2
 8001538:	4692      	mov	sl, r2
 800153a:	000a      	movs	r2, r1
 800153c:	4651      	mov	r1, sl
 800153e:	1a52      	subs	r2, r2, r1
 8001540:	4692      	mov	sl, r2
 8001542:	0212      	lsls	r2, r2, #8
 8001544:	d500      	bpl.n	8001548 <__aeabi_dsub+0x478>
 8001546:	e083      	b.n	8001650 <__aeabi_dsub+0x580>
 8001548:	4653      	mov	r3, sl
 800154a:	4323      	orrs	r3, r4
 800154c:	d000      	beq.n	8001550 <__aeabi_dsub+0x480>
 800154e:	e621      	b.n	8001194 <__aeabi_dsub+0xc4>
 8001550:	2200      	movs	r2, #0
 8001552:	2500      	movs	r5, #0
 8001554:	e753      	b.n	80013fe <__aeabi_dsub+0x32e>
 8001556:	181c      	adds	r4, r3, r0
 8001558:	429c      	cmp	r4, r3
 800155a:	419b      	sbcs	r3, r3
 800155c:	444f      	add	r7, r9
 800155e:	46ba      	mov	sl, r7
 8001560:	425b      	negs	r3, r3
 8001562:	449a      	add	sl, r3
 8001564:	4653      	mov	r3, sl
 8001566:	2601      	movs	r6, #1
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	d400      	bmi.n	800156e <__aeabi_dsub+0x49e>
 800156c:	e73a      	b.n	80013e4 <__aeabi_dsub+0x314>
 800156e:	2602      	movs	r6, #2
 8001570:	4652      	mov	r2, sl
 8001572:	4b93      	ldr	r3, [pc, #588]	; (80017c0 <__aeabi_dsub+0x6f0>)
 8001574:	2101      	movs	r1, #1
 8001576:	401a      	ands	r2, r3
 8001578:	0013      	movs	r3, r2
 800157a:	4021      	ands	r1, r4
 800157c:	0862      	lsrs	r2, r4, #1
 800157e:	430a      	orrs	r2, r1
 8001580:	07dc      	lsls	r4, r3, #31
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	469a      	mov	sl, r3
 8001586:	4314      	orrs	r4, r2
 8001588:	e62c      	b.n	80011e4 <__aeabi_dsub+0x114>
 800158a:	0039      	movs	r1, r7
 800158c:	3a20      	subs	r2, #32
 800158e:	40d1      	lsrs	r1, r2
 8001590:	4662      	mov	r2, ip
 8001592:	2a20      	cmp	r2, #32
 8001594:	d006      	beq.n	80015a4 <__aeabi_dsub+0x4d4>
 8001596:	4664      	mov	r4, ip
 8001598:	2240      	movs	r2, #64	; 0x40
 800159a:	1b12      	subs	r2, r2, r4
 800159c:	003c      	movs	r4, r7
 800159e:	4094      	lsls	r4, r2
 80015a0:	4304      	orrs	r4, r0
 80015a2:	9401      	str	r4, [sp, #4]
 80015a4:	9c01      	ldr	r4, [sp, #4]
 80015a6:	1e62      	subs	r2, r4, #1
 80015a8:	4194      	sbcs	r4, r2
 80015aa:	430c      	orrs	r4, r1
 80015ac:	e5e3      	b.n	8001176 <__aeabi_dsub+0xa6>
 80015ae:	4649      	mov	r1, r9
 80015b0:	4319      	orrs	r1, r3
 80015b2:	000b      	movs	r3, r1
 80015b4:	1e5c      	subs	r4, r3, #1
 80015b6:	41a3      	sbcs	r3, r4
 80015b8:	1ac4      	subs	r4, r0, r3
 80015ba:	42a0      	cmp	r0, r4
 80015bc:	419b      	sbcs	r3, r3
 80015be:	425b      	negs	r3, r3
 80015c0:	1afb      	subs	r3, r7, r3
 80015c2:	469a      	mov	sl, r3
 80015c4:	465d      	mov	r5, fp
 80015c6:	0016      	movs	r6, r2
 80015c8:	e5dc      	b.n	8001184 <__aeabi_dsub+0xb4>
 80015ca:	4649      	mov	r1, r9
 80015cc:	4319      	orrs	r1, r3
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dsub+0x502>
 80015d0:	e0ae      	b.n	8001730 <__aeabi_dsub+0x660>
 80015d2:	4661      	mov	r1, ip
 80015d4:	4664      	mov	r4, ip
 80015d6:	3901      	subs	r1, #1
 80015d8:	2c01      	cmp	r4, #1
 80015da:	d100      	bne.n	80015de <__aeabi_dsub+0x50e>
 80015dc:	e0e0      	b.n	80017a0 <__aeabi_dsub+0x6d0>
 80015de:	4c77      	ldr	r4, [pc, #476]	; (80017bc <__aeabi_dsub+0x6ec>)
 80015e0:	45a4      	cmp	ip, r4
 80015e2:	d056      	beq.n	8001692 <__aeabi_dsub+0x5c2>
 80015e4:	468c      	mov	ip, r1
 80015e6:	e69a      	b.n	800131e <__aeabi_dsub+0x24e>
 80015e8:	4661      	mov	r1, ip
 80015ea:	2220      	movs	r2, #32
 80015ec:	003c      	movs	r4, r7
 80015ee:	1a52      	subs	r2, r2, r1
 80015f0:	4094      	lsls	r4, r2
 80015f2:	0001      	movs	r1, r0
 80015f4:	4090      	lsls	r0, r2
 80015f6:	46a0      	mov	r8, r4
 80015f8:	4664      	mov	r4, ip
 80015fa:	1e42      	subs	r2, r0, #1
 80015fc:	4190      	sbcs	r0, r2
 80015fe:	4662      	mov	r2, ip
 8001600:	40e1      	lsrs	r1, r4
 8001602:	4644      	mov	r4, r8
 8001604:	40d7      	lsrs	r7, r2
 8001606:	430c      	orrs	r4, r1
 8001608:	4304      	orrs	r4, r0
 800160a:	44b9      	add	r9, r7
 800160c:	e701      	b.n	8001412 <__aeabi_dsub+0x342>
 800160e:	496b      	ldr	r1, [pc, #428]	; (80017bc <__aeabi_dsub+0x6ec>)
 8001610:	428a      	cmp	r2, r1
 8001612:	d100      	bne.n	8001616 <__aeabi_dsub+0x546>
 8001614:	e70c      	b.n	8001430 <__aeabi_dsub+0x360>
 8001616:	1818      	adds	r0, r3, r0
 8001618:	4298      	cmp	r0, r3
 800161a:	419b      	sbcs	r3, r3
 800161c:	444f      	add	r7, r9
 800161e:	425b      	negs	r3, r3
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	07dc      	lsls	r4, r3, #31
 8001624:	0840      	lsrs	r0, r0, #1
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	469a      	mov	sl, r3
 800162a:	0016      	movs	r6, r2
 800162c:	4304      	orrs	r4, r0
 800162e:	e6d9      	b.n	80013e4 <__aeabi_dsub+0x314>
 8001630:	2a00      	cmp	r2, #0
 8001632:	d000      	beq.n	8001636 <__aeabi_dsub+0x566>
 8001634:	e081      	b.n	800173a <__aeabi_dsub+0x66a>
 8001636:	003b      	movs	r3, r7
 8001638:	4303      	orrs	r3, r0
 800163a:	d11d      	bne.n	8001678 <__aeabi_dsub+0x5a8>
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	2500      	movs	r5, #0
 8001640:	0312      	lsls	r2, r2, #12
 8001642:	e70b      	b.n	800145c <__aeabi_dsub+0x38c>
 8001644:	08c0      	lsrs	r0, r0, #3
 8001646:	077b      	lsls	r3, r7, #29
 8001648:	465d      	mov	r5, fp
 800164a:	4303      	orrs	r3, r0
 800164c:	08fa      	lsrs	r2, r7, #3
 800164e:	e6d3      	b.n	80013f8 <__aeabi_dsub+0x328>
 8001650:	1ac4      	subs	r4, r0, r3
 8001652:	42a0      	cmp	r0, r4
 8001654:	4180      	sbcs	r0, r0
 8001656:	464b      	mov	r3, r9
 8001658:	4240      	negs	r0, r0
 800165a:	1aff      	subs	r7, r7, r3
 800165c:	1a3b      	subs	r3, r7, r0
 800165e:	469a      	mov	sl, r3
 8001660:	465d      	mov	r5, fp
 8001662:	e597      	b.n	8001194 <__aeabi_dsub+0xc4>
 8001664:	1a1c      	subs	r4, r3, r0
 8001666:	464a      	mov	r2, r9
 8001668:	42a3      	cmp	r3, r4
 800166a:	419b      	sbcs	r3, r3
 800166c:	1bd7      	subs	r7, r2, r7
 800166e:	425b      	negs	r3, r3
 8001670:	1afb      	subs	r3, r7, r3
 8001672:	469a      	mov	sl, r3
 8001674:	2601      	movs	r6, #1
 8001676:	e585      	b.n	8001184 <__aeabi_dsub+0xb4>
 8001678:	08c0      	lsrs	r0, r0, #3
 800167a:	077b      	lsls	r3, r7, #29
 800167c:	465d      	mov	r5, fp
 800167e:	4303      	orrs	r3, r0
 8001680:	08fa      	lsrs	r2, r7, #3
 8001682:	e6e7      	b.n	8001454 <__aeabi_dsub+0x384>
 8001684:	464a      	mov	r2, r9
 8001686:	08db      	lsrs	r3, r3, #3
 8001688:	0752      	lsls	r2, r2, #29
 800168a:	4313      	orrs	r3, r2
 800168c:	464a      	mov	r2, r9
 800168e:	08d2      	lsrs	r2, r2, #3
 8001690:	e6b5      	b.n	80013fe <__aeabi_dsub+0x32e>
 8001692:	08c0      	lsrs	r0, r0, #3
 8001694:	077b      	lsls	r3, r7, #29
 8001696:	4303      	orrs	r3, r0
 8001698:	08fa      	lsrs	r2, r7, #3
 800169a:	e6db      	b.n	8001454 <__aeabi_dsub+0x384>
 800169c:	4649      	mov	r1, r9
 800169e:	4319      	orrs	r1, r3
 80016a0:	000b      	movs	r3, r1
 80016a2:	1e59      	subs	r1, r3, #1
 80016a4:	418b      	sbcs	r3, r1
 80016a6:	001c      	movs	r4, r3
 80016a8:	e653      	b.n	8001352 <__aeabi_dsub+0x282>
 80016aa:	464d      	mov	r5, r9
 80016ac:	3c20      	subs	r4, #32
 80016ae:	40e5      	lsrs	r5, r4
 80016b0:	2920      	cmp	r1, #32
 80016b2:	d005      	beq.n	80016c0 <__aeabi_dsub+0x5f0>
 80016b4:	2440      	movs	r4, #64	; 0x40
 80016b6:	1a64      	subs	r4, r4, r1
 80016b8:	4649      	mov	r1, r9
 80016ba:	40a1      	lsls	r1, r4
 80016bc:	430b      	orrs	r3, r1
 80016be:	4698      	mov	r8, r3
 80016c0:	4643      	mov	r3, r8
 80016c2:	1e5c      	subs	r4, r3, #1
 80016c4:	41a3      	sbcs	r3, r4
 80016c6:	432b      	orrs	r3, r5
 80016c8:	e776      	b.n	80015b8 <__aeabi_dsub+0x4e8>
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d0e1      	beq.n	8001692 <__aeabi_dsub+0x5c2>
 80016ce:	003a      	movs	r2, r7
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	4302      	orrs	r2, r0
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dsub+0x608>
 80016d6:	e6b8      	b.n	800144a <__aeabi_dsub+0x37a>
 80016d8:	464a      	mov	r2, r9
 80016da:	0752      	lsls	r2, r2, #29
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	4313      	orrs	r3, r2
 80016e0:	464a      	mov	r2, r9
 80016e2:	0324      	lsls	r4, r4, #12
 80016e4:	08d2      	lsrs	r2, r2, #3
 80016e6:	4222      	tst	r2, r4
 80016e8:	d007      	beq.n	80016fa <__aeabi_dsub+0x62a>
 80016ea:	08fe      	lsrs	r6, r7, #3
 80016ec:	4226      	tst	r6, r4
 80016ee:	d104      	bne.n	80016fa <__aeabi_dsub+0x62a>
 80016f0:	465d      	mov	r5, fp
 80016f2:	0032      	movs	r2, r6
 80016f4:	08c3      	lsrs	r3, r0, #3
 80016f6:	077f      	lsls	r7, r7, #29
 80016f8:	433b      	orrs	r3, r7
 80016fa:	0f59      	lsrs	r1, r3, #29
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	0749      	lsls	r1, r1, #29
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	430b      	orrs	r3, r1
 8001704:	e6a6      	b.n	8001454 <__aeabi_dsub+0x384>
 8001706:	1ac4      	subs	r4, r0, r3
 8001708:	42a0      	cmp	r0, r4
 800170a:	4180      	sbcs	r0, r0
 800170c:	464b      	mov	r3, r9
 800170e:	4240      	negs	r0, r0
 8001710:	1aff      	subs	r7, r7, r3
 8001712:	1a3b      	subs	r3, r7, r0
 8001714:	469a      	mov	sl, r3
 8001716:	465d      	mov	r5, fp
 8001718:	2601      	movs	r6, #1
 800171a:	e533      	b.n	8001184 <__aeabi_dsub+0xb4>
 800171c:	003b      	movs	r3, r7
 800171e:	4303      	orrs	r3, r0
 8001720:	d100      	bne.n	8001724 <__aeabi_dsub+0x654>
 8001722:	e715      	b.n	8001550 <__aeabi_dsub+0x480>
 8001724:	08c0      	lsrs	r0, r0, #3
 8001726:	077b      	lsls	r3, r7, #29
 8001728:	465d      	mov	r5, fp
 800172a:	4303      	orrs	r3, r0
 800172c:	08fa      	lsrs	r2, r7, #3
 800172e:	e666      	b.n	80013fe <__aeabi_dsub+0x32e>
 8001730:	08c0      	lsrs	r0, r0, #3
 8001732:	077b      	lsls	r3, r7, #29
 8001734:	4303      	orrs	r3, r0
 8001736:	08fa      	lsrs	r2, r7, #3
 8001738:	e65e      	b.n	80013f8 <__aeabi_dsub+0x328>
 800173a:	003a      	movs	r2, r7
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	4302      	orrs	r2, r0
 8001740:	d100      	bne.n	8001744 <__aeabi_dsub+0x674>
 8001742:	e682      	b.n	800144a <__aeabi_dsub+0x37a>
 8001744:	464a      	mov	r2, r9
 8001746:	0752      	lsls	r2, r2, #29
 8001748:	2480      	movs	r4, #128	; 0x80
 800174a:	4313      	orrs	r3, r2
 800174c:	464a      	mov	r2, r9
 800174e:	0324      	lsls	r4, r4, #12
 8001750:	08d2      	lsrs	r2, r2, #3
 8001752:	4222      	tst	r2, r4
 8001754:	d007      	beq.n	8001766 <__aeabi_dsub+0x696>
 8001756:	08fe      	lsrs	r6, r7, #3
 8001758:	4226      	tst	r6, r4
 800175a:	d104      	bne.n	8001766 <__aeabi_dsub+0x696>
 800175c:	465d      	mov	r5, fp
 800175e:	0032      	movs	r2, r6
 8001760:	08c3      	lsrs	r3, r0, #3
 8001762:	077f      	lsls	r7, r7, #29
 8001764:	433b      	orrs	r3, r7
 8001766:	0f59      	lsrs	r1, r3, #29
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	0749      	lsls	r1, r1, #29
 800176e:	430b      	orrs	r3, r1
 8001770:	e670      	b.n	8001454 <__aeabi_dsub+0x384>
 8001772:	08c0      	lsrs	r0, r0, #3
 8001774:	077b      	lsls	r3, r7, #29
 8001776:	4303      	orrs	r3, r0
 8001778:	08fa      	lsrs	r2, r7, #3
 800177a:	e640      	b.n	80013fe <__aeabi_dsub+0x32e>
 800177c:	464c      	mov	r4, r9
 800177e:	3920      	subs	r1, #32
 8001780:	40cc      	lsrs	r4, r1
 8001782:	4661      	mov	r1, ip
 8001784:	2920      	cmp	r1, #32
 8001786:	d006      	beq.n	8001796 <__aeabi_dsub+0x6c6>
 8001788:	4666      	mov	r6, ip
 800178a:	2140      	movs	r1, #64	; 0x40
 800178c:	1b89      	subs	r1, r1, r6
 800178e:	464e      	mov	r6, r9
 8001790:	408e      	lsls	r6, r1
 8001792:	4333      	orrs	r3, r6
 8001794:	4698      	mov	r8, r3
 8001796:	4643      	mov	r3, r8
 8001798:	1e59      	subs	r1, r3, #1
 800179a:	418b      	sbcs	r3, r1
 800179c:	431c      	orrs	r4, r3
 800179e:	e5d8      	b.n	8001352 <__aeabi_dsub+0x282>
 80017a0:	181c      	adds	r4, r3, r0
 80017a2:	4284      	cmp	r4, r0
 80017a4:	4180      	sbcs	r0, r0
 80017a6:	444f      	add	r7, r9
 80017a8:	46ba      	mov	sl, r7
 80017aa:	4240      	negs	r0, r0
 80017ac:	4482      	add	sl, r0
 80017ae:	e6d9      	b.n	8001564 <__aeabi_dsub+0x494>
 80017b0:	4653      	mov	r3, sl
 80017b2:	4323      	orrs	r3, r4
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dsub+0x6e8>
 80017b6:	e6cb      	b.n	8001550 <__aeabi_dsub+0x480>
 80017b8:	e614      	b.n	80013e4 <__aeabi_dsub+0x314>
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	000007ff 	.word	0x000007ff
 80017c0:	ff7fffff 	.word	0xff7fffff
 80017c4:	000007fe 	.word	0x000007fe
 80017c8:	2300      	movs	r3, #0
 80017ca:	4a01      	ldr	r2, [pc, #4]	; (80017d0 <__aeabi_dsub+0x700>)
 80017cc:	001c      	movs	r4, r3
 80017ce:	e529      	b.n	8001224 <__aeabi_dsub+0x154>
 80017d0:	000007ff 	.word	0x000007ff

080017d4 <__aeabi_d2iz>:
 80017d4:	000a      	movs	r2, r1
 80017d6:	b530      	push	{r4, r5, lr}
 80017d8:	4c13      	ldr	r4, [pc, #76]	; (8001828 <__aeabi_d2iz+0x54>)
 80017da:	0053      	lsls	r3, r2, #1
 80017dc:	0309      	lsls	r1, r1, #12
 80017de:	0005      	movs	r5, r0
 80017e0:	0b09      	lsrs	r1, r1, #12
 80017e2:	2000      	movs	r0, #0
 80017e4:	0d5b      	lsrs	r3, r3, #21
 80017e6:	0fd2      	lsrs	r2, r2, #31
 80017e8:	42a3      	cmp	r3, r4
 80017ea:	dd04      	ble.n	80017f6 <__aeabi_d2iz+0x22>
 80017ec:	480f      	ldr	r0, [pc, #60]	; (800182c <__aeabi_d2iz+0x58>)
 80017ee:	4283      	cmp	r3, r0
 80017f0:	dd02      	ble.n	80017f8 <__aeabi_d2iz+0x24>
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <__aeabi_d2iz+0x5c>)
 80017f4:	18d0      	adds	r0, r2, r3
 80017f6:	bd30      	pop	{r4, r5, pc}
 80017f8:	2080      	movs	r0, #128	; 0x80
 80017fa:	0340      	lsls	r0, r0, #13
 80017fc:	4301      	orrs	r1, r0
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <__aeabi_d2iz+0x60>)
 8001800:	1ac0      	subs	r0, r0, r3
 8001802:	281f      	cmp	r0, #31
 8001804:	dd08      	ble.n	8001818 <__aeabi_d2iz+0x44>
 8001806:	480c      	ldr	r0, [pc, #48]	; (8001838 <__aeabi_d2iz+0x64>)
 8001808:	1ac3      	subs	r3, r0, r3
 800180a:	40d9      	lsrs	r1, r3
 800180c:	000b      	movs	r3, r1
 800180e:	4258      	negs	r0, r3
 8001810:	2a00      	cmp	r2, #0
 8001812:	d1f0      	bne.n	80017f6 <__aeabi_d2iz+0x22>
 8001814:	0018      	movs	r0, r3
 8001816:	e7ee      	b.n	80017f6 <__aeabi_d2iz+0x22>
 8001818:	4c08      	ldr	r4, [pc, #32]	; (800183c <__aeabi_d2iz+0x68>)
 800181a:	40c5      	lsrs	r5, r0
 800181c:	46a4      	mov	ip, r4
 800181e:	4463      	add	r3, ip
 8001820:	4099      	lsls	r1, r3
 8001822:	000b      	movs	r3, r1
 8001824:	432b      	orrs	r3, r5
 8001826:	e7f2      	b.n	800180e <__aeabi_d2iz+0x3a>
 8001828:	000003fe 	.word	0x000003fe
 800182c:	0000041d 	.word	0x0000041d
 8001830:	7fffffff 	.word	0x7fffffff
 8001834:	00000433 	.word	0x00000433
 8001838:	00000413 	.word	0x00000413
 800183c:	fffffbed 	.word	0xfffffbed

08001840 <__aeabi_i2d>:
 8001840:	b570      	push	{r4, r5, r6, lr}
 8001842:	2800      	cmp	r0, #0
 8001844:	d016      	beq.n	8001874 <__aeabi_i2d+0x34>
 8001846:	17c3      	asrs	r3, r0, #31
 8001848:	18c5      	adds	r5, r0, r3
 800184a:	405d      	eors	r5, r3
 800184c:	0fc4      	lsrs	r4, r0, #31
 800184e:	0028      	movs	r0, r5
 8001850:	f000 f864 	bl	800191c <__clzsi2>
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <__aeabi_i2d+0x5c>)
 8001856:	1a1b      	subs	r3, r3, r0
 8001858:	280a      	cmp	r0, #10
 800185a:	dc16      	bgt.n	800188a <__aeabi_i2d+0x4a>
 800185c:	0002      	movs	r2, r0
 800185e:	002e      	movs	r6, r5
 8001860:	3215      	adds	r2, #21
 8001862:	4096      	lsls	r6, r2
 8001864:	220b      	movs	r2, #11
 8001866:	1a12      	subs	r2, r2, r0
 8001868:	40d5      	lsrs	r5, r2
 800186a:	055b      	lsls	r3, r3, #21
 800186c:	032d      	lsls	r5, r5, #12
 800186e:	0b2d      	lsrs	r5, r5, #12
 8001870:	0d5b      	lsrs	r3, r3, #21
 8001872:	e003      	b.n	800187c <__aeabi_i2d+0x3c>
 8001874:	2400      	movs	r4, #0
 8001876:	2300      	movs	r3, #0
 8001878:	2500      	movs	r5, #0
 800187a:	2600      	movs	r6, #0
 800187c:	051b      	lsls	r3, r3, #20
 800187e:	432b      	orrs	r3, r5
 8001880:	07e4      	lsls	r4, r4, #31
 8001882:	4323      	orrs	r3, r4
 8001884:	0030      	movs	r0, r6
 8001886:	0019      	movs	r1, r3
 8001888:	bd70      	pop	{r4, r5, r6, pc}
 800188a:	380b      	subs	r0, #11
 800188c:	4085      	lsls	r5, r0
 800188e:	055b      	lsls	r3, r3, #21
 8001890:	032d      	lsls	r5, r5, #12
 8001892:	2600      	movs	r6, #0
 8001894:	0b2d      	lsrs	r5, r5, #12
 8001896:	0d5b      	lsrs	r3, r3, #21
 8001898:	e7f0      	b.n	800187c <__aeabi_i2d+0x3c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	0000041e 	.word	0x0000041e

080018a0 <__aeabi_cdrcmple>:
 80018a0:	4684      	mov	ip, r0
 80018a2:	0010      	movs	r0, r2
 80018a4:	4662      	mov	r2, ip
 80018a6:	468c      	mov	ip, r1
 80018a8:	0019      	movs	r1, r3
 80018aa:	4663      	mov	r3, ip
 80018ac:	e000      	b.n	80018b0 <__aeabi_cdcmpeq>
 80018ae:	46c0      	nop			; (mov r8, r8)

080018b0 <__aeabi_cdcmpeq>:
 80018b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80018b2:	f000 f905 	bl	8001ac0 <__ledf2>
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d401      	bmi.n	80018be <__aeabi_cdcmpeq+0xe>
 80018ba:	2100      	movs	r1, #0
 80018bc:	42c8      	cmn	r0, r1
 80018be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080018c0 <__aeabi_dcmpeq>:
 80018c0:	b510      	push	{r4, lr}
 80018c2:	f000 f855 	bl	8001970 <__eqdf2>
 80018c6:	4240      	negs	r0, r0
 80018c8:	3001      	adds	r0, #1
 80018ca:	bd10      	pop	{r4, pc}

080018cc <__aeabi_dcmplt>:
 80018cc:	b510      	push	{r4, lr}
 80018ce:	f000 f8f7 	bl	8001ac0 <__ledf2>
 80018d2:	2800      	cmp	r0, #0
 80018d4:	db01      	blt.n	80018da <__aeabi_dcmplt+0xe>
 80018d6:	2000      	movs	r0, #0
 80018d8:	bd10      	pop	{r4, pc}
 80018da:	2001      	movs	r0, #1
 80018dc:	bd10      	pop	{r4, pc}
 80018de:	46c0      	nop			; (mov r8, r8)

080018e0 <__aeabi_dcmple>:
 80018e0:	b510      	push	{r4, lr}
 80018e2:	f000 f8ed 	bl	8001ac0 <__ledf2>
 80018e6:	2800      	cmp	r0, #0
 80018e8:	dd01      	ble.n	80018ee <__aeabi_dcmple+0xe>
 80018ea:	2000      	movs	r0, #0
 80018ec:	bd10      	pop	{r4, pc}
 80018ee:	2001      	movs	r0, #1
 80018f0:	bd10      	pop	{r4, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)

080018f4 <__aeabi_dcmpgt>:
 80018f4:	b510      	push	{r4, lr}
 80018f6:	f000 f87d 	bl	80019f4 <__gedf2>
 80018fa:	2800      	cmp	r0, #0
 80018fc:	dc01      	bgt.n	8001902 <__aeabi_dcmpgt+0xe>
 80018fe:	2000      	movs	r0, #0
 8001900:	bd10      	pop	{r4, pc}
 8001902:	2001      	movs	r0, #1
 8001904:	bd10      	pop	{r4, pc}
 8001906:	46c0      	nop			; (mov r8, r8)

08001908 <__aeabi_dcmpge>:
 8001908:	b510      	push	{r4, lr}
 800190a:	f000 f873 	bl	80019f4 <__gedf2>
 800190e:	2800      	cmp	r0, #0
 8001910:	da01      	bge.n	8001916 <__aeabi_dcmpge+0xe>
 8001912:	2000      	movs	r0, #0
 8001914:	bd10      	pop	{r4, pc}
 8001916:	2001      	movs	r0, #1
 8001918:	bd10      	pop	{r4, pc}
 800191a:	46c0      	nop			; (mov r8, r8)

0800191c <__clzsi2>:
 800191c:	211c      	movs	r1, #28
 800191e:	2301      	movs	r3, #1
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	4298      	cmp	r0, r3
 8001924:	d301      	bcc.n	800192a <__clzsi2+0xe>
 8001926:	0c00      	lsrs	r0, r0, #16
 8001928:	3910      	subs	r1, #16
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	4298      	cmp	r0, r3
 800192e:	d301      	bcc.n	8001934 <__clzsi2+0x18>
 8001930:	0a00      	lsrs	r0, r0, #8
 8001932:	3908      	subs	r1, #8
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	4298      	cmp	r0, r3
 8001938:	d301      	bcc.n	800193e <__clzsi2+0x22>
 800193a:	0900      	lsrs	r0, r0, #4
 800193c:	3904      	subs	r1, #4
 800193e:	a202      	add	r2, pc, #8	; (adr r2, 8001948 <__clzsi2+0x2c>)
 8001940:	5c10      	ldrb	r0, [r2, r0]
 8001942:	1840      	adds	r0, r0, r1
 8001944:	4770      	bx	lr
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	02020304 	.word	0x02020304
 800194c:	01010101 	.word	0x01010101
	...

08001958 <__clzdi2>:
 8001958:	b510      	push	{r4, lr}
 800195a:	2900      	cmp	r1, #0
 800195c:	d103      	bne.n	8001966 <__clzdi2+0xe>
 800195e:	f7ff ffdd 	bl	800191c <__clzsi2>
 8001962:	3020      	adds	r0, #32
 8001964:	e002      	b.n	800196c <__clzdi2+0x14>
 8001966:	0008      	movs	r0, r1
 8001968:	f7ff ffd8 	bl	800191c <__clzsi2>
 800196c:	bd10      	pop	{r4, pc}
 800196e:	46c0      	nop			; (mov r8, r8)

08001970 <__eqdf2>:
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	464e      	mov	r6, r9
 8001974:	4645      	mov	r5, r8
 8001976:	46de      	mov	lr, fp
 8001978:	4657      	mov	r7, sl
 800197a:	4690      	mov	r8, r2
 800197c:	b5e0      	push	{r5, r6, r7, lr}
 800197e:	0017      	movs	r7, r2
 8001980:	031a      	lsls	r2, r3, #12
 8001982:	0b12      	lsrs	r2, r2, #12
 8001984:	0005      	movs	r5, r0
 8001986:	4684      	mov	ip, r0
 8001988:	4819      	ldr	r0, [pc, #100]	; (80019f0 <__eqdf2+0x80>)
 800198a:	030e      	lsls	r6, r1, #12
 800198c:	004c      	lsls	r4, r1, #1
 800198e:	4691      	mov	r9, r2
 8001990:	005a      	lsls	r2, r3, #1
 8001992:	0fdb      	lsrs	r3, r3, #31
 8001994:	469b      	mov	fp, r3
 8001996:	0b36      	lsrs	r6, r6, #12
 8001998:	0d64      	lsrs	r4, r4, #21
 800199a:	0fc9      	lsrs	r1, r1, #31
 800199c:	0d52      	lsrs	r2, r2, #21
 800199e:	4284      	cmp	r4, r0
 80019a0:	d019      	beq.n	80019d6 <__eqdf2+0x66>
 80019a2:	4282      	cmp	r2, r0
 80019a4:	d010      	beq.n	80019c8 <__eqdf2+0x58>
 80019a6:	2001      	movs	r0, #1
 80019a8:	4294      	cmp	r4, r2
 80019aa:	d10e      	bne.n	80019ca <__eqdf2+0x5a>
 80019ac:	454e      	cmp	r6, r9
 80019ae:	d10c      	bne.n	80019ca <__eqdf2+0x5a>
 80019b0:	2001      	movs	r0, #1
 80019b2:	45c4      	cmp	ip, r8
 80019b4:	d109      	bne.n	80019ca <__eqdf2+0x5a>
 80019b6:	4559      	cmp	r1, fp
 80019b8:	d017      	beq.n	80019ea <__eqdf2+0x7a>
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d105      	bne.n	80019ca <__eqdf2+0x5a>
 80019be:	0030      	movs	r0, r6
 80019c0:	4328      	orrs	r0, r5
 80019c2:	1e43      	subs	r3, r0, #1
 80019c4:	4198      	sbcs	r0, r3
 80019c6:	e000      	b.n	80019ca <__eqdf2+0x5a>
 80019c8:	2001      	movs	r0, #1
 80019ca:	bcf0      	pop	{r4, r5, r6, r7}
 80019cc:	46bb      	mov	fp, r7
 80019ce:	46b2      	mov	sl, r6
 80019d0:	46a9      	mov	r9, r5
 80019d2:	46a0      	mov	r8, r4
 80019d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d6:	0033      	movs	r3, r6
 80019d8:	2001      	movs	r0, #1
 80019da:	432b      	orrs	r3, r5
 80019dc:	d1f5      	bne.n	80019ca <__eqdf2+0x5a>
 80019de:	42a2      	cmp	r2, r4
 80019e0:	d1f3      	bne.n	80019ca <__eqdf2+0x5a>
 80019e2:	464b      	mov	r3, r9
 80019e4:	433b      	orrs	r3, r7
 80019e6:	d1f0      	bne.n	80019ca <__eqdf2+0x5a>
 80019e8:	e7e2      	b.n	80019b0 <__eqdf2+0x40>
 80019ea:	2000      	movs	r0, #0
 80019ec:	e7ed      	b.n	80019ca <__eqdf2+0x5a>
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	000007ff 	.word	0x000007ff

080019f4 <__gedf2>:
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	4647      	mov	r7, r8
 80019f8:	46ce      	mov	lr, r9
 80019fa:	0004      	movs	r4, r0
 80019fc:	0018      	movs	r0, r3
 80019fe:	0016      	movs	r6, r2
 8001a00:	031b      	lsls	r3, r3, #12
 8001a02:	0b1b      	lsrs	r3, r3, #12
 8001a04:	4d2d      	ldr	r5, [pc, #180]	; (8001abc <__gedf2+0xc8>)
 8001a06:	004a      	lsls	r2, r1, #1
 8001a08:	4699      	mov	r9, r3
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	0043      	lsls	r3, r0, #1
 8001a0e:	030f      	lsls	r7, r1, #12
 8001a10:	46a4      	mov	ip, r4
 8001a12:	46b0      	mov	r8, r6
 8001a14:	0b3f      	lsrs	r7, r7, #12
 8001a16:	0d52      	lsrs	r2, r2, #21
 8001a18:	0fc9      	lsrs	r1, r1, #31
 8001a1a:	0d5b      	lsrs	r3, r3, #21
 8001a1c:	0fc0      	lsrs	r0, r0, #31
 8001a1e:	42aa      	cmp	r2, r5
 8001a20:	d021      	beq.n	8001a66 <__gedf2+0x72>
 8001a22:	42ab      	cmp	r3, r5
 8001a24:	d013      	beq.n	8001a4e <__gedf2+0x5a>
 8001a26:	2a00      	cmp	r2, #0
 8001a28:	d122      	bne.n	8001a70 <__gedf2+0x7c>
 8001a2a:	433c      	orrs	r4, r7
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <__gedf2+0x42>
 8001a30:	464d      	mov	r5, r9
 8001a32:	432e      	orrs	r6, r5
 8001a34:	d022      	beq.n	8001a7c <__gedf2+0x88>
 8001a36:	2c00      	cmp	r4, #0
 8001a38:	d010      	beq.n	8001a5c <__gedf2+0x68>
 8001a3a:	4281      	cmp	r1, r0
 8001a3c:	d022      	beq.n	8001a84 <__gedf2+0x90>
 8001a3e:	2002      	movs	r0, #2
 8001a40:	3901      	subs	r1, #1
 8001a42:	4008      	ands	r0, r1
 8001a44:	3801      	subs	r0, #1
 8001a46:	bcc0      	pop	{r6, r7}
 8001a48:	46b9      	mov	r9, r7
 8001a4a:	46b0      	mov	r8, r6
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	464d      	mov	r5, r9
 8001a50:	432e      	orrs	r6, r5
 8001a52:	d129      	bne.n	8001aa8 <__gedf2+0xb4>
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d1f0      	bne.n	8001a3a <__gedf2+0x46>
 8001a58:	433c      	orrs	r4, r7
 8001a5a:	d1ee      	bne.n	8001a3a <__gedf2+0x46>
 8001a5c:	2800      	cmp	r0, #0
 8001a5e:	d1f2      	bne.n	8001a46 <__gedf2+0x52>
 8001a60:	2001      	movs	r0, #1
 8001a62:	4240      	negs	r0, r0
 8001a64:	e7ef      	b.n	8001a46 <__gedf2+0x52>
 8001a66:	003d      	movs	r5, r7
 8001a68:	4325      	orrs	r5, r4
 8001a6a:	d11d      	bne.n	8001aa8 <__gedf2+0xb4>
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d0ee      	beq.n	8001a4e <__gedf2+0x5a>
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e2      	bne.n	8001a3a <__gedf2+0x46>
 8001a74:	464c      	mov	r4, r9
 8001a76:	4326      	orrs	r6, r4
 8001a78:	d1df      	bne.n	8001a3a <__gedf2+0x46>
 8001a7a:	e7e0      	b.n	8001a3e <__gedf2+0x4a>
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	2c00      	cmp	r4, #0
 8001a80:	d0e1      	beq.n	8001a46 <__gedf2+0x52>
 8001a82:	e7dc      	b.n	8001a3e <__gedf2+0x4a>
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dc0a      	bgt.n	8001a9e <__gedf2+0xaa>
 8001a88:	dbe8      	blt.n	8001a5c <__gedf2+0x68>
 8001a8a:	454f      	cmp	r7, r9
 8001a8c:	d8d7      	bhi.n	8001a3e <__gedf2+0x4a>
 8001a8e:	d00e      	beq.n	8001aae <__gedf2+0xba>
 8001a90:	2000      	movs	r0, #0
 8001a92:	454f      	cmp	r7, r9
 8001a94:	d2d7      	bcs.n	8001a46 <__gedf2+0x52>
 8001a96:	2900      	cmp	r1, #0
 8001a98:	d0e2      	beq.n	8001a60 <__gedf2+0x6c>
 8001a9a:	0008      	movs	r0, r1
 8001a9c:	e7d3      	b.n	8001a46 <__gedf2+0x52>
 8001a9e:	4243      	negs	r3, r0
 8001aa0:	4158      	adcs	r0, r3
 8001aa2:	0040      	lsls	r0, r0, #1
 8001aa4:	3801      	subs	r0, #1
 8001aa6:	e7ce      	b.n	8001a46 <__gedf2+0x52>
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	4240      	negs	r0, r0
 8001aac:	e7cb      	b.n	8001a46 <__gedf2+0x52>
 8001aae:	45c4      	cmp	ip, r8
 8001ab0:	d8c5      	bhi.n	8001a3e <__gedf2+0x4a>
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	45c4      	cmp	ip, r8
 8001ab6:	d2c6      	bcs.n	8001a46 <__gedf2+0x52>
 8001ab8:	e7ed      	b.n	8001a96 <__gedf2+0xa2>
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	000007ff 	.word	0x000007ff

08001ac0 <__ledf2>:
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	4647      	mov	r7, r8
 8001ac4:	46ce      	mov	lr, r9
 8001ac6:	0004      	movs	r4, r0
 8001ac8:	0018      	movs	r0, r3
 8001aca:	0016      	movs	r6, r2
 8001acc:	031b      	lsls	r3, r3, #12
 8001ace:	0b1b      	lsrs	r3, r3, #12
 8001ad0:	4d2c      	ldr	r5, [pc, #176]	; (8001b84 <__ledf2+0xc4>)
 8001ad2:	004a      	lsls	r2, r1, #1
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	0043      	lsls	r3, r0, #1
 8001ada:	030f      	lsls	r7, r1, #12
 8001adc:	46a4      	mov	ip, r4
 8001ade:	46b0      	mov	r8, r6
 8001ae0:	0b3f      	lsrs	r7, r7, #12
 8001ae2:	0d52      	lsrs	r2, r2, #21
 8001ae4:	0fc9      	lsrs	r1, r1, #31
 8001ae6:	0d5b      	lsrs	r3, r3, #21
 8001ae8:	0fc0      	lsrs	r0, r0, #31
 8001aea:	42aa      	cmp	r2, r5
 8001aec:	d00d      	beq.n	8001b0a <__ledf2+0x4a>
 8001aee:	42ab      	cmp	r3, r5
 8001af0:	d010      	beq.n	8001b14 <__ledf2+0x54>
 8001af2:	2a00      	cmp	r2, #0
 8001af4:	d127      	bne.n	8001b46 <__ledf2+0x86>
 8001af6:	433c      	orrs	r4, r7
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <__ledf2+0x60>
 8001afc:	464d      	mov	r5, r9
 8001afe:	432e      	orrs	r6, r5
 8001b00:	d10e      	bne.n	8001b20 <__ledf2+0x60>
 8001b02:	2000      	movs	r0, #0
 8001b04:	2c00      	cmp	r4, #0
 8001b06:	d015      	beq.n	8001b34 <__ledf2+0x74>
 8001b08:	e00e      	b.n	8001b28 <__ledf2+0x68>
 8001b0a:	003d      	movs	r5, r7
 8001b0c:	4325      	orrs	r5, r4
 8001b0e:	d110      	bne.n	8001b32 <__ledf2+0x72>
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d118      	bne.n	8001b46 <__ledf2+0x86>
 8001b14:	464d      	mov	r5, r9
 8001b16:	432e      	orrs	r6, r5
 8001b18:	d10b      	bne.n	8001b32 <__ledf2+0x72>
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d102      	bne.n	8001b24 <__ledf2+0x64>
 8001b1e:	433c      	orrs	r4, r7
 8001b20:	2c00      	cmp	r4, #0
 8001b22:	d00b      	beq.n	8001b3c <__ledf2+0x7c>
 8001b24:	4281      	cmp	r1, r0
 8001b26:	d014      	beq.n	8001b52 <__ledf2+0x92>
 8001b28:	2002      	movs	r0, #2
 8001b2a:	3901      	subs	r1, #1
 8001b2c:	4008      	ands	r0, r1
 8001b2e:	3801      	subs	r0, #1
 8001b30:	e000      	b.n	8001b34 <__ledf2+0x74>
 8001b32:	2002      	movs	r0, #2
 8001b34:	bcc0      	pop	{r6, r7}
 8001b36:	46b9      	mov	r9, r7
 8001b38:	46b0      	mov	r8, r6
 8001b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	d1f9      	bne.n	8001b34 <__ledf2+0x74>
 8001b40:	2001      	movs	r0, #1
 8001b42:	4240      	negs	r0, r0
 8001b44:	e7f6      	b.n	8001b34 <__ledf2+0x74>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ec      	bne.n	8001b24 <__ledf2+0x64>
 8001b4a:	464c      	mov	r4, r9
 8001b4c:	4326      	orrs	r6, r4
 8001b4e:	d1e9      	bne.n	8001b24 <__ledf2+0x64>
 8001b50:	e7ea      	b.n	8001b28 <__ledf2+0x68>
 8001b52:	429a      	cmp	r2, r3
 8001b54:	dd04      	ble.n	8001b60 <__ledf2+0xa0>
 8001b56:	4243      	negs	r3, r0
 8001b58:	4158      	adcs	r0, r3
 8001b5a:	0040      	lsls	r0, r0, #1
 8001b5c:	3801      	subs	r0, #1
 8001b5e:	e7e9      	b.n	8001b34 <__ledf2+0x74>
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dbeb      	blt.n	8001b3c <__ledf2+0x7c>
 8001b64:	454f      	cmp	r7, r9
 8001b66:	d8df      	bhi.n	8001b28 <__ledf2+0x68>
 8001b68:	d006      	beq.n	8001b78 <__ledf2+0xb8>
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	454f      	cmp	r7, r9
 8001b6e:	d2e1      	bcs.n	8001b34 <__ledf2+0x74>
 8001b70:	2900      	cmp	r1, #0
 8001b72:	d0e5      	beq.n	8001b40 <__ledf2+0x80>
 8001b74:	0008      	movs	r0, r1
 8001b76:	e7dd      	b.n	8001b34 <__ledf2+0x74>
 8001b78:	45c4      	cmp	ip, r8
 8001b7a:	d8d5      	bhi.n	8001b28 <__ledf2+0x68>
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	45c4      	cmp	ip, r8
 8001b80:	d2d8      	bcs.n	8001b34 <__ledf2+0x74>
 8001b82:	e7f5      	b.n	8001b70 <__ledf2+0xb0>
 8001b84:	000007ff 	.word	0x000007ff

08001b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b8e:	f000 fb6f 	bl	8002270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b92:	f000 f84b 	bl	8001c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b96:	f000 f9c7 	bl	8001f28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b9a:	f000 f995 	bl	8001ec8 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001b9e:	f000 f8ad 	bl	8001cfc <MX_ADC_Init>
  MX_TIM2_Init();
 8001ba2:	f000 f911 	bl	8001dc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


	HAL_ADC_Start(&hadc);
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <main+0x90>)
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 fd69 	bl	8002680 <HAL_ADC_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <main+0x94>)
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f002 f9d6 	bl	8003f64 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_ADC_PollForConversion(&hadc, 10);
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <main+0x90>)
 8001bba:	210a      	movs	r1, #10
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f000 fdb3 	bl	8002728 <HAL_ADC_PollForConversion>
	readValue = HAL_ADC_GetValue(&hadc);
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <main+0x90>)
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 fe4b 	bl	8002860 <HAL_ADC_GetValue>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	1dbb      	adds	r3, r7, #6
 8001bce:	801a      	strh	r2, [r3, #0]

	PWM = 250 + readValue/4.1;
 8001bd0:	1dbb      	adds	r3, r7, #6
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff fe33 	bl	8001840 <__aeabi_i2d>
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <main+0x98>)
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <main+0x9c>)
 8001bde:	f7fe ff89 	bl	8000af4 <__aeabi_ddiv>
 8001be2:	0002      	movs	r2, r0
 8001be4:	000b      	movs	r3, r1
 8001be6:	0010      	movs	r0, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	2200      	movs	r2, #0
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <main+0xa0>)
 8001bee:	f7fe fc21 	bl	8000434 <__aeabi_dadd>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	000b      	movs	r3, r1
 8001bf6:	1d3c      	adds	r4, r7, #4
 8001bf8:	0010      	movs	r0, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	f7fe fb30 	bl	8000260 <__aeabi_d2uiz>
 8001c00:	0003      	movs	r3, r0
 8001c02:	8023      	strh	r3, [r4, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWM);
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <main+0x94>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	1d3a      	adds	r2, r7, #4
 8001c0a:	8812      	ldrh	r2, [r2, #0]
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(50);
 8001c0e:	2032      	movs	r0, #50	; 0x32
 8001c10:	f000 fb9e 	bl	8002350 <HAL_Delay>
	HAL_ADC_PollForConversion(&hadc, 10);
 8001c14:	e7d0      	b.n	8001bb8 <main+0x30>
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	20000028 	.word	0x20000028
 8001c1c:	20000084 	.word	0x20000084
 8001c20:	66666666 	.word	0x66666666
 8001c24:	40106666 	.word	0x40106666
 8001c28:	406f4000 	.word	0x406f4000

08001c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b09f      	sub	sp, #124	; 0x7c
 8001c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c32:	2440      	movs	r4, #64	; 0x40
 8001c34:	193b      	adds	r3, r7, r4
 8001c36:	0018      	movs	r0, r3
 8001c38:	2338      	movs	r3, #56	; 0x38
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f003 fb63 	bl	8005308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c42:	232c      	movs	r3, #44	; 0x2c
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	0018      	movs	r0, r3
 8001c48:	2314      	movs	r3, #20
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f003 fb5b 	bl	8005308 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	0018      	movs	r0, r3
 8001c56:	2328      	movs	r3, #40	; 0x28
 8001c58:	001a      	movs	r2, r3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f003 fb54 	bl	8005308 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <SystemClock_Config+0xc8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a24      	ldr	r2, [pc, #144]	; (8001cf8 <SystemClock_Config+0xcc>)
 8001c66:	401a      	ands	r2, r3
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <SystemClock_Config+0xc8>)
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0109      	lsls	r1, r1, #4
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c72:	0021      	movs	r1, r4
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2202      	movs	r2, #2
 8001c78:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2210      	movs	r2, #16
 8001c84:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2200      	movs	r2, #0
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f001 f96a 	bl	8002f68 <HAL_RCC_OscConfig>
 8001c94:	1e03      	subs	r3, r0, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001c98:	f000 f9b6 	bl	8002008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9c:	212c      	movs	r1, #44	; 0x2c
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f001 fd25 	bl	8003710 <HAL_RCC_ClockConfig>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d001      	beq.n	8001cce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001cca:	f000 f99d 	bl	8002008 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f001 ff1b 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 8001ce2:	1e03      	subs	r3, r0, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001ce6:	f000 f98f 	bl	8002008 <Error_Handler>
  }
}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b01f      	add	sp, #124	; 0x7c
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	ffffe7ff 	.word	0xffffe7ff

08001cfc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d02:	003b      	movs	r3, r7
 8001d04:	0018      	movs	r0, r3
 8001d06:	2308      	movs	r3, #8
 8001d08:	001a      	movs	r2, r3
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	f003 fafc 	bl	8005308 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d12:	4a2b      	ldr	r2, [pc, #172]	; (8001dc0 <MX_ADC_Init+0xc4>)
 8001d14:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	05d2      	lsls	r2, r2, #23
 8001d22:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001d30:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d3e:	2220      	movs	r2, #32
 8001d40:	2101      	movs	r1, #1
 8001d42:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001d44:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d46:	2221      	movs	r2, #33	; 0x21
 8001d48:	2100      	movs	r1, #0
 8001d4a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d54:	22c2      	movs	r2, #194	; 0xc2
 8001d56:	32ff      	adds	r2, #255	; 0xff
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d5c:	222c      	movs	r2, #44	; 0x2c
 8001d5e:	2100      	movs	r1, #0
 8001d60:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d64:	2204      	movs	r2, #4
 8001d66:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001d82:	0018      	movs	r0, r3
 8001d84:	f000 fb08 	bl	8002398 <HAL_ADC_Init>
 8001d88:	1e03      	subs	r3, r0, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001d8c:	f000 f93c 	bl	8002008 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001d90:	003b      	movs	r3, r7
 8001d92:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <MX_ADC_Init+0xc8>)
 8001d94:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001d96:	003b      	movs	r3, r7
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	0152      	lsls	r2, r2, #5
 8001d9c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d9e:	003a      	movs	r2, r7
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <MX_ADC_Init+0xc0>)
 8001da2:	0011      	movs	r1, r2
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 fd67 	bl	8002878 <HAL_ADC_ConfigChannel>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d001      	beq.n	8001db2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001dae:	f000 f92b 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b002      	add	sp, #8
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	20000028 	.word	0x20000028
 8001dc0:	40012400 	.word	0x40012400
 8001dc4:	24000200 	.word	0x24000200

08001dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dce:	2318      	movs	r3, #24
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	2310      	movs	r3, #16
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	2100      	movs	r1, #0
 8001dda:	f003 fa95 	bl	8005308 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dde:	2310      	movs	r3, #16
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	0018      	movs	r0, r3
 8001de4:	2308      	movs	r3, #8
 8001de6:	001a      	movs	r2, r3
 8001de8:	2100      	movs	r1, #0
 8001dea:	f003 fa8d 	bl	8005308 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dee:	003b      	movs	r3, r7
 8001df0:	0018      	movs	r0, r3
 8001df2:	2310      	movs	r3, #16
 8001df4:	001a      	movs	r2, r3
 8001df6:	2100      	movs	r1, #0
 8001df8:	f003 fa86 	bl	8005308 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dfc:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	05d2      	lsls	r2, r2, #23
 8001e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001e04:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001e06:	220f      	movs	r2, #15
 8001e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001e12:	4a2c      	ldr	r2, [pc, #176]	; (8001ec4 <MX_TIM2_Init+0xfc>)
 8001e14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e22:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001e24:	0018      	movs	r0, r3
 8001e26:	f002 f815 	bl	8003e54 <HAL_TIM_Base_Init>
 8001e2a:	1e03      	subs	r3, r0, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e2e:	f000 f8eb 	bl	8002008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e32:	2118      	movs	r1, #24
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	0152      	lsls	r2, r2, #5
 8001e3a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e3c:	187a      	adds	r2, r7, r1
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001e40:	0011      	movs	r1, r2
 8001e42:	0018      	movs	r0, r3
 8001e44:	f002 f9e6 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8001e48:	1e03      	subs	r3, r0, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001e4c:	f000 f8dc 	bl	8002008 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001e52:	0018      	movs	r0, r3
 8001e54:	f002 f83e 	bl	8003ed4 <HAL_TIM_PWM_Init>
 8001e58:	1e03      	subs	r3, r0, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001e5c:	f000 f8d4 	bl	8002008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e60:	2110      	movs	r1, #16
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e6e:	187a      	adds	r2, r7, r1
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001e72:	0011      	movs	r1, r2
 8001e74:	0018      	movs	r0, r3
 8001e76:	f002 fcc7 	bl	8004808 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	1e03      	subs	r3, r0, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001e7e:	f000 f8c3 	bl	8002008 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e82:	003b      	movs	r3, r7
 8001e84:	2260      	movs	r2, #96	; 0x60
 8001e86:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001e88:	003b      	movs	r3, r7
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8e:	003b      	movs	r3, r7
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e94:	003b      	movs	r3, r7
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e9a:	0039      	movs	r1, r7
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f002 f8f1 	bl	8004088 <HAL_TIM_PWM_ConfigChannel>
 8001ea6:	1e03      	subs	r3, r0, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001eaa:	f000 f8ad 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <MX_TIM2_Init+0xf8>)
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f000 f917 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b00a      	add	sp, #40	; 0x28
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	20000084 	.word	0x20000084
 8001ec4:	0000270f 	.word	0x0000270f

08001ec8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <MX_USART2_UART_Init+0x5c>)
 8001ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001ed4:	22e1      	movs	r2, #225	; 0xe1
 8001ed6:	0252      	lsls	r2, r2, #9
 8001ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <MX_USART2_UART_Init+0x58>)
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f002 fcd9 	bl	80048c4 <HAL_UART_Init>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f16:	f000 f877 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200000c4 	.word	0x200000c4
 8001f24:	40004400 	.word	0x40004400

08001f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b08b      	sub	sp, #44	; 0x2c
 8001f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2e:	2414      	movs	r4, #20
 8001f30:	193b      	adds	r3, r7, r4
 8001f32:	0018      	movs	r0, r3
 8001f34:	2314      	movs	r3, #20
 8001f36:	001a      	movs	r2, r3
 8001f38:	2100      	movs	r1, #0
 8001f3a:	f003 f9e5 	bl	8005308 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f44:	2104      	movs	r1, #4
 8001f46:	430a      	orrs	r2, r1
 8001f48:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f4a:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	2204      	movs	r2, #4
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f56:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f74:	2101      	movs	r1, #1
 8001f76:	430a      	orrs	r2, r1
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <MX_GPIO_Init+0xd8>)
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	2202      	movs	r2, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f9e:	23a0      	movs	r3, #160	; 0xa0
 8001fa0:	05db      	lsls	r3, r3, #23
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2120      	movs	r1, #32
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 ffc0 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fac:	193b      	adds	r3, r7, r4
 8001fae:	2280      	movs	r2, #128	; 0x80
 8001fb0:	0192      	lsls	r2, r2, #6
 8001fb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fb4:	193b      	adds	r3, r7, r4
 8001fb6:	2284      	movs	r2, #132	; 0x84
 8001fb8:	0392      	lsls	r2, r2, #14
 8001fba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	193b      	adds	r3, r7, r4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fc2:	193b      	adds	r3, r7, r4
 8001fc4:	4a0f      	ldr	r2, [pc, #60]	; (8002004 <MX_GPIO_Init+0xdc>)
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	0010      	movs	r0, r2
 8001fca:	f000 fe31 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001fce:	0021      	movs	r1, r4
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	2201      	movs	r2, #1
 8001fda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	187a      	adds	r2, r7, r1
 8001fea:	23a0      	movs	r3, #160	; 0xa0
 8001fec:	05db      	lsls	r3, r3, #23
 8001fee:	0011      	movs	r1, r2
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f000 fe1d 	bl	8002c30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b00b      	add	sp, #44	; 0x2c
 8001ffc:	bd90      	pop	{r4, r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	40021000 	.word	0x40021000
 8002004:	50000800 	.word	0x50000800

08002008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002010:	e7fe      	b.n	8002010 <Error_Handler+0x8>
	...

08002014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_MspInit+0x24>)
 800201a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_MspInit+0x24>)
 800201e:	2101      	movs	r1, #1
 8002020:	430a      	orrs	r2, r1
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <HAL_MspInit+0x24>)
 8002026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_MspInit+0x24>)
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	0549      	lsls	r1, r1, #21
 800202e:	430a      	orrs	r2, r1
 8002030:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000

0800203c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	240c      	movs	r4, #12
 8002046:	193b      	adds	r3, r7, r4
 8002048:	0018      	movs	r0, r3
 800204a:	2314      	movs	r3, #20
 800204c:	001a      	movs	r2, r3
 800204e:	2100      	movs	r1, #0
 8002050:	f003 f95a 	bl	8005308 <memset>
  if(hadc->Instance==ADC1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_ADC_MspInit+0x70>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d121      	bne.n	80020a2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <HAL_ADC_MspInit+0x74>)
 8002060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_ADC_MspInit+0x74>)
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	0089      	lsls	r1, r1, #2
 8002068:	430a      	orrs	r2, r1
 800206a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_ADC_MspInit+0x74>)
 800206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_ADC_MspInit+0x74>)
 8002072:	2102      	movs	r1, #2
 8002074:	430a      	orrs	r2, r1
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_ADC_MspInit+0x74>)
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	2202      	movs	r2, #2
 800207e:	4013      	ands	r3, r2
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002084:	193b      	adds	r3, r7, r4
 8002086:	2202      	movs	r2, #2
 8002088:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208a:	193b      	adds	r3, r7, r4
 800208c:	2203      	movs	r2, #3
 800208e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	193b      	adds	r3, r7, r4
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	193b      	adds	r3, r7, r4
 8002098:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <HAL_ADC_MspInit+0x78>)
 800209a:	0019      	movs	r1, r3
 800209c:	0010      	movs	r0, r2
 800209e:	f000 fdc7 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b009      	add	sp, #36	; 0x24
 80020a8:	bd90      	pop	{r4, r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	40012400 	.word	0x40012400
 80020b0:	40021000 	.word	0x40021000
 80020b4:	50000400 	.word	0x50000400

080020b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	05db      	lsls	r3, r3, #23
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d105      	bne.n	80020d8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <HAL_TIM_Base_MspInit+0x28>)
 80020ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_TIM_Base_MspInit+0x28>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	430a      	orrs	r2, r1
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	240c      	movs	r4, #12
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	0018      	movs	r0, r3
 80020f2:	2314      	movs	r3, #20
 80020f4:	001a      	movs	r2, r3
 80020f6:	2100      	movs	r1, #0
 80020f8:	f003 f906 	bl	8005308 <memset>
  if(htim->Instance==TIM2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	05db      	lsls	r3, r3, #23
 8002104:	429a      	cmp	r2, r3
 8002106:	d122      	bne.n	800214e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_TIM_MspPostInit+0x74>)
 800210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_TIM_MspPostInit+0x74>)
 800210e:	2101      	movs	r1, #1
 8002110:	430a      	orrs	r2, r1
 8002112:	62da      	str	r2, [r3, #44]	; 0x2c
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_TIM_MspPostInit+0x74>)
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2201      	movs	r2, #1
 800211a:	4013      	ands	r3, r2
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002120:	0021      	movs	r1, r4
 8002122:	187b      	adds	r3, r7, r1
 8002124:	2202      	movs	r2, #2
 8002126:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	187b      	adds	r3, r7, r1
 800212a:	2202      	movs	r2, #2
 800212c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	187b      	adds	r3, r7, r1
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	187b      	adds	r3, r7, r1
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800213a:	187b      	adds	r3, r7, r1
 800213c:	2202      	movs	r2, #2
 800213e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	187a      	adds	r2, r7, r1
 8002142:	23a0      	movs	r3, #160	; 0xa0
 8002144:	05db      	lsls	r3, r3, #23
 8002146:	0011      	movs	r1, r2
 8002148:	0018      	movs	r0, r3
 800214a:	f000 fd71 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	b009      	add	sp, #36	; 0x24
 8002154:	bd90      	pop	{r4, r7, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	40021000 	.word	0x40021000

0800215c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	240c      	movs	r4, #12
 8002166:	193b      	adds	r3, r7, r4
 8002168:	0018      	movs	r0, r3
 800216a:	2314      	movs	r3, #20
 800216c:	001a      	movs	r2, r3
 800216e:	2100      	movs	r1, #0
 8002170:	f003 f8ca 	bl	8005308 <memset>
  if(huart->Instance==USART2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a18      	ldr	r2, [pc, #96]	; (80021dc <HAL_UART_MspInit+0x80>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d129      	bne.n	80021d2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_UART_MspInit+0x84>)
 8002180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_UART_MspInit+0x84>)
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	0289      	lsls	r1, r1, #10
 8002188:	430a      	orrs	r2, r1
 800218a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <HAL_UART_MspInit+0x84>)
 800218e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_UART_MspInit+0x84>)
 8002192:	2101      	movs	r1, #1
 8002194:	430a      	orrs	r2, r1
 8002196:	62da      	str	r2, [r3, #44]	; 0x2c
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_UART_MspInit+0x84>)
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	2201      	movs	r2, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021a4:	0021      	movs	r1, r4
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	220c      	movs	r2, #12
 80021aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	2202      	movs	r2, #2
 80021b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	187b      	adds	r3, r7, r1
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	2203      	movs	r2, #3
 80021bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2204      	movs	r2, #4
 80021c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	187a      	adds	r2, r7, r1
 80021c6:	23a0      	movs	r3, #160	; 0xa0
 80021c8:	05db      	lsls	r3, r3, #23
 80021ca:	0011      	movs	r1, r2
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 fd2f 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b009      	add	sp, #36	; 0x24
 80021d8:	bd90      	pop	{r4, r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	40004400 	.word	0x40004400
 80021e0:	40021000 	.word	0x40021000

080021e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021e8:	e7fe      	b.n	80021e8 <NMI_Handler+0x4>

080021ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <HardFault_Handler+0x4>

080021f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002208:	f000 f886 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800221e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002220:	f7ff fff7 	bl	8002212 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <LoopForever+0x6>)
  ldr r1, =_edata
 8002226:	490d      	ldr	r1, [pc, #52]	; (800225c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <LoopForever+0xe>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800223c:	4c0a      	ldr	r4, [pc, #40]	; (8002268 <LoopForever+0x16>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800224a:	f003 f865 	bl	8005318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224e:	f7ff fc9b 	bl	8001b88 <main>

08002252 <LoopForever>:

LoopForever:
    b LoopForever
 8002252:	e7fe      	b.n	8002252 <LoopForever>
   ldr   r0, =_estack
 8002254:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800225c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002260:	08005434 	.word	0x08005434
  ldr r2, =_sbss
 8002264:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002268:	20000150 	.word	0x20000150

0800226c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC1_COMP_IRQHandler>
	...

08002270 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_Init+0x3c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_Init+0x3c>)
 8002282:	2140      	movs	r1, #64	; 0x40
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002288:	2000      	movs	r0, #0
 800228a:	f000 f811 	bl	80022b0 <HAL_InitTick>
 800228e:	1e03      	subs	r3, r0, #0
 8002290:	d003      	beq.n	800229a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e001      	b.n	800229e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800229a:	f7ff febb 	bl	8002014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	781b      	ldrb	r3, [r3, #0]
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b002      	add	sp, #8
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	40022000 	.word	0x40022000

080022b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_InitTick+0x5c>)
 80022ba:	681c      	ldr	r4, [r3, #0]
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_InitTick+0x60>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	0019      	movs	r1, r3
 80022c2:	23fa      	movs	r3, #250	; 0xfa
 80022c4:	0098      	lsls	r0, r3, #2
 80022c6:	f7fd ff1f 	bl	8000108 <__udivsi3>
 80022ca:	0003      	movs	r3, r0
 80022cc:	0019      	movs	r1, r3
 80022ce:	0020      	movs	r0, r4
 80022d0:	f7fd ff1a 	bl	8000108 <__udivsi3>
 80022d4:	0003      	movs	r3, r0
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 fc9d 	bl	8002c16 <HAL_SYSTICK_Config>
 80022dc:	1e03      	subs	r3, r0, #0
 80022de:	d001      	beq.n	80022e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e00f      	b.n	8002304 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d80b      	bhi.n	8002302 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	2301      	movs	r3, #1
 80022ee:	425b      	negs	r3, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 fc7a 	bl	8002bec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_InitTick+0x64>)
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b003      	add	sp, #12
 800230a:	bd90      	pop	{r4, r7, pc}
 800230c:	20000000 	.word	0x20000000
 8002310:	20000008 	.word	0x20000008
 8002314:	20000004 	.word	0x20000004

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_IncTick+0x1c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	001a      	movs	r2, r3
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_IncTick+0x20>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	18d2      	adds	r2, r2, r3
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_IncTick+0x20>)
 800232a:	601a      	str	r2, [r3, #0]
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	20000008 	.word	0x20000008
 8002338:	2000014c 	.word	0x2000014c

0800233c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  return uwTick;
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <HAL_GetTick+0x10>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	2000014c 	.word	0x2000014c

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff fff0 	bl	800233c <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3301      	adds	r3, #1
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	001a      	movs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	189b      	adds	r3, r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	f7ff ffe0 	bl	800233c <HAL_GetTick>
 800237c:	0002      	movs	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b004      	add	sp, #16
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	20000008 	.word	0x20000008

08002398 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e159      	b.n	800265e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2250      	movs	r2, #80	; 0x50
 80023bc:	2100      	movs	r1, #0
 80023be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f7ff fe3a 	bl	800203c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	2210      	movs	r2, #16
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d005      	beq.n	80023e0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2204      	movs	r2, #4
 80023dc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80023de:	d00b      	beq.n	80023f8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	2210      	movs	r2, #16
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2250      	movs	r2, #80	; 0x50
 80023f0:	2100      	movs	r1, #0
 80023f2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e132      	b.n	800265e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	4a9a      	ldr	r2, [pc, #616]	; (8002668 <HAL_ADC_Init+0x2d0>)
 80023fe:	4013      	ands	r3, r2
 8002400:	2202      	movs	r2, #2
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2203      	movs	r2, #3
 8002410:	4013      	ands	r3, r2
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_ADC_Init+0x90>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	4013      	ands	r3, r2
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_ADC_Init+0x90>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_ADC_Init+0x92>
 8002428:	2300      	movs	r3, #0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d149      	bne.n	80024c2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	23c0      	movs	r3, #192	; 0xc0
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	429a      	cmp	r2, r3
 8002438:	d00b      	beq.n	8002452 <HAL_ADC_Init+0xba>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	05db      	lsls	r3, r3, #23
 8002442:	429a      	cmp	r2, r3
 8002444:	d005      	beq.n	8002452 <HAL_ADC_Init+0xba>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	429a      	cmp	r2, r3
 8002450:	d111      	bne.n	8002476 <HAL_ADC_Init+0xde>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0092      	lsls	r2, r2, #2
 800245e:	0892      	lsrs	r2, r2, #2
 8002460:	611a      	str	r2, [r3, #16]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6919      	ldr	r1, [r3, #16]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	611a      	str	r2, [r3, #16]
 8002474:	e014      	b.n	80024a0 <HAL_ADC_Init+0x108>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	0892      	lsrs	r2, r2, #2
 8002484:	611a      	str	r2, [r3, #16]
 8002486:	4b79      	ldr	r3, [pc, #484]	; (800266c <HAL_ADC_Init+0x2d4>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b78      	ldr	r3, [pc, #480]	; (800266c <HAL_ADC_Init+0x2d4>)
 800248c:	4978      	ldr	r1, [pc, #480]	; (8002670 <HAL_ADC_Init+0x2d8>)
 800248e:	400a      	ands	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	4b76      	ldr	r3, [pc, #472]	; (800266c <HAL_ADC_Init+0x2d4>)
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4b74      	ldr	r3, [pc, #464]	; (800266c <HAL_ADC_Init+0x2d4>)
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2118      	movs	r1, #24
 80024ac:	438a      	bics	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68d9      	ldr	r1, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80024c2:	4b6a      	ldr	r3, [pc, #424]	; (800266c <HAL_ADC_Init+0x2d4>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b69      	ldr	r3, [pc, #420]	; (800266c <HAL_ADC_Init+0x2d4>)
 80024c8:	496a      	ldr	r1, [pc, #424]	; (8002674 <HAL_ADC_Init+0x2dc>)
 80024ca:	400a      	ands	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80024ce:	4b67      	ldr	r3, [pc, #412]	; (800266c <HAL_ADC_Init+0x2d4>)
 80024d0:	6819      	ldr	r1, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d6:	065a      	lsls	r2, r3, #25
 80024d8:	4b64      	ldr	r3, [pc, #400]	; (800266c <HAL_ADC_Init+0x2d4>)
 80024da:	430a      	orrs	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	055b      	lsls	r3, r3, #21
 80024e8:	4013      	ands	r3, r2
 80024ea:	d108      	bne.n	80024fe <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	0549      	lsls	r1, r1, #21
 80024fa:	430a      	orrs	r2, r1
 80024fc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	495b      	ldr	r1, [pc, #364]	; (8002678 <HAL_ADC_Init+0x2e0>)
 800250a:	400a      	ands	r2, r1
 800250c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68d9      	ldr	r1, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d101      	bne.n	8002524 <HAL_ADC_Init+0x18c>
 8002520:	2304      	movs	r3, #4
 8002522:	e000      	b.n	8002526 <HAL_ADC_Init+0x18e>
 8002524:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002526:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2020      	movs	r0, #32
 800252c:	5c1b      	ldrb	r3, [r3, r0]
 800252e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002530:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	202c      	movs	r0, #44	; 0x2c
 8002536:	5c1b      	ldrb	r3, [r3, r0]
 8002538:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800253a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002540:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002548:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002550:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800255e:	23c2      	movs	r3, #194	; 0xc2
 8002560:	33ff      	adds	r3, #255	; 0xff
 8002562:	429a      	cmp	r2, r3
 8002564:	d00b      	beq.n	800257e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68d9      	ldr	r1, [r3, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2221      	movs	r2, #33	; 0x21
 8002582:	5c9b      	ldrb	r3, [r3, r2]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d11a      	bne.n	80025be <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	5c9b      	ldrb	r3, [r3, r2]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	0249      	lsls	r1, r1, #9
 80025a0:	430a      	orrs	r2, r1
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	e00b      	b.n	80025be <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	2220      	movs	r2, #32
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	2201      	movs	r2, #1
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d11f      	bne.n	8002606 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	492a      	ldr	r1, [pc, #168]	; (800267c <HAL_ADC_Init+0x2e4>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6919      	ldr	r1, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80025e4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80025ea:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2101      	movs	r1, #1
 8002600:	430a      	orrs	r2, r1
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	e00e      	b.n	8002624 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	2b01      	cmp	r3, #1
 8002612:	d107      	bne.n	8002624 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2101      	movs	r1, #1
 8002620:	438a      	bics	r2, r1
 8002622:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2107      	movs	r1, #7
 8002630:	438a      	bics	r2, r1
 8002632:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6959      	ldr	r1, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	2203      	movs	r2, #3
 8002652:	4393      	bics	r3, r2
 8002654:	2201      	movs	r2, #1
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	fffffefd 	.word	0xfffffefd
 800266c:	40012708 	.word	0x40012708
 8002670:	ffc3ffff 	.word	0xffc3ffff
 8002674:	fdffffff 	.word	0xfdffffff
 8002678:	fffe0219 	.word	0xfffe0219
 800267c:	fffffc03 	.word	0xfffffc03

08002680 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002688:	230f      	movs	r3, #15
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2204      	movs	r2, #4
 8002698:	4013      	ands	r3, r2
 800269a:	d138      	bne.n	800270e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2250      	movs	r2, #80	; 0x50
 80026a0:	5c9b      	ldrb	r3, [r3, r2]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_Start+0x2a>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e038      	b.n	800271c <HAL_ADC_Start+0x9c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2250      	movs	r2, #80	; 0x50
 80026ae:	2101      	movs	r1, #1
 80026b0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d007      	beq.n	80026ca <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80026ba:	230f      	movs	r3, #15
 80026bc:	18fc      	adds	r4, r7, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 f979 	bl	80029b8 <ADC_Enable>
 80026c6:	0003      	movs	r3, r0
 80026c8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026ca:	230f      	movs	r3, #15
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d120      	bne.n	8002716 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	4a12      	ldr	r2, [pc, #72]	; (8002724 <HAL_ADC_Start+0xa4>)
 80026da:	4013      	ands	r3, r2
 80026dc:	2280      	movs	r2, #128	; 0x80
 80026de:	0052      	lsls	r2, r2, #1
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2250      	movs	r2, #80	; 0x50
 80026f0:	2100      	movs	r1, #0
 80026f2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	221c      	movs	r2, #28
 80026fa:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2104      	movs	r1, #4
 8002708:	430a      	orrs	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	e003      	b.n	8002716 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800270e:	230f      	movs	r3, #15
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2202      	movs	r2, #2
 8002714:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002716:	230f      	movs	r3, #15
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	781b      	ldrb	r3, [r3, #0]
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b005      	add	sp, #20
 8002722:	bd90      	pop	{r4, r7, pc}
 8002724:	fffff0fe 	.word	0xfffff0fe

08002728 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	2b08      	cmp	r3, #8
 8002740:	d102      	bne.n	8002748 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002742:	2308      	movs	r3, #8
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	e014      	b.n	8002772 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	4013      	ands	r3, r2
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10b      	bne.n	800276e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	2220      	movs	r2, #32
 800275c:	431a      	orrs	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2250      	movs	r2, #80	; 0x50
 8002766:	2100      	movs	r1, #0
 8002768:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e072      	b.n	8002854 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800276e:	230c      	movs	r3, #12
 8002770:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002772:	f7ff fde3 	bl	800233c <HAL_GetTick>
 8002776:	0003      	movs	r3, r0
 8002778:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800277a:	e01f      	b.n	80027bc <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	d01c      	beq.n	80027bc <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_ADC_PollForConversion+0x70>
 8002788:	f7ff fdd8 	bl	800233c <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d211      	bcs.n	80027bc <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4013      	ands	r3, r2
 80027a2:	d10b      	bne.n	80027bc <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a8:	2204      	movs	r2, #4
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2250      	movs	r2, #80	; 0x50
 80027b4:	2100      	movs	r1, #0
 80027b6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e04b      	b.n	8002854 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4013      	ands	r3, r2
 80027c6:	d0d9      	beq.n	800277c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	0092      	lsls	r2, r2, #2
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	23c0      	movs	r3, #192	; 0xc0
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	4013      	ands	r3, r2
 80027e2:	d12e      	bne.n	8002842 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d129      	bne.n	8002842 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d122      	bne.n	8002842 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2204      	movs	r2, #4
 8002804:	4013      	ands	r3, r2
 8002806:	d110      	bne.n	800282a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	210c      	movs	r1, #12
 8002814:	438a      	bics	r2, r1
 8002816:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	4a0f      	ldr	r2, [pc, #60]	; (800285c <HAL_ADC_PollForConversion+0x134>)
 800281e:	4013      	ands	r3, r2
 8002820:	2201      	movs	r2, #1
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
 8002828:	e00b      	b.n	8002842 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	2220      	movs	r2, #32
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	2201      	movs	r2, #1
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	220c      	movs	r2, #12
 8002850:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	b004      	add	sp, #16
 800285a:	bd80      	pop	{r7, pc}
 800285c:	fffffefe 	.word	0xfffffefe

08002860 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2250      	movs	r2, #80	; 0x50
 8002886:	5c9b      	ldrb	r3, [r3, r2]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x18>
 800288c:	2302      	movs	r3, #2
 800288e:	e085      	b.n	800299c <HAL_ADC_ConfigChannel+0x124>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2250      	movs	r2, #80	; 0x50
 8002894:	2101      	movs	r1, #1
 8002896:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2204      	movs	r2, #4
 80028a0:	4013      	ands	r3, r2
 80028a2:	d00b      	beq.n	80028bc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	2220      	movs	r2, #32
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2250      	movs	r2, #80	; 0x50
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e06f      	b.n	800299c <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <HAL_ADC_ConfigChannel+0x12c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d035      	beq.n	8002932 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	035b      	lsls	r3, r3, #13
 80028d2:	0b5a      	lsrs	r2, r3, #13
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	02db      	lsls	r3, r3, #11
 80028e4:	4013      	ands	r3, r2
 80028e6:	d009      	beq.n	80028fc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80028e8:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	0409      	lsls	r1, r1, #16
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80028f6:	200a      	movs	r0, #10
 80028f8:	f000 f8c6 	bl	8002a88 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	029b      	lsls	r3, r3, #10
 8002904:	4013      	ands	r3, r2
 8002906:	d006      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	03c9      	lsls	r1, r1, #15
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	025b      	lsls	r3, r3, #9
 800291e:	4013      	ands	r3, r2
 8002920:	d037      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8002922:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	0449      	lsls	r1, r1, #17
 800292c:	430a      	orrs	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e02f      	b.n	8002992 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	035b      	lsls	r3, r3, #13
 800293e:	0b5b      	lsrs	r3, r3, #13
 8002940:	43d9      	mvns	r1, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	400a      	ands	r2, r1
 8002948:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	02db      	lsls	r3, r3, #11
 8002952:	4013      	ands	r3, r2
 8002954:	d005      	beq.n	8002962 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 800295c:	4913      	ldr	r1, [pc, #76]	; (80029ac <HAL_ADC_ConfigChannel+0x134>)
 800295e:	400a      	ands	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	029b      	lsls	r3, r3, #10
 800296a:	4013      	ands	r3, r2
 800296c:	d005      	beq.n	800297a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 8002974:	490e      	ldr	r1, [pc, #56]	; (80029b0 <HAL_ADC_ConfigChannel+0x138>)
 8002976:	400a      	ands	r2, r1
 8002978:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	025b      	lsls	r3, r3, #9
 8002982:	4013      	ands	r3, r2
 8002984:	d005      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <HAL_ADC_ConfigChannel+0x130>)
 800298c:	4909      	ldr	r1, [pc, #36]	; (80029b4 <HAL_ADC_ConfigChannel+0x13c>)
 800298e:	400a      	ands	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2250      	movs	r2, #80	; 0x50
 8002996:	2100      	movs	r1, #0
 8002998:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	00001001 	.word	0x00001001
 80029a8:	40012708 	.word	0x40012708
 80029ac:	ff7fffff 	.word	0xff7fffff
 80029b0:	ffbfffff 	.word	0xffbfffff
 80029b4:	feffffff 	.word	0xfeffffff

080029b8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2203      	movs	r2, #3
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d108      	bne.n	80029e4 <ADC_Enable+0x2c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	4013      	ands	r3, r2
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <ADC_Enable+0x2c>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <ADC_Enable+0x2e>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d146      	bne.n	8002a78 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a24      	ldr	r2, [pc, #144]	; (8002a84 <ADC_Enable+0xcc>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	d00d      	beq.n	8002a12 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	2210      	movs	r2, #16
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	2201      	movs	r2, #1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e033      	b.n	8002a7a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002a22:	2001      	movs	r0, #1
 8002a24:	f000 f830 	bl	8002a88 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a28:	f7ff fc88 	bl	800233c <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a30:	e01b      	b.n	8002a6a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a32:	f7ff fc83 	bl	800233c <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b0a      	cmp	r3, #10
 8002a3e:	d914      	bls.n	8002a6a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2201      	movs	r2, #1
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d00d      	beq.n	8002a6a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	2210      	movs	r2, #16
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	2201      	movs	r2, #1
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e007      	b.n	8002a7a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d1dc      	bne.n	8002a32 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b004      	add	sp, #16
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	80000017 	.word	0x80000017

08002a88 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <ADC_DelayMicroSecond+0x38>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	490b      	ldr	r1, [pc, #44]	; (8002ac4 <ADC_DelayMicroSecond+0x3c>)
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7fd fb36 	bl	8000108 <__udivsi3>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	001a      	movs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4353      	muls	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002aa6:	e002      	b.n	8002aae <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f9      	bne.n	8002aa8 <ADC_DelayMicroSecond+0x20>
  }
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	000f4240 	.word	0x000f4240

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	0002      	movs	r2, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ad6:	1dfb      	adds	r3, r7, #7
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b7f      	cmp	r3, #127	; 0x7f
 8002adc:	d828      	bhi.n	8002b30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ade:	4a2f      	ldr	r2, [pc, #188]	; (8002b9c <__NVIC_SetPriority+0xd4>)
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	33c0      	adds	r3, #192	; 0xc0
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	589b      	ldr	r3, [r3, r2]
 8002aee:	1dfa      	adds	r2, r7, #7
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	0011      	movs	r1, r2
 8002af4:	2203      	movs	r2, #3
 8002af6:	400a      	ands	r2, r1
 8002af8:	00d2      	lsls	r2, r2, #3
 8002afa:	21ff      	movs	r1, #255	; 0xff
 8002afc:	4091      	lsls	r1, r2
 8002afe:	000a      	movs	r2, r1
 8002b00:	43d2      	mvns	r2, r2
 8002b02:	401a      	ands	r2, r3
 8002b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	22ff      	movs	r2, #255	; 0xff
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	1dfb      	adds	r3, r7, #7
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	0018      	movs	r0, r3
 8002b14:	2303      	movs	r3, #3
 8002b16:	4003      	ands	r3, r0
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b1c:	481f      	ldr	r0, [pc, #124]	; (8002b9c <__NVIC_SetPriority+0xd4>)
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	430a      	orrs	r2, r1
 8002b28:	33c0      	adds	r3, #192	; 0xc0
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b2e:	e031      	b.n	8002b94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b30:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <__NVIC_SetPriority+0xd8>)
 8002b32:	1dfb      	adds	r3, r7, #7
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	0019      	movs	r1, r3
 8002b38:	230f      	movs	r3, #15
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	3b08      	subs	r3, #8
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3306      	adds	r3, #6
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	18d3      	adds	r3, r2, r3
 8002b46:	3304      	adds	r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	1dfa      	adds	r2, r7, #7
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	0011      	movs	r1, r2
 8002b50:	2203      	movs	r2, #3
 8002b52:	400a      	ands	r2, r1
 8002b54:	00d2      	lsls	r2, r2, #3
 8002b56:	21ff      	movs	r1, #255	; 0xff
 8002b58:	4091      	lsls	r1, r2
 8002b5a:	000a      	movs	r2, r1
 8002b5c:	43d2      	mvns	r2, r2
 8002b5e:	401a      	ands	r2, r3
 8002b60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	019b      	lsls	r3, r3, #6
 8002b66:	22ff      	movs	r2, #255	; 0xff
 8002b68:	401a      	ands	r2, r3
 8002b6a:	1dfb      	adds	r3, r7, #7
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	2303      	movs	r3, #3
 8002b72:	4003      	ands	r3, r0
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b78:	4809      	ldr	r0, [pc, #36]	; (8002ba0 <__NVIC_SetPriority+0xd8>)
 8002b7a:	1dfb      	adds	r3, r7, #7
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	001c      	movs	r4, r3
 8002b80:	230f      	movs	r3, #15
 8002b82:	4023      	ands	r3, r4
 8002b84:	3b08      	subs	r3, #8
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	3306      	adds	r3, #6
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	18c3      	adds	r3, r0, r3
 8002b90:	3304      	adds	r3, #4
 8002b92:	601a      	str	r2, [r3, #0]
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b003      	add	sp, #12
 8002b9a:	bd90      	pop	{r4, r7, pc}
 8002b9c:	e000e100 	.word	0xe000e100
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	1e5a      	subs	r2, r3, #1
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	045b      	lsls	r3, r3, #17
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d301      	bcc.n	8002bbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e010      	b.n	8002bde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <SysTick_Config+0x44>)
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	3a01      	subs	r2, #1
 8002bc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	425b      	negs	r3, r3
 8002bc8:	2103      	movs	r1, #3
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f7ff ff7c 	bl	8002ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <SysTick_Config+0x44>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <SysTick_Config+0x44>)
 8002bd8:	2207      	movs	r2, #7
 8002bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b002      	add	sp, #8
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	e000e010 	.word	0xe000e010

08002bec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	187b      	adds	r3, r7, r1
 8002bfa:	1c02      	adds	r2, r0, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b25b      	sxtb	r3, r3
 8002c06:	0011      	movs	r1, r2
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7ff ff5d 	bl	8002ac8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b004      	add	sp, #16
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7ff ffbf 	bl	8002ba4 <SysTick_Config>
 8002c26:	0003      	movs	r3, r0
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c46:	e155      	b.n	8002ef4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4091      	lsls	r1, r2
 8002c52:	000a      	movs	r2, r1
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d100      	bne.n	8002c60 <HAL_GPIO_Init+0x30>
 8002c5e:	e146      	b.n	8002eee <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2203      	movs	r2, #3
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d005      	beq.n	8002c78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d130      	bne.n	8002cda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	2203      	movs	r2, #3
 8002c84:	409a      	lsls	r2, r3
 8002c86:	0013      	movs	r3, r2
 8002c88:	43da      	mvns	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	0013      	movs	r3, r2
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cae:	2201      	movs	r2, #1
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	0013      	movs	r3, r2
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	0013      	movs	r3, r2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d017      	beq.n	8002d16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	0013      	movs	r3, r2
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	409a      	lsls	r2, r3
 8002d08:	0013      	movs	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d123      	bne.n	8002d6a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	08da      	lsrs	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3208      	adds	r2, #8
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	58d3      	ldr	r3, [r2, r3]
 8002d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2207      	movs	r2, #7
 8002d34:	4013      	ands	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	220f      	movs	r2, #15
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	0013      	movs	r3, r2
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2107      	movs	r1, #7
 8002d4e:	400b      	ands	r3, r1
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	409a      	lsls	r2, r3
 8002d54:	0013      	movs	r3, r2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	08da      	lsrs	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3208      	adds	r2, #8
 8002d64:	0092      	lsls	r2, r2, #2
 8002d66:	6939      	ldr	r1, [r7, #16]
 8002d68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	409a      	lsls	r2, r3
 8002d78:	0013      	movs	r3, r2
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2203      	movs	r2, #3
 8002d88:	401a      	ands	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	0013      	movs	r3, r2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	23c0      	movs	r3, #192	; 0xc0
 8002da4:	029b      	lsls	r3, r3, #10
 8002da6:	4013      	ands	r3, r2
 8002da8:	d100      	bne.n	8002dac <HAL_GPIO_Init+0x17c>
 8002daa:	e0a0      	b.n	8002eee <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dac:	4b57      	ldr	r3, [pc, #348]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db0:	4b56      	ldr	r3, [pc, #344]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002db2:	2101      	movs	r1, #1
 8002db4:	430a      	orrs	r2, r1
 8002db6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db8:	4a55      	ldr	r2, [pc, #340]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	589b      	ldr	r3, [r3, r2]
 8002dc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2203      	movs	r2, #3
 8002dca:	4013      	ands	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	220f      	movs	r2, #15
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	0013      	movs	r3, r2
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	23a0      	movs	r3, #160	; 0xa0
 8002de0:	05db      	lsls	r3, r3, #23
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d01f      	beq.n	8002e26 <HAL_GPIO_Init+0x1f6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a4a      	ldr	r2, [pc, #296]	; (8002f14 <HAL_GPIO_Init+0x2e4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d019      	beq.n	8002e22 <HAL_GPIO_Init+0x1f2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a49      	ldr	r2, [pc, #292]	; (8002f18 <HAL_GPIO_Init+0x2e8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_GPIO_Init+0x1ee>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a48      	ldr	r2, [pc, #288]	; (8002f1c <HAL_GPIO_Init+0x2ec>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00d      	beq.n	8002e1a <HAL_GPIO_Init+0x1ea>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a47      	ldr	r2, [pc, #284]	; (8002f20 <HAL_GPIO_Init+0x2f0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <HAL_GPIO_Init+0x1e6>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a46      	ldr	r2, [pc, #280]	; (8002f24 <HAL_GPIO_Init+0x2f4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_GPIO_Init+0x1e2>
 8002e0e:	2305      	movs	r3, #5
 8002e10:	e00a      	b.n	8002e28 <HAL_GPIO_Init+0x1f8>
 8002e12:	2306      	movs	r3, #6
 8002e14:	e008      	b.n	8002e28 <HAL_GPIO_Init+0x1f8>
 8002e16:	2304      	movs	r3, #4
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x1f8>
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e004      	b.n	8002e28 <HAL_GPIO_Init+0x1f8>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e002      	b.n	8002e28 <HAL_GPIO_Init+0x1f8>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_GPIO_Init+0x1f8>
 8002e26:	2300      	movs	r3, #0
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	4093      	lsls	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e38:	4935      	ldr	r1, [pc, #212]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	3302      	adds	r3, #2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e46:	4b38      	ldr	r3, [pc, #224]	; (8002f28 <HAL_GPIO_Init+0x2f8>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	035b      	lsls	r3, r3, #13
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_GPIO_Init+0x2f8>)
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_GPIO_Init+0x2f8>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	43da      	mvns	r2, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	039b      	lsls	r3, r3, #14
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e94:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <HAL_GPIO_Init+0x2f8>)
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002e9a:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_GPIO_Init+0x2f8>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	029b      	lsls	r3, r3, #10
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_GPIO_Init+0x2f8>)
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_GPIO_Init+0x2f8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	025b      	lsls	r3, r3, #9
 8002edc:	4013      	ands	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_GPIO_Init+0x2f8>)
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	40da      	lsrs	r2, r3
 8002efc:	1e13      	subs	r3, r2, #0
 8002efe:	d000      	beq.n	8002f02 <HAL_GPIO_Init+0x2d2>
 8002f00:	e6a2      	b.n	8002c48 <HAL_GPIO_Init+0x18>
  }
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b006      	add	sp, #24
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010000 	.word	0x40010000
 8002f14:	50000400 	.word	0x50000400
 8002f18:	50000800 	.word	0x50000800
 8002f1c:	50000c00 	.word	0x50000c00
 8002f20:	50001000 	.word	0x50001000
 8002f24:	50001c00 	.word	0x50001c00
 8002f28:	40010400 	.word	0x40010400

08002f2c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	0008      	movs	r0, r1
 8002f36:	0011      	movs	r1, r2
 8002f38:	1cbb      	adds	r3, r7, #2
 8002f3a:	1c02      	adds	r2, r0, #0
 8002f3c:	801a      	strh	r2, [r3, #0]
 8002f3e:	1c7b      	adds	r3, r7, #1
 8002f40:	1c0a      	adds	r2, r1, #0
 8002f42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f44:	1c7b      	adds	r3, r7, #1
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d004      	beq.n	8002f56 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4c:	1cbb      	adds	r3, r7, #2
 8002f4e:	881a      	ldrh	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002f54:	e003      	b.n	8002f5e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002f56:	1cbb      	adds	r3, r7, #2
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b002      	add	sp, #8
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b5b0      	push	{r4, r5, r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f000 fbbf 	bl	80036fa <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7c:	4bc9      	ldr	r3, [pc, #804]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	220c      	movs	r2, #12
 8002f82:	4013      	ands	r3, r2
 8002f84:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f86:	4bc7      	ldr	r3, [pc, #796]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	025b      	lsls	r3, r3, #9
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2201      	movs	r2, #1
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d100      	bne.n	8002f9e <HAL_RCC_OscConfig+0x36>
 8002f9c:	e07e      	b.n	800309c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d007      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	d112      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x68>
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	025b      	lsls	r3, r3, #9
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d10d      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	4bbb      	ldr	r3, [pc, #748]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	029b      	lsls	r3, r3, #10
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d100      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x5a>
 8002fc0:	e06b      	b.n	800309a <HAL_RCC_OscConfig+0x132>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d167      	bne.n	800309a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f000 fb95 	bl	80036fa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	025b      	lsls	r3, r3, #9
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_OscConfig+0x84>
 8002fdc:	4bb1      	ldr	r3, [pc, #708]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4bb0      	ldr	r3, [pc, #704]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	0249      	lsls	r1, r1, #9
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	e027      	b.n	800303c <HAL_RCC_OscConfig+0xd4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	23a0      	movs	r3, #160	; 0xa0
 8002ff2:	02db      	lsls	r3, r3, #11
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d10e      	bne.n	8003016 <HAL_RCC_OscConfig+0xae>
 8002ff8:	4baa      	ldr	r3, [pc, #680]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4ba9      	ldr	r3, [pc, #676]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8002ffe:	2180      	movs	r1, #128	; 0x80
 8003000:	02c9      	lsls	r1, r1, #11
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	4ba7      	ldr	r3, [pc, #668]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4ba6      	ldr	r3, [pc, #664]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	0249      	lsls	r1, r1, #9
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	e012      	b.n	800303c <HAL_RCC_OscConfig+0xd4>
 8003016:	4ba3      	ldr	r3, [pc, #652]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4ba2      	ldr	r3, [pc, #648]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 800301c:	49a2      	ldr	r1, [pc, #648]	; (80032a8 <HAL_RCC_OscConfig+0x340>)
 800301e:	400a      	ands	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	4ba0      	ldr	r3, [pc, #640]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	025b      	lsls	r3, r3, #9
 800302a:	4013      	ands	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4b9c      	ldr	r3, [pc, #624]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b9b      	ldr	r3, [pc, #620]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003036:	499d      	ldr	r1, [pc, #628]	; (80032ac <HAL_RCC_OscConfig+0x344>)
 8003038:	400a      	ands	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d015      	beq.n	8003070 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7ff f97a 	bl	800233c <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800304c:	e009      	b.n	8003062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304e:	f7ff f975 	bl	800233c <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b64      	cmp	r3, #100	; 0x64
 800305a:	d902      	bls.n	8003062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	f000 fb4c 	bl	80036fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003062:	4b90      	ldr	r3, [pc, #576]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	029b      	lsls	r3, r3, #10
 800306a:	4013      	ands	r3, r2
 800306c:	d0ef      	beq.n	800304e <HAL_RCC_OscConfig+0xe6>
 800306e:	e015      	b.n	800309c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7ff f964 	bl	800233c <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307a:	f7ff f95f 	bl	800233c <HAL_GetTick>
 800307e:	0002      	movs	r2, r0
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b64      	cmp	r3, #100	; 0x64
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e336      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800308c:	4b85      	ldr	r3, [pc, #532]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	029b      	lsls	r3, r3, #10
 8003094:	4013      	ands	r3, r2
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x112>
 8003098:	e000      	b.n	800309c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2202      	movs	r2, #2
 80030a2:	4013      	ands	r3, r2
 80030a4:	d100      	bne.n	80030a8 <HAL_RCC_OscConfig+0x140>
 80030a6:	e099      	b.n	80031dc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	2220      	movs	r2, #32
 80030b2:	4013      	ands	r3, r2
 80030b4:	d009      	beq.n	80030ca <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80030b6:	4b7b      	ldr	r3, [pc, #492]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b7a      	ldr	r3, [pc, #488]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 80030bc:	2120      	movs	r1, #32
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	2220      	movs	r2, #32
 80030c6:	4393      	bics	r3, r2
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d13e      	bne.n	8003154 <HAL_RCC_OscConfig+0x1ec>
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d13b      	bne.n	8003154 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80030dc:	4b71      	ldr	r3, [pc, #452]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2204      	movs	r2, #4
 80030e2:	4013      	ands	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_RCC_OscConfig+0x188>
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e304      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f0:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a6e      	ldr	r2, [pc, #440]	; (80032b0 <HAL_RCC_OscConfig+0x348>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	021a      	lsls	r2, r3, #8
 8003100:	4b68      	ldr	r3, [pc, #416]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003106:	4b67      	ldr	r3, [pc, #412]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2209      	movs	r2, #9
 800310c:	4393      	bics	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	4b64      	ldr	r3, [pc, #400]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003118:	f000 fc42 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800311c:	0001      	movs	r1, r0
 800311e:	4b61      	ldr	r3, [pc, #388]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	220f      	movs	r2, #15
 8003126:	4013      	ands	r3, r2
 8003128:	4a62      	ldr	r2, [pc, #392]	; (80032b4 <HAL_RCC_OscConfig+0x34c>)
 800312a:	5cd3      	ldrb	r3, [r2, r3]
 800312c:	000a      	movs	r2, r1
 800312e:	40da      	lsrs	r2, r3
 8003130:	4b61      	ldr	r3, [pc, #388]	; (80032b8 <HAL_RCC_OscConfig+0x350>)
 8003132:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003134:	4b61      	ldr	r3, [pc, #388]	; (80032bc <HAL_RCC_OscConfig+0x354>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2513      	movs	r5, #19
 800313a:	197c      	adds	r4, r7, r5
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff f8b7 	bl	80022b0 <HAL_InitTick>
 8003142:	0003      	movs	r3, r0
 8003144:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003146:	197b      	adds	r3, r7, r5
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d046      	beq.n	80031dc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800314e:	197b      	adds	r3, r7, r5
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	e2d2      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d027      	beq.n	80031aa <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800315a:	4b52      	ldr	r3, [pc, #328]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2209      	movs	r2, #9
 8003160:	4393      	bics	r3, r2
 8003162:	0019      	movs	r1, r3
 8003164:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7ff f8e6 	bl	800233c <HAL_GetTick>
 8003170:	0003      	movs	r3, r0
 8003172:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003176:	f7ff f8e1 	bl	800233c <HAL_GetTick>
 800317a:	0002      	movs	r2, r0
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e2b8      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003188:	4b46      	ldr	r3, [pc, #280]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2204      	movs	r2, #4
 800318e:	4013      	ands	r3, r2
 8003190:	d0f1      	beq.n	8003176 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b44      	ldr	r3, [pc, #272]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4a46      	ldr	r2, [pc, #280]	; (80032b0 <HAL_RCC_OscConfig+0x348>)
 8003198:	4013      	ands	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	021a      	lsls	r2, r3, #8
 80031a2:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	e018      	b.n	80031dc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031aa:	4b3e      	ldr	r3, [pc, #248]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 80031b0:	2101      	movs	r1, #1
 80031b2:	438a      	bics	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b6:	f7ff f8c1 	bl	800233c <HAL_GetTick>
 80031ba:	0003      	movs	r3, r0
 80031bc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c0:	f7ff f8bc 	bl	800233c <HAL_GetTick>
 80031c4:	0002      	movs	r2, r0
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e293      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031d2:	4b34      	ldr	r3, [pc, #208]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2204      	movs	r2, #4
 80031d8:	4013      	ands	r3, r2
 80031da:	d1f1      	bne.n	80031c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2210      	movs	r2, #16
 80031e2:	4013      	ands	r3, r2
 80031e4:	d100      	bne.n	80031e8 <HAL_RCC_OscConfig+0x280>
 80031e6:	e0a2      	b.n	800332e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d140      	bne.n	8003270 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031ee:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4013      	ands	r3, r2
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x29e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e279      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003206:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4a2d      	ldr	r2, [pc, #180]	; (80032c0 <HAL_RCC_OscConfig+0x358>)
 800320c:	4013      	ands	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003214:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321a:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	0a19      	lsrs	r1, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	061a      	lsls	r2, r3, #24
 8003228:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	0b5b      	lsrs	r3, r3, #13
 8003234:	3301      	adds	r3, #1
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	0212      	lsls	r2, r2, #8
 800323a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	210f      	movs	r1, #15
 8003244:	400b      	ands	r3, r1
 8003246:	491b      	ldr	r1, [pc, #108]	; (80032b4 <HAL_RCC_OscConfig+0x34c>)
 8003248:	5ccb      	ldrb	r3, [r1, r3]
 800324a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800324c:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCC_OscConfig+0x350>)
 800324e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003250:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_RCC_OscConfig+0x354>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2513      	movs	r5, #19
 8003256:	197c      	adds	r4, r7, r5
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff f829 	bl	80022b0 <HAL_InitTick>
 800325e:	0003      	movs	r3, r0
 8003260:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003262:	197b      	adds	r3, r7, r5
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d061      	beq.n	800332e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800326a:	197b      	adds	r3, r7, r5
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	e244      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d040      	beq.n	80032fa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_OscConfig+0x33c>)
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	0049      	lsls	r1, r1, #1
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003286:	f7ff f859 	bl	800233c <HAL_GetTick>
 800328a:	0003      	movs	r3, r0
 800328c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800328e:	e019      	b.n	80032c4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003290:	f7ff f854 	bl	800233c <HAL_GetTick>
 8003294:	0002      	movs	r2, r0
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d912      	bls.n	80032c4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e22b      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	40021000 	.word	0x40021000
 80032a8:	fffeffff 	.word	0xfffeffff
 80032ac:	fffbffff 	.word	0xfffbffff
 80032b0:	ffffe0ff 	.word	0xffffe0ff
 80032b4:	080053b8 	.word	0x080053b8
 80032b8:	20000000 	.word	0x20000000
 80032bc:	20000004 	.word	0x20000004
 80032c0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032c4:	4bca      	ldr	r3, [pc, #808]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4013      	ands	r3, r2
 80032ce:	d0df      	beq.n	8003290 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d0:	4bc7      	ldr	r3, [pc, #796]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4ac7      	ldr	r2, [pc, #796]	; (80035f4 <HAL_RCC_OscConfig+0x68c>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032de:	4bc4      	ldr	r3, [pc, #784]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80032e0:	430a      	orrs	r2, r1
 80032e2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e4:	4bc2      	ldr	r3, [pc, #776]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	0a19      	lsrs	r1, r3, #8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	061a      	lsls	r2, r3, #24
 80032f2:	4bbf      	ldr	r3, [pc, #764]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	e019      	b.n	800332e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032fa:	4bbd      	ldr	r3, [pc, #756]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4bbc      	ldr	r3, [pc, #752]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003300:	49bd      	ldr	r1, [pc, #756]	; (80035f8 <HAL_RCC_OscConfig+0x690>)
 8003302:	400a      	ands	r2, r1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7ff f819 	bl	800233c <HAL_GetTick>
 800330a:	0003      	movs	r3, r0
 800330c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003310:	f7ff f814 	bl	800233c <HAL_GetTick>
 8003314:	0002      	movs	r2, r0
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1eb      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003322:	4bb3      	ldr	r3, [pc, #716]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4013      	ands	r3, r2
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2208      	movs	r2, #8
 8003334:	4013      	ands	r3, r2
 8003336:	d036      	beq.n	80033a6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d019      	beq.n	8003374 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003340:	4bab      	ldr	r3, [pc, #684]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003344:	4baa      	ldr	r3, [pc, #680]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003346:	2101      	movs	r1, #1
 8003348:	430a      	orrs	r2, r1
 800334a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334c:	f7fe fff6 	bl	800233c <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003356:	f7fe fff1 	bl	800233c <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e1c8      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003368:	4ba1      	ldr	r3, [pc, #644]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 800336a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336c:	2202      	movs	r2, #2
 800336e:	4013      	ands	r3, r2
 8003370:	d0f1      	beq.n	8003356 <HAL_RCC_OscConfig+0x3ee>
 8003372:	e018      	b.n	80033a6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003374:	4b9e      	ldr	r3, [pc, #632]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003378:	4b9d      	ldr	r3, [pc, #628]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 800337a:	2101      	movs	r1, #1
 800337c:	438a      	bics	r2, r1
 800337e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003380:	f7fe ffdc 	bl	800233c <HAL_GetTick>
 8003384:	0003      	movs	r3, r0
 8003386:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338a:	f7fe ffd7 	bl	800233c <HAL_GetTick>
 800338e:	0002      	movs	r2, r0
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1ae      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800339c:	4b94      	ldr	r3, [pc, #592]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 800339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a0:	2202      	movs	r2, #2
 80033a2:	4013      	ands	r3, r2
 80033a4:	d1f1      	bne.n	800338a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2204      	movs	r2, #4
 80033ac:	4013      	ands	r3, r2
 80033ae:	d100      	bne.n	80033b2 <HAL_RCC_OscConfig+0x44a>
 80033b0:	e0ae      	b.n	8003510 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2023      	movs	r0, #35	; 0x23
 80033b4:	183b      	adds	r3, r7, r0
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ba:	4b8d      	ldr	r3, [pc, #564]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80033bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	055b      	lsls	r3, r3, #21
 80033c2:	4013      	ands	r3, r2
 80033c4:	d109      	bne.n	80033da <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	4b8a      	ldr	r3, [pc, #552]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80033c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ca:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	0549      	lsls	r1, r1, #21
 80033d0:	430a      	orrs	r2, r1
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80033d4:	183b      	adds	r3, r7, r0
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x694>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4013      	ands	r3, r2
 80033e4:	d11a      	bne.n	800341c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b85      	ldr	r3, [pc, #532]	; (80035fc <HAL_RCC_OscConfig+0x694>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b84      	ldr	r3, [pc, #528]	; (80035fc <HAL_RCC_OscConfig+0x694>)
 80033ec:	2180      	movs	r1, #128	; 0x80
 80033ee:	0049      	lsls	r1, r1, #1
 80033f0:	430a      	orrs	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f4:	f7fe ffa2 	bl	800233c <HAL_GetTick>
 80033f8:	0003      	movs	r3, r0
 80033fa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fe:	f7fe ff9d 	bl	800233c <HAL_GetTick>
 8003402:	0002      	movs	r2, r0
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b64      	cmp	r3, #100	; 0x64
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e174      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	4b7a      	ldr	r3, [pc, #488]	; (80035fc <HAL_RCC_OscConfig+0x694>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4013      	ands	r3, r2
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	429a      	cmp	r2, r3
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x4d0>
 8003428:	4b71      	ldr	r3, [pc, #452]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 800342a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800342c:	4b70      	ldr	r3, [pc, #448]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 800342e:	2180      	movs	r1, #128	; 0x80
 8003430:	0049      	lsls	r1, r1, #1
 8003432:	430a      	orrs	r2, r1
 8003434:	651a      	str	r2, [r3, #80]	; 0x50
 8003436:	e031      	b.n	800349c <HAL_RCC_OscConfig+0x534>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10c      	bne.n	800345a <HAL_RCC_OscConfig+0x4f2>
 8003440:	4b6b      	ldr	r3, [pc, #428]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003444:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003446:	496c      	ldr	r1, [pc, #432]	; (80035f8 <HAL_RCC_OscConfig+0x690>)
 8003448:	400a      	ands	r2, r1
 800344a:	651a      	str	r2, [r3, #80]	; 0x50
 800344c:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 800344e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003450:	4b67      	ldr	r3, [pc, #412]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003452:	496b      	ldr	r1, [pc, #428]	; (8003600 <HAL_RCC_OscConfig+0x698>)
 8003454:	400a      	ands	r2, r1
 8003456:	651a      	str	r2, [r3, #80]	; 0x50
 8003458:	e020      	b.n	800349c <HAL_RCC_OscConfig+0x534>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	23a0      	movs	r3, #160	; 0xa0
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	429a      	cmp	r2, r3
 8003464:	d10e      	bne.n	8003484 <HAL_RCC_OscConfig+0x51c>
 8003466:	4b62      	ldr	r3, [pc, #392]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800346a:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	00c9      	lsls	r1, r1, #3
 8003470:	430a      	orrs	r2, r1
 8003472:	651a      	str	r2, [r3, #80]	; 0x50
 8003474:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003478:	4b5d      	ldr	r3, [pc, #372]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	0049      	lsls	r1, r1, #1
 800347e:	430a      	orrs	r2, r1
 8003480:	651a      	str	r2, [r3, #80]	; 0x50
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0x534>
 8003484:	4b5a      	ldr	r3, [pc, #360]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003488:	4b59      	ldr	r3, [pc, #356]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 800348a:	495b      	ldr	r1, [pc, #364]	; (80035f8 <HAL_RCC_OscConfig+0x690>)
 800348c:	400a      	ands	r2, r1
 800348e:	651a      	str	r2, [r3, #80]	; 0x50
 8003490:	4b57      	ldr	r3, [pc, #348]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003494:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003496:	495a      	ldr	r1, [pc, #360]	; (8003600 <HAL_RCC_OscConfig+0x698>)
 8003498:	400a      	ands	r2, r1
 800349a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a4:	f7fe ff4a 	bl	800233c <HAL_GetTick>
 80034a8:	0003      	movs	r3, r0
 80034aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ac:	e009      	b.n	80034c2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fe ff45 	bl	800233c <HAL_GetTick>
 80034b2:	0002      	movs	r2, r0
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	4a52      	ldr	r2, [pc, #328]	; (8003604 <HAL_RCC_OscConfig+0x69c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e11b      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034c2:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80034c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4013      	ands	r3, r2
 80034cc:	d0ef      	beq.n	80034ae <HAL_RCC_OscConfig+0x546>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d0:	f7fe ff34 	bl	800233c <HAL_GetTick>
 80034d4:	0003      	movs	r3, r0
 80034d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034d8:	e009      	b.n	80034ee <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034da:	f7fe ff2f 	bl	800233c <HAL_GetTick>
 80034de:	0002      	movs	r2, r0
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	4a47      	ldr	r2, [pc, #284]	; (8003604 <HAL_RCC_OscConfig+0x69c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e105      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034ee:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80034f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4013      	ands	r3, r2
 80034f8:	d1ef      	bne.n	80034da <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034fa:	2323      	movs	r3, #35	; 0x23
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d105      	bne.n	8003510 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003504:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003508:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 800350a:	493f      	ldr	r1, [pc, #252]	; (8003608 <HAL_RCC_OscConfig+0x6a0>)
 800350c:	400a      	ands	r2, r1
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2220      	movs	r2, #32
 8003516:	4013      	ands	r3, r2
 8003518:	d049      	beq.n	80035ae <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d026      	beq.n	8003570 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003522:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003528:	2101      	movs	r1, #1
 800352a:	430a      	orrs	r2, r1
 800352c:	609a      	str	r2, [r3, #8]
 800352e:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003532:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003534:	2101      	movs	r1, #1
 8003536:	430a      	orrs	r2, r1
 8003538:	635a      	str	r2, [r3, #52]	; 0x34
 800353a:	4b34      	ldr	r3, [pc, #208]	; (800360c <HAL_RCC_OscConfig+0x6a4>)
 800353c:	6a1a      	ldr	r2, [r3, #32]
 800353e:	4b33      	ldr	r3, [pc, #204]	; (800360c <HAL_RCC_OscConfig+0x6a4>)
 8003540:	2180      	movs	r1, #128	; 0x80
 8003542:	0189      	lsls	r1, r1, #6
 8003544:	430a      	orrs	r2, r1
 8003546:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe fef8 	bl	800233c <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003552:	f7fe fef3 	bl	800233c <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e0ca      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003564:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2202      	movs	r2, #2
 800356a:	4013      	ands	r3, r2
 800356c:	d0f1      	beq.n	8003552 <HAL_RCC_OscConfig+0x5ea>
 800356e:	e01e      	b.n	80035ae <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003570:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 8003576:	2101      	movs	r1, #1
 8003578:	438a      	bics	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	4b23      	ldr	r3, [pc, #140]	; (800360c <HAL_RCC_OscConfig+0x6a4>)
 800357e:	6a1a      	ldr	r2, [r3, #32]
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <HAL_RCC_OscConfig+0x6a4>)
 8003582:	4923      	ldr	r1, [pc, #140]	; (8003610 <HAL_RCC_OscConfig+0x6a8>)
 8003584:	400a      	ands	r2, r1
 8003586:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe fed8 	bl	800233c <HAL_GetTick>
 800358c:	0003      	movs	r3, r0
 800358e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003592:	f7fe fed3 	bl	800233c <HAL_GetTick>
 8003596:	0002      	movs	r2, r0
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0aa      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2202      	movs	r2, #2
 80035aa:	4013      	ands	r3, r2
 80035ac:	d1f1      	bne.n	8003592 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d100      	bne.n	80035b8 <HAL_RCC_OscConfig+0x650>
 80035b6:	e09f      	b.n	80036f8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d100      	bne.n	80035c0 <HAL_RCC_OscConfig+0x658>
 80035be:	e078      	b.n	80036b2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d159      	bne.n	800367c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HAL_RCC_OscConfig+0x688>)
 80035ce:	4911      	ldr	r1, [pc, #68]	; (8003614 <HAL_RCC_OscConfig+0x6ac>)
 80035d0:	400a      	ands	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe feb2 	bl	800233c <HAL_GetTick>
 80035d8:	0003      	movs	r3, r0
 80035da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035dc:	e01c      	b.n	8003618 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035de:	f7fe fead 	bl	800233c <HAL_GetTick>
 80035e2:	0002      	movs	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d915      	bls.n	8003618 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e084      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
 80035f0:	40021000 	.word	0x40021000
 80035f4:	ffff1fff 	.word	0xffff1fff
 80035f8:	fffffeff 	.word	0xfffffeff
 80035fc:	40007000 	.word	0x40007000
 8003600:	fffffbff 	.word	0xfffffbff
 8003604:	00001388 	.word	0x00001388
 8003608:	efffffff 	.word	0xefffffff
 800360c:	40010000 	.word	0x40010000
 8003610:	ffffdfff 	.word	0xffffdfff
 8003614:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003618:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <HAL_RCC_OscConfig+0x79c>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	049b      	lsls	r3, r3, #18
 8003620:	4013      	ands	r3, r2
 8003622:	d1dc      	bne.n	80035de <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003624:	4b37      	ldr	r3, [pc, #220]	; (8003704 <HAL_RCC_OscConfig+0x79c>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a37      	ldr	r2, [pc, #220]	; (8003708 <HAL_RCC_OscConfig+0x7a0>)
 800362a:	4013      	ands	r3, r2
 800362c:	0019      	movs	r1, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	431a      	orrs	r2, r3
 800363e:	4b31      	ldr	r3, [pc, #196]	; (8003704 <HAL_RCC_OscConfig+0x79c>)
 8003640:	430a      	orrs	r2, r1
 8003642:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003644:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <HAL_RCC_OscConfig+0x79c>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <HAL_RCC_OscConfig+0x79c>)
 800364a:	2180      	movs	r1, #128	; 0x80
 800364c:	0449      	lsls	r1, r1, #17
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7fe fe73 	bl	800233c <HAL_GetTick>
 8003656:	0003      	movs	r3, r0
 8003658:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe fe6e 	bl	800233c <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e045      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800366e:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_RCC_OscConfig+0x79c>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	049b      	lsls	r3, r3, #18
 8003676:	4013      	ands	r3, r2
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x6f4>
 800367a:	e03d      	b.n	80036f8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_OscConfig+0x79c>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCC_OscConfig+0x79c>)
 8003682:	4922      	ldr	r1, [pc, #136]	; (800370c <HAL_RCC_OscConfig+0x7a4>)
 8003684:	400a      	ands	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe fe58 	bl	800233c <HAL_GetTick>
 800368c:	0003      	movs	r3, r0
 800368e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003692:	f7fe fe53 	bl	800233c <HAL_GetTick>
 8003696:	0002      	movs	r2, r0
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e02a      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_RCC_OscConfig+0x79c>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	049b      	lsls	r3, r3, #18
 80036ac:	4013      	ands	r3, r2
 80036ae:	d1f0      	bne.n	8003692 <HAL_RCC_OscConfig+0x72a>
 80036b0:	e022      	b.n	80036f8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e01d      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_RCC_OscConfig+0x79c>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	025b      	lsls	r3, r3, #9
 80036ca:	401a      	ands	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d10f      	bne.n	80036f4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	23f0      	movs	r3, #240	; 0xf0
 80036d8:	039b      	lsls	r3, r3, #14
 80036da:	401a      	ands	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	23c0      	movs	r3, #192	; 0xc0
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	401a      	ands	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b00a      	add	sp, #40	; 0x28
 8003700:	bdb0      	pop	{r4, r5, r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	40021000 	.word	0x40021000
 8003708:	ff02ffff 	.word	0xff02ffff
 800370c:	feffffff 	.word	0xfeffffff

08003710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003710:	b5b0      	push	{r4, r5, r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e128      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b96      	ldr	r3, [pc, #600]	; (8003980 <HAL_RCC_ClockConfig+0x270>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2201      	movs	r2, #1
 800372a:	4013      	ands	r3, r2
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d91e      	bls.n	8003770 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b93      	ldr	r3, [pc, #588]	; (8003980 <HAL_RCC_ClockConfig+0x270>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2201      	movs	r2, #1
 8003738:	4393      	bics	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	4b90      	ldr	r3, [pc, #576]	; (8003980 <HAL_RCC_ClockConfig+0x270>)
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003744:	f7fe fdfa 	bl	800233c <HAL_GetTick>
 8003748:	0003      	movs	r3, r0
 800374a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374c:	e009      	b.n	8003762 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374e:	f7fe fdf5 	bl	800233c <HAL_GetTick>
 8003752:	0002      	movs	r2, r0
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	4a8a      	ldr	r2, [pc, #552]	; (8003984 <HAL_RCC_ClockConfig+0x274>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e109      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b87      	ldr	r3, [pc, #540]	; (8003980 <HAL_RCC_ClockConfig+0x270>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2201      	movs	r2, #1
 8003768:	4013      	ands	r3, r2
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d1ee      	bne.n	800374e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2202      	movs	r2, #2
 8003776:	4013      	ands	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377a:	4b83      	ldr	r3, [pc, #524]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	22f0      	movs	r2, #240	; 0xf0
 8003780:	4393      	bics	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	4b7f      	ldr	r3, [pc, #508]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 800378a:	430a      	orrs	r2, r1
 800378c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2201      	movs	r2, #1
 8003794:	4013      	ands	r3, r2
 8003796:	d100      	bne.n	800379a <HAL_RCC_ClockConfig+0x8a>
 8003798:	e089      	b.n	80038ae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037a2:	4b79      	ldr	r3, [pc, #484]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	029b      	lsls	r3, r3, #10
 80037aa:	4013      	ands	r3, r2
 80037ac:	d120      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0e1      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037ba:	4b73      	ldr	r3, [pc, #460]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	049b      	lsls	r3, r3, #18
 80037c2:	4013      	ands	r3, r2
 80037c4:	d114      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0d5      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d106      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037d2:	4b6d      	ldr	r3, [pc, #436]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2204      	movs	r2, #4
 80037d8:	4013      	ands	r3, r2
 80037da:	d109      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0ca      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037e0:	4b69      	ldr	r3, [pc, #420]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4013      	ands	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0c2      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f0:	4b65      	ldr	r3, [pc, #404]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2203      	movs	r2, #3
 80037f6:	4393      	bics	r3, r2
 80037f8:	0019      	movs	r1, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	4b62      	ldr	r3, [pc, #392]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 8003800:	430a      	orrs	r2, r1
 8003802:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7fe fd9a 	bl	800233c <HAL_GetTick>
 8003808:	0003      	movs	r3, r0
 800380a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d111      	bne.n	8003838 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003814:	e009      	b.n	800382a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003816:	f7fe fd91 	bl	800233c <HAL_GetTick>
 800381a:	0002      	movs	r2, r0
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	4a58      	ldr	r2, [pc, #352]	; (8003984 <HAL_RCC_ClockConfig+0x274>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0a5      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800382a:	4b57      	ldr	r3, [pc, #348]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	220c      	movs	r2, #12
 8003830:	4013      	ands	r3, r2
 8003832:	2b08      	cmp	r3, #8
 8003834:	d1ef      	bne.n	8003816 <HAL_RCC_ClockConfig+0x106>
 8003836:	e03a      	b.n	80038ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d111      	bne.n	8003864 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003840:	e009      	b.n	8003856 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003842:	f7fe fd7b 	bl	800233c <HAL_GetTick>
 8003846:	0002      	movs	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	4a4d      	ldr	r2, [pc, #308]	; (8003984 <HAL_RCC_ClockConfig+0x274>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e08f      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003856:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	220c      	movs	r2, #12
 800385c:	4013      	ands	r3, r2
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d1ef      	bne.n	8003842 <HAL_RCC_ClockConfig+0x132>
 8003862:	e024      	b.n	80038ae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d11b      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800386c:	e009      	b.n	8003882 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386e:	f7fe fd65 	bl	800233c <HAL_GetTick>
 8003872:	0002      	movs	r2, r0
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	4a42      	ldr	r2, [pc, #264]	; (8003984 <HAL_RCC_ClockConfig+0x274>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e079      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003882:	4b41      	ldr	r3, [pc, #260]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	220c      	movs	r2, #12
 8003888:	4013      	ands	r3, r2
 800388a:	2b04      	cmp	r3, #4
 800388c:	d1ef      	bne.n	800386e <HAL_RCC_ClockConfig+0x15e>
 800388e:	e00e      	b.n	80038ae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003890:	f7fe fd54 	bl	800233c <HAL_GetTick>
 8003894:	0002      	movs	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	4a3a      	ldr	r2, [pc, #232]	; (8003984 <HAL_RCC_ClockConfig+0x274>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e068      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80038a4:	4b38      	ldr	r3, [pc, #224]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	220c      	movs	r2, #12
 80038aa:	4013      	ands	r3, r2
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ae:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCC_ClockConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2201      	movs	r2, #1
 80038b4:	4013      	ands	r3, r2
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d21e      	bcs.n	80038fa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038bc:	4b30      	ldr	r3, [pc, #192]	; (8003980 <HAL_RCC_ClockConfig+0x270>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2201      	movs	r2, #1
 80038c2:	4393      	bics	r3, r2
 80038c4:	0019      	movs	r1, r3
 80038c6:	4b2e      	ldr	r3, [pc, #184]	; (8003980 <HAL_RCC_ClockConfig+0x270>)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038ce:	f7fe fd35 	bl	800233c <HAL_GetTick>
 80038d2:	0003      	movs	r3, r0
 80038d4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	e009      	b.n	80038ec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d8:	f7fe fd30 	bl	800233c <HAL_GetTick>
 80038dc:	0002      	movs	r2, r0
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	4a28      	ldr	r2, [pc, #160]	; (8003984 <HAL_RCC_ClockConfig+0x274>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e044      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ec:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_ClockConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	4013      	ands	r3, r2
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d1ee      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2204      	movs	r2, #4
 8003900:	4013      	ands	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003904:	4b20      	ldr	r3, [pc, #128]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a20      	ldr	r2, [pc, #128]	; (800398c <HAL_RCC_ClockConfig+0x27c>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 8003914:	430a      	orrs	r2, r1
 8003916:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2208      	movs	r2, #8
 800391e:	4013      	ands	r3, r2
 8003920:	d00a      	beq.n	8003938 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003922:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <HAL_RCC_ClockConfig+0x280>)
 8003928:	4013      	ands	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	00da      	lsls	r2, r3, #3
 8003932:	4b15      	ldr	r3, [pc, #84]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 8003934:	430a      	orrs	r2, r1
 8003936:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003938:	f000 f832 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800393c:	0001      	movs	r1, r0
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_RCC_ClockConfig+0x278>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	220f      	movs	r2, #15
 8003946:	4013      	ands	r3, r2
 8003948:	4a12      	ldr	r2, [pc, #72]	; (8003994 <HAL_RCC_ClockConfig+0x284>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	000a      	movs	r2, r1
 800394e:	40da      	lsrs	r2, r3
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_RCC_ClockConfig+0x288>)
 8003952:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <HAL_RCC_ClockConfig+0x28c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	250b      	movs	r5, #11
 800395a:	197c      	adds	r4, r7, r5
 800395c:	0018      	movs	r0, r3
 800395e:	f7fe fca7 	bl	80022b0 <HAL_InitTick>
 8003962:	0003      	movs	r3, r0
 8003964:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003966:	197b      	adds	r3, r7, r5
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800396e:	197b      	adds	r3, r7, r5
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	e000      	b.n	8003976 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b004      	add	sp, #16
 800397c:	bdb0      	pop	{r4, r5, r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	40022000 	.word	0x40022000
 8003984:	00001388 	.word	0x00001388
 8003988:	40021000 	.word	0x40021000
 800398c:	fffff8ff 	.word	0xfffff8ff
 8003990:	ffffc7ff 	.word	0xffffc7ff
 8003994:	080053b8 	.word	0x080053b8
 8003998:	20000000 	.word	0x20000000
 800399c:	20000004 	.word	0x20000004

080039a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80039a6:	4b3c      	ldr	r3, [pc, #240]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	220c      	movs	r2, #12
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d013      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x3e>
 80039b6:	d85c      	bhi.n	8003a72 <HAL_RCC_GetSysClockFreq+0xd2>
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d002      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0x22>
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d00b      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x38>
 80039c0:	e057      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039c2:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2210      	movs	r2, #16
 80039c8:	4013      	ands	r3, r2
 80039ca:	d002      	beq.n	80039d2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80039cc:	4b33      	ldr	r3, [pc, #204]	; (8003a9c <HAL_RCC_GetSysClockFreq+0xfc>)
 80039ce:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80039d0:	e05d      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80039d2:	4b33      	ldr	r3, [pc, #204]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x100>)
 80039d4:	613b      	str	r3, [r7, #16]
      break;
 80039d6:	e05a      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d8:	4b32      	ldr	r3, [pc, #200]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x104>)
 80039da:	613b      	str	r3, [r7, #16]
      break;
 80039dc:	e057      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	0c9b      	lsrs	r3, r3, #18
 80039e2:	220f      	movs	r2, #15
 80039e4:	4013      	ands	r3, r2
 80039e6:	4a30      	ldr	r2, [pc, #192]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	0d9b      	lsrs	r3, r3, #22
 80039f0:	2203      	movs	r2, #3
 80039f2:	4013      	ands	r3, r2
 80039f4:	3301      	adds	r3, #1
 80039f6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039f8:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	025b      	lsls	r3, r3, #9
 8003a00:	4013      	ands	r3, r2
 8003a02:	d00f      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	000a      	movs	r2, r1
 8003a08:	0152      	lsls	r2, r2, #5
 8003a0a:	1a52      	subs	r2, r2, r1
 8003a0c:	0193      	lsls	r3, r2, #6
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	185b      	adds	r3, r3, r1
 8003a14:	025b      	lsls	r3, r3, #9
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7fc fb75 	bl	8000108 <__udivsi3>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e023      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d00f      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	000a      	movs	r2, r1
 8003a32:	0152      	lsls	r2, r2, #5
 8003a34:	1a52      	subs	r2, r2, r1
 8003a36:	0193      	lsls	r3, r2, #6
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	185b      	adds	r3, r3, r1
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7fc fb60 	bl	8000108 <__udivsi3>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	e00e      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	000a      	movs	r2, r1
 8003a52:	0152      	lsls	r2, r2, #5
 8003a54:	1a52      	subs	r2, r2, r1
 8003a56:	0193      	lsls	r3, r2, #6
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	185b      	adds	r3, r3, r1
 8003a5e:	029b      	lsls	r3, r3, #10
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	0018      	movs	r0, r3
 8003a64:	f7fc fb50 	bl	8000108 <__udivsi3>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	613b      	str	r3, [r7, #16]
      break;
 8003a70:	e00d      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a72:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	0b5b      	lsrs	r3, r3, #13
 8003a78:	2207      	movs	r2, #7
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	2280      	movs	r2, #128	; 0x80
 8003a84:	0212      	lsls	r2, r2, #8
 8003a86:	409a      	lsls	r2, r3
 8003a88:	0013      	movs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
      break;
 8003a8c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a8e:	693b      	ldr	r3, [r7, #16]
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b006      	add	sp, #24
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	003d0900 	.word	0x003d0900
 8003aa0:	00f42400 	.word	0x00f42400
 8003aa4:	007a1200 	.word	0x007a1200
 8003aa8:	080053d0 	.word	0x080053d0

08003aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab0:	4b02      	ldr	r3, [pc, #8]	; (8003abc <HAL_RCC_GetHCLKFreq+0x10>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	20000000 	.word	0x20000000

08003ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ac4:	f7ff fff2 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003ac8:	0001      	movs	r1, r0
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	2207      	movs	r2, #7
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ad6:	5cd3      	ldrb	r3, [r2, r3]
 8003ad8:	40d9      	lsrs	r1, r3
 8003ada:	000b      	movs	r3, r1
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	080053c8 	.word	0x080053c8

08003aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003af0:	f7ff ffdc 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8003af4:	0001      	movs	r1, r0
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	0adb      	lsrs	r3, r3, #11
 8003afc:	2207      	movs	r2, #7
 8003afe:	4013      	ands	r3, r2
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b02:	5cd3      	ldrb	r3, [r2, r3]
 8003b04:	40d9      	lsrs	r1, r3
 8003b06:	000b      	movs	r3, r1
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	40021000 	.word	0x40021000
 8003b14:	080053c8 	.word	0x080053c8

08003b18 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003b20:	2317      	movs	r3, #23
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d106      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d100      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003b3e:	e104      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b40:	4bb9      	ldr	r3, [pc, #740]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	055b      	lsls	r3, r3, #21
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d10a      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	4bb6      	ldr	r3, [pc, #728]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b50:	4bb5      	ldr	r3, [pc, #724]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b52:	2180      	movs	r1, #128	; 0x80
 8003b54:	0549      	lsls	r1, r1, #21
 8003b56:	430a      	orrs	r2, r1
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003b5a:	2317      	movs	r3, #23
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b62:	4bb2      	ldr	r3, [pc, #712]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d11a      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6e:	4baf      	ldr	r3, [pc, #700]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4bae      	ldr	r3, [pc, #696]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b74:	2180      	movs	r1, #128	; 0x80
 8003b76:	0049      	lsls	r1, r1, #1
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7c:	f7fe fbde 	bl	800233c <HAL_GetTick>
 8003b80:	0003      	movs	r3, r0
 8003b82:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	e008      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b86:	f7fe fbd9 	bl	800233c <HAL_GetTick>
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b64      	cmp	r3, #100	; 0x64
 8003b92:	d901      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e143      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	4ba4      	ldr	r3, [pc, #656]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003ba4:	4ba0      	ldr	r3, [pc, #640]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	23c0      	movs	r3, #192	; 0xc0
 8003baa:	039b      	lsls	r3, r3, #14
 8003bac:	4013      	ands	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	23c0      	movs	r3, #192	; 0xc0
 8003bb6:	039b      	lsls	r3, r3, #14
 8003bb8:	4013      	ands	r3, r2
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	23c0      	movs	r3, #192	; 0xc0
 8003bc6:	039b      	lsls	r3, r3, #14
 8003bc8:	4013      	ands	r3, r2
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d013      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	23c0      	movs	r3, #192	; 0xc0
 8003bd6:	029b      	lsls	r3, r3, #10
 8003bd8:	401a      	ands	r2, r3
 8003bda:	23c0      	movs	r3, #192	; 0xc0
 8003bdc:	029b      	lsls	r3, r3, #10
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d10a      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003be2:	4b91      	ldr	r3, [pc, #580]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	029b      	lsls	r3, r3, #10
 8003bea:	401a      	ands	r2, r3
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	029b      	lsls	r3, r3, #10
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e113      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003bf8:	4b8b      	ldr	r3, [pc, #556]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bfc:	23c0      	movs	r3, #192	; 0xc0
 8003bfe:	029b      	lsls	r3, r3, #10
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d049      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	23c0      	movs	r3, #192	; 0xc0
 8003c10:	029b      	lsls	r3, r3, #10
 8003c12:	4013      	ands	r3, r2
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d004      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	4013      	ands	r3, r2
 8003c22:	d10d      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	23c0      	movs	r3, #192	; 0xc0
 8003c2a:	029b      	lsls	r3, r3, #10
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d034      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d02e      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003c40:	4b79      	ldr	r3, [pc, #484]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c44:	4a7a      	ldr	r2, [pc, #488]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c4a:	4b77      	ldr	r3, [pc, #476]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c4e:	4b76      	ldr	r3, [pc, #472]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c50:	2180      	movs	r1, #128	; 0x80
 8003c52:	0309      	lsls	r1, r1, #12
 8003c54:	430a      	orrs	r2, r1
 8003c56:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c58:	4b73      	ldr	r3, [pc, #460]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c5c:	4b72      	ldr	r3, [pc, #456]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c5e:	4975      	ldr	r1, [pc, #468]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c60:	400a      	ands	r2, r1
 8003c62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003c64:	4b70      	ldr	r3, [pc, #448]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4013      	ands	r3, r2
 8003c72:	d014      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe fb62 	bl	800233c <HAL_GetTick>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c7c:	e009      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fe fb5d 	bl	800233c <HAL_GetTick>
 8003c82:	0002      	movs	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	4a6b      	ldr	r2, [pc, #428]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0c6      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c92:	4b65      	ldr	r3, [pc, #404]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d0ef      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	2380      	movs	r3, #128	; 0x80
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d01f      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	23c0      	movs	r3, #192	; 0xc0
 8003cb0:	029b      	lsls	r3, r3, #10
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	23c0      	movs	r3, #192	; 0xc0
 8003cb6:	029b      	lsls	r3, r3, #10
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d10c      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003cbc:	4b5a      	ldr	r3, [pc, #360]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a5e      	ldr	r2, [pc, #376]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	23c0      	movs	r3, #192	; 0xc0
 8003ccc:	039b      	lsls	r3, r3, #14
 8003cce:	401a      	ands	r2, r3
 8003cd0:	4b55      	ldr	r3, [pc, #340]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	4b54      	ldr	r3, [pc, #336]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cd8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	23c0      	movs	r3, #192	; 0xc0
 8003ce0:	029b      	lsls	r3, r3, #10
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	4b50      	ldr	r3, [pc, #320]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d01f      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	23c0      	movs	r3, #192	; 0xc0
 8003cfa:	029b      	lsls	r3, r3, #10
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	23c0      	movs	r3, #192	; 0xc0
 8003d00:	029b      	lsls	r3, r3, #10
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d06:	4b48      	ldr	r3, [pc, #288]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4c      	ldr	r2, [pc, #304]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	0019      	movs	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	23c0      	movs	r3, #192	; 0xc0
 8003d16:	039b      	lsls	r3, r3, #14
 8003d18:	401a      	ands	r2, r3
 8003d1a:	4b43      	ldr	r3, [pc, #268]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d22:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	23c0      	movs	r3, #192	; 0xc0
 8003d2a:	029b      	lsls	r3, r3, #10
 8003d2c:	401a      	ands	r2, r3
 8003d2e:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d30:	430a      	orrs	r2, r1
 8003d32:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d34:	2317      	movs	r3, #23
 8003d36:	18fb      	adds	r3, r7, r3
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d105      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3e:	4b3a      	ldr	r3, [pc, #232]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d44:	493e      	ldr	r1, [pc, #248]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003d46:	400a      	ands	r2, r1
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	4013      	ands	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d54:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d58:	2203      	movs	r2, #3
 8003d5a:	4393      	bics	r3, r2
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d64:	430a      	orrs	r2, r1
 8003d66:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d72:	4b2d      	ldr	r3, [pc, #180]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d76:	220c      	movs	r2, #12
 8003d78:	4393      	bics	r3, r2
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d94:	4a2b      	ldr	r2, [pc, #172]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003da0:	430a      	orrs	r2, r1
 8003da2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2208      	movs	r2, #8
 8003daa:	4013      	ands	r3, r2
 8003dac:	d009      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dae:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db2:	4a25      	ldr	r2, [pc, #148]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	0019      	movs	r1, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dce:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dde:	430a      	orrs	r2, r1
 8003de0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2240      	movs	r2, #64	; 0x40
 8003de8:	4013      	ands	r3, r2
 8003dea:	d009      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dec:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	4013      	ands	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	4a10      	ldr	r2, [pc, #64]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	0019      	movs	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1a      	ldr	r2, [r3, #32]
 8003e18:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	0018      	movs	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b006      	add	sp, #24
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	fffcffff 	.word	0xfffcffff
 8003e34:	fff7ffff 	.word	0xfff7ffff
 8003e38:	00001388 	.word	0x00001388
 8003e3c:	ffcfffff 	.word	0xffcfffff
 8003e40:	efffffff 	.word	0xefffffff
 8003e44:	fffff3ff 	.word	0xfffff3ff
 8003e48:	ffffcfff 	.word	0xffffcfff
 8003e4c:	fbffffff 	.word	0xfbffffff
 8003e50:	fff3ffff 	.word	0xfff3ffff

08003e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e032      	b.n	8003ecc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2239      	movs	r2, #57	; 0x39
 8003e6a:	5c9b      	ldrb	r3, [r3, r2]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2238      	movs	r2, #56	; 0x38
 8003e76:	2100      	movs	r1, #0
 8003e78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7fe f91b 	bl	80020b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2239      	movs	r2, #57	; 0x39
 8003e86:	2102      	movs	r1, #2
 8003e88:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3304      	adds	r3, #4
 8003e92:	0019      	movs	r1, r3
 8003e94:	0010      	movs	r0, r2
 8003e96:	f000 fa91 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	223e      	movs	r2, #62	; 0x3e
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	223a      	movs	r2, #58	; 0x3a
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	223b      	movs	r2, #59	; 0x3b
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	223c      	movs	r2, #60	; 0x3c
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	5499      	strb	r1, [r3, r2]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	223d      	movs	r2, #61	; 0x3d
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2239      	movs	r2, #57	; 0x39
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	0018      	movs	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e032      	b.n	8003f4c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2239      	movs	r2, #57	; 0x39
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d107      	bne.n	8003f02 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2238      	movs	r2, #56	; 0x38
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0018      	movs	r0, r3
 8003efe:	f000 f829 	bl	8003f54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2239      	movs	r2, #57	; 0x39
 8003f06:	2102      	movs	r1, #2
 8003f08:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	0019      	movs	r1, r3
 8003f14:	0010      	movs	r0, r2
 8003f16:	f000 fa51 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	223e      	movs	r2, #62	; 0x3e
 8003f1e:	2101      	movs	r1, #1
 8003f20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	223a      	movs	r2, #58	; 0x3a
 8003f26:	2101      	movs	r1, #1
 8003f28:	5499      	strb	r1, [r3, r2]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	223b      	movs	r2, #59	; 0x3b
 8003f2e:	2101      	movs	r1, #1
 8003f30:	5499      	strb	r1, [r3, r2]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	223c      	movs	r2, #60	; 0x3c
 8003f36:	2101      	movs	r1, #1
 8003f38:	5499      	strb	r1, [r3, r2]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	223d      	movs	r2, #61	; 0x3d
 8003f3e:	2101      	movs	r1, #1
 8003f40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2239      	movs	r2, #57	; 0x39
 8003f46:	2101      	movs	r1, #1
 8003f48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f5c:	46c0      	nop			; (mov r8, r8)
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b002      	add	sp, #8
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d108      	bne.n	8003f86 <HAL_TIM_PWM_Start+0x22>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	223a      	movs	r2, #58	; 0x3a
 8003f78:	5c9b      	ldrb	r3, [r3, r2]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	1e5a      	subs	r2, r3, #1
 8003f80:	4193      	sbcs	r3, r2
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	e01f      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x62>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d108      	bne.n	8003f9e <HAL_TIM_PWM_Start+0x3a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	223b      	movs	r2, #59	; 0x3b
 8003f90:	5c9b      	ldrb	r3, [r3, r2]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	1e5a      	subs	r2, r3, #1
 8003f98:	4193      	sbcs	r3, r2
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	e013      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x62>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d108      	bne.n	8003fb6 <HAL_TIM_PWM_Start+0x52>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	223c      	movs	r2, #60	; 0x3c
 8003fa8:	5c9b      	ldrb	r3, [r3, r2]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	1e5a      	subs	r2, r3, #1
 8003fb0:	4193      	sbcs	r3, r2
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	e007      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	223d      	movs	r2, #61	; 0x3d
 8003fba:	5c9b      	ldrb	r3, [r3, r2]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	1e5a      	subs	r2, r3, #1
 8003fc2:	4193      	sbcs	r3, r2
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e052      	b.n	8004074 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_PWM_Start+0x7a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	223a      	movs	r2, #58	; 0x3a
 8003fd8:	2102      	movs	r1, #2
 8003fda:	5499      	strb	r1, [r3, r2]
 8003fdc:	e013      	b.n	8004006 <HAL_TIM_PWM_Start+0xa2>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_PWM_Start+0x8a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	223b      	movs	r2, #59	; 0x3b
 8003fe8:	2102      	movs	r1, #2
 8003fea:	5499      	strb	r1, [r3, r2]
 8003fec:	e00b      	b.n	8004006 <HAL_TIM_PWM_Start+0xa2>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_PWM_Start+0x9a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	223c      	movs	r2, #60	; 0x3c
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	5499      	strb	r1, [r3, r2]
 8003ffc:	e003      	b.n	8004006 <HAL_TIM_PWM_Start+0xa2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	223d      	movs	r2, #61	; 0x3d
 8004002:	2102      	movs	r1, #2
 8004004:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6839      	ldr	r1, [r7, #0]
 800400c:	2201      	movs	r2, #1
 800400e:	0018      	movs	r0, r3
 8004010:	f000 fbd6 	bl	80047c0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	05db      	lsls	r3, r3, #23
 800401c:	429a      	cmp	r2, r3
 800401e:	d00e      	beq.n	800403e <HAL_TIM_PWM_Start+0xda>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a15      	ldr	r2, [pc, #84]	; (800407c <HAL_TIM_PWM_Start+0x118>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_TIM_PWM_Start+0xda>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a14      	ldr	r2, [pc, #80]	; (8004080 <HAL_TIM_PWM_Start+0x11c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_TIM_PWM_Start+0xda>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a12      	ldr	r2, [pc, #72]	; (8004084 <HAL_TIM_PWM_Start+0x120>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d111      	bne.n	8004062 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2207      	movs	r2, #7
 8004046:	4013      	ands	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b06      	cmp	r3, #6
 800404e:	d010      	beq.n	8004072 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2101      	movs	r1, #1
 800405c:	430a      	orrs	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004060:	e007      	b.n	8004072 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2101      	movs	r1, #1
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b004      	add	sp, #16
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40000400 	.word	0x40000400
 8004080:	40010800 	.word	0x40010800
 8004084:	40011400 	.word	0x40011400

08004088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004094:	2317      	movs	r3, #23
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2238      	movs	r2, #56	; 0x38
 80040a0:	5c9b      	ldrb	r3, [r3, r2]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_PWM_ConfigChannel+0x22>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e0ad      	b.n	8004206 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2238      	movs	r2, #56	; 0x38
 80040ae:	2101      	movs	r1, #1
 80040b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	d100      	bne.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x32>
 80040b8:	e076      	b.n	80041a8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	d900      	bls.n	80040c2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80040c0:	e095      	b.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x166>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d04e      	beq.n	8004166 <HAL_TIM_PWM_ConfigChannel+0xde>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d900      	bls.n	80040d0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80040ce:	e08e      	b.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x166>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_PWM_ConfigChannel+0x56>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d021      	beq.n	8004120 <HAL_TIM_PWM_ConfigChannel+0x98>
 80040dc:	e087      	b.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	0011      	movs	r1, r2
 80040e6:	0018      	movs	r0, r3
 80040e8:	f000 f9cc 	bl	8004484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2108      	movs	r1, #8
 80040f8:	430a      	orrs	r2, r1
 80040fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2104      	movs	r1, #4
 8004108:	438a      	bics	r2, r1
 800410a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6999      	ldr	r1, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	619a      	str	r2, [r3, #24]
      break;
 800411e:	e06b      	b.n	80041f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	0011      	movs	r1, r2
 8004128:	0018      	movs	r0, r3
 800412a:	f000 f9e7 	bl	80044fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699a      	ldr	r2, [r3, #24]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	0109      	lsls	r1, r1, #4
 800413c:	430a      	orrs	r2, r1
 800413e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4931      	ldr	r1, [pc, #196]	; (8004210 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800414c:	400a      	ands	r2, r1
 800414e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6999      	ldr	r1, [r3, #24]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	021a      	lsls	r2, r3, #8
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	619a      	str	r2, [r3, #24]
      break;
 8004164:	e048      	b.n	80041f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	0011      	movs	r1, r2
 800416e:	0018      	movs	r0, r3
 8004170:	f000 fa06 	bl	8004580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69da      	ldr	r2, [r3, #28]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2108      	movs	r1, #8
 8004180:	430a      	orrs	r2, r1
 8004182:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2104      	movs	r1, #4
 8004190:	438a      	bics	r2, r1
 8004192:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69d9      	ldr	r1, [r3, #28]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	61da      	str	r2, [r3, #28]
      break;
 80041a6:	e027      	b.n	80041f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	0011      	movs	r1, r2
 80041b0:	0018      	movs	r0, r3
 80041b2:	f000 fa25 	bl	8004600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2180      	movs	r1, #128	; 0x80
 80041c2:	0109      	lsls	r1, r1, #4
 80041c4:	430a      	orrs	r2, r1
 80041c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	490f      	ldr	r1, [pc, #60]	; (8004210 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80041d4:	400a      	ands	r2, r1
 80041d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69d9      	ldr	r1, [r3, #28]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	021a      	lsls	r2, r3, #8
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	61da      	str	r2, [r3, #28]
      break;
 80041ec:	e004      	b.n	80041f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80041ee:	2317      	movs	r3, #23
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	2201      	movs	r2, #1
 80041f4:	701a      	strb	r2, [r3, #0]
      break;
 80041f6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2238      	movs	r2, #56	; 0x38
 80041fc:	2100      	movs	r1, #0
 80041fe:	5499      	strb	r1, [r3, r2]

  return status;
 8004200:	2317      	movs	r3, #23
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	781b      	ldrb	r3, [r3, #0]
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b006      	add	sp, #24
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	fffffbff 	.word	0xfffffbff

08004214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	230f      	movs	r3, #15
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	2200      	movs	r2, #0
 8004224:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2238      	movs	r2, #56	; 0x38
 800422a:	5c9b      	ldrb	r3, [r3, r2]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIM_ConfigClockSource+0x20>
 8004230:	2302      	movs	r3, #2
 8004232:	e0bc      	b.n	80043ae <HAL_TIM_ConfigClockSource+0x19a>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2238      	movs	r2, #56	; 0x38
 8004238:	2101      	movs	r1, #1
 800423a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2239      	movs	r2, #57	; 0x39
 8004240:	2102      	movs	r1, #2
 8004242:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2277      	movs	r2, #119	; 0x77
 8004250:	4393      	bics	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4a58      	ldr	r2, [pc, #352]	; (80043b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004258:	4013      	ands	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2280      	movs	r2, #128	; 0x80
 800426a:	0192      	lsls	r2, r2, #6
 800426c:	4293      	cmp	r3, r2
 800426e:	d040      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0xde>
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	0192      	lsls	r2, r2, #6
 8004274:	4293      	cmp	r3, r2
 8004276:	d900      	bls.n	800427a <HAL_TIM_ConfigClockSource+0x66>
 8004278:	e088      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 800427a:	2280      	movs	r2, #128	; 0x80
 800427c:	0152      	lsls	r2, r2, #5
 800427e:	4293      	cmp	r3, r2
 8004280:	d100      	bne.n	8004284 <HAL_TIM_ConfigClockSource+0x70>
 8004282:	e088      	b.n	8004396 <HAL_TIM_ConfigClockSource+0x182>
 8004284:	2280      	movs	r2, #128	; 0x80
 8004286:	0152      	lsls	r2, r2, #5
 8004288:	4293      	cmp	r3, r2
 800428a:	d900      	bls.n	800428e <HAL_TIM_ConfigClockSource+0x7a>
 800428c:	e07e      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 800428e:	2b70      	cmp	r3, #112	; 0x70
 8004290:	d018      	beq.n	80042c4 <HAL_TIM_ConfigClockSource+0xb0>
 8004292:	d900      	bls.n	8004296 <HAL_TIM_ConfigClockSource+0x82>
 8004294:	e07a      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 8004296:	2b60      	cmp	r3, #96	; 0x60
 8004298:	d04f      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x126>
 800429a:	d900      	bls.n	800429e <HAL_TIM_ConfigClockSource+0x8a>
 800429c:	e076      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 800429e:	2b50      	cmp	r3, #80	; 0x50
 80042a0:	d03b      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x106>
 80042a2:	d900      	bls.n	80042a6 <HAL_TIM_ConfigClockSource+0x92>
 80042a4:	e072      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 80042a6:	2b40      	cmp	r3, #64	; 0x40
 80042a8:	d057      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x146>
 80042aa:	d900      	bls.n	80042ae <HAL_TIM_ConfigClockSource+0x9a>
 80042ac:	e06e      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 80042ae:	2b30      	cmp	r3, #48	; 0x30
 80042b0:	d063      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x166>
 80042b2:	d86b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d060      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x166>
 80042b8:	d868      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x178>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d05d      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x166>
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d05b      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x166>
 80042c2:	e063      	b.n	800438c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042d4:	f000 fa54 	bl	8004780 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2277      	movs	r2, #119	; 0x77
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	609a      	str	r2, [r3, #8]
      break;
 80042f0:	e052      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004302:	f000 fa3d 	bl	8004780 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2180      	movs	r1, #128	; 0x80
 8004312:	01c9      	lsls	r1, r1, #7
 8004314:	430a      	orrs	r2, r1
 8004316:	609a      	str	r2, [r3, #8]
      break;
 8004318:	e03e      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	001a      	movs	r2, r3
 8004328:	f000 f9b0 	bl	800468c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2150      	movs	r1, #80	; 0x50
 8004332:	0018      	movs	r0, r3
 8004334:	f000 fa0a 	bl	800474c <TIM_ITRx_SetConfig>
      break;
 8004338:	e02e      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004346:	001a      	movs	r2, r3
 8004348:	f000 f9ce 	bl	80046e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2160      	movs	r1, #96	; 0x60
 8004352:	0018      	movs	r0, r3
 8004354:	f000 f9fa 	bl	800474c <TIM_ITRx_SetConfig>
      break;
 8004358:	e01e      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	001a      	movs	r2, r3
 8004368:	f000 f990 	bl	800468c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	0018      	movs	r0, r3
 8004374:	f000 f9ea 	bl	800474c <TIM_ITRx_SetConfig>
      break;
 8004378:	e00e      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	0019      	movs	r1, r3
 8004384:	0010      	movs	r0, r2
 8004386:	f000 f9e1 	bl	800474c <TIM_ITRx_SetConfig>
      break;
 800438a:	e005      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800438c:	230f      	movs	r3, #15
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
      break;
 8004394:	e000      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004396:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2239      	movs	r2, #57	; 0x39
 800439c:	2101      	movs	r1, #1
 800439e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2238      	movs	r2, #56	; 0x38
 80043a4:	2100      	movs	r1, #0
 80043a6:	5499      	strb	r1, [r3, r2]

  return status;
 80043a8:	230f      	movs	r3, #15
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	781b      	ldrb	r3, [r3, #0]
}
 80043ae:	0018      	movs	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b004      	add	sp, #16
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	ffff00ff 	.word	0xffff00ff

080043bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	05db      	lsls	r3, r3, #23
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d00b      	beq.n	80043ee <TIM_Base_SetConfig+0x32>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a26      	ldr	r2, [pc, #152]	; (8004474 <TIM_Base_SetConfig+0xb8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <TIM_Base_SetConfig+0x32>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a25      	ldr	r2, [pc, #148]	; (8004478 <TIM_Base_SetConfig+0xbc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_Base_SetConfig+0x32>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a24      	ldr	r2, [pc, #144]	; (800447c <TIM_Base_SetConfig+0xc0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d108      	bne.n	8004400 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2270      	movs	r2, #112	; 0x70
 80043f2:	4393      	bics	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	05db      	lsls	r3, r3, #23
 8004406:	429a      	cmp	r2, r3
 8004408:	d00b      	beq.n	8004422 <TIM_Base_SetConfig+0x66>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a19      	ldr	r2, [pc, #100]	; (8004474 <TIM_Base_SetConfig+0xb8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d007      	beq.n	8004422 <TIM_Base_SetConfig+0x66>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a18      	ldr	r2, [pc, #96]	; (8004478 <TIM_Base_SetConfig+0xbc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d003      	beq.n	8004422 <TIM_Base_SetConfig+0x66>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a17      	ldr	r2, [pc, #92]	; (800447c <TIM_Base_SetConfig+0xc0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d108      	bne.n	8004434 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a16      	ldr	r2, [pc, #88]	; (8004480 <TIM_Base_SetConfig+0xc4>)
 8004426:	4013      	ands	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	4393      	bics	r3, r2
 800443a:	001a      	movs	r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2204      	movs	r2, #4
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	601a      	str	r2, [r3, #0]
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	b004      	add	sp, #16
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40000400 	.word	0x40000400
 8004478:	40010800 	.word	0x40010800
 800447c:	40011400 	.word	0x40011400
 8004480:	fffffcff 	.word	0xfffffcff

08004484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	2201      	movs	r2, #1
 800449a:	4393      	bics	r3, r2
 800449c:	001a      	movs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2270      	movs	r2, #112	; 0x70
 80044b2:	4393      	bics	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2203      	movs	r2, #3
 80044ba:	4393      	bics	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2202      	movs	r2, #2
 80044cc:	4393      	bics	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	621a      	str	r2, [r3, #32]
}
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b006      	add	sp, #24
 80044fa:	bd80      	pop	{r7, pc}

080044fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	2210      	movs	r2, #16
 8004512:	4393      	bics	r3, r2
 8004514:	001a      	movs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <TIM_OC2_SetConfig+0x7c>)
 800452a:	4013      	ands	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a12      	ldr	r2, [pc, #72]	; (800457c <TIM_OC2_SetConfig+0x80>)
 8004532:	4013      	ands	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2220      	movs	r2, #32
 8004546:	4393      	bics	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	46c0      	nop			; (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b006      	add	sp, #24
 8004576:	bd80      	pop	{r7, pc}
 8004578:	ffff8fff 	.word	0xffff8fff
 800457c:	fffffcff 	.word	0xfffffcff

08004580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <TIM_OC3_SetConfig+0x78>)
 8004596:	401a      	ands	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2270      	movs	r2, #112	; 0x70
 80045ac:	4393      	bics	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2203      	movs	r2, #3
 80045b4:	4393      	bics	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <TIM_OC3_SetConfig+0x7c>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	621a      	str	r2, [r3, #32]
}
 80045f0:	46c0      	nop			; (mov r8, r8)
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b006      	add	sp, #24
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	fffffeff 	.word	0xfffffeff
 80045fc:	fffffdff 	.word	0xfffffdff

08004600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <TIM_OC4_SetConfig+0x7c>)
 8004616:	401a      	ands	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a15      	ldr	r2, [pc, #84]	; (8004680 <TIM_OC4_SetConfig+0x80>)
 800462c:	4013      	ands	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a14      	ldr	r2, [pc, #80]	; (8004684 <TIM_OC4_SetConfig+0x84>)
 8004634:	4013      	ands	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	4a10      	ldr	r2, [pc, #64]	; (8004688 <TIM_OC4_SetConfig+0x88>)
 8004648:	4013      	ands	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	031b      	lsls	r3, r3, #12
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	621a      	str	r2, [r3, #32]
}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	b006      	add	sp, #24
 8004678:	bd80      	pop	{r7, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	ffffefff 	.word	0xffffefff
 8004680:	ffff8fff 	.word	0xffff8fff
 8004684:	fffffcff 	.word	0xfffffcff
 8004688:	ffffdfff 	.word	0xffffdfff

0800468c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	2201      	movs	r2, #1
 80046a4:	4393      	bics	r3, r2
 80046a6:	001a      	movs	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	22f0      	movs	r2, #240	; 0xf0
 80046b6:	4393      	bics	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	220a      	movs	r2, #10
 80046c8:	4393      	bics	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	621a      	str	r2, [r3, #32]
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b006      	add	sp, #24
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	2210      	movs	r2, #16
 8004700:	4393      	bics	r3, r2
 8004702:	001a      	movs	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4a0d      	ldr	r2, [pc, #52]	; (8004748 <TIM_TI2_ConfigInputStage+0x60>)
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	031b      	lsls	r3, r3, #12
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	22a0      	movs	r2, #160	; 0xa0
 8004724:	4393      	bics	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	46bd      	mov	sp, r7
 8004742:	b006      	add	sp, #24
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	ffff0fff 	.word	0xffff0fff

0800474c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2270      	movs	r2, #112	; 0x70
 8004760:	4393      	bics	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	2207      	movs	r2, #7
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	609a      	str	r2, [r3, #8]
}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	46bd      	mov	sp, r7
 800477a:	b004      	add	sp, #16
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	4a09      	ldr	r2, [pc, #36]	; (80047bc <TIM_ETR_SetConfig+0x3c>)
 8004798:	4013      	ands	r3, r2
 800479a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	021a      	lsls	r2, r3, #8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	46c0      	nop			; (mov r8, r8)
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b006      	add	sp, #24
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	ffff00ff 	.word	0xffff00ff

080047c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	221f      	movs	r2, #31
 80047d0:	4013      	ands	r3, r2
 80047d2:	2201      	movs	r2, #1
 80047d4:	409a      	lsls	r2, r3
 80047d6:	0013      	movs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	43d2      	mvns	r2, r2
 80047e2:	401a      	ands	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a1a      	ldr	r2, [r3, #32]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	211f      	movs	r1, #31
 80047f0:	400b      	ands	r3, r1
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4099      	lsls	r1, r3
 80047f6:	000b      	movs	r3, r1
 80047f8:	431a      	orrs	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	b006      	add	sp, #24
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2238      	movs	r2, #56	; 0x38
 8004816:	5c9b      	ldrb	r3, [r3, r2]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800481c:	2302      	movs	r3, #2
 800481e:	e047      	b.n	80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2238      	movs	r2, #56	; 0x38
 8004824:	2101      	movs	r1, #1
 8004826:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2239      	movs	r2, #57	; 0x39
 800482c:	2102      	movs	r1, #2
 800482e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2270      	movs	r2, #112	; 0x70
 8004844:	4393      	bics	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	05db      	lsls	r3, r3, #23
 8004862:	429a      	cmp	r2, r3
 8004864:	d00e      	beq.n	8004884 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d009      	beq.n	8004884 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a11      	ldr	r2, [pc, #68]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d10c      	bne.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2280      	movs	r2, #128	; 0x80
 8004888:	4393      	bics	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	4313      	orrs	r3, r2
 8004894:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2239      	movs	r2, #57	; 0x39
 80048a2:	2101      	movs	r1, #1
 80048a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2238      	movs	r2, #56	; 0x38
 80048aa:	2100      	movs	r1, #0
 80048ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b004      	add	sp, #16
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40010800 	.word	0x40010800
 80048c0:	40011400 	.word	0x40011400

080048c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e044      	b.n	8004960 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d107      	bne.n	80048ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2278      	movs	r2, #120	; 0x78
 80048e2:	2100      	movs	r1, #0
 80048e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f7fd fc37 	bl	800215c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2224      	movs	r2, #36	; 0x24
 80048f2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2101      	movs	r1, #1
 8004900:	438a      	bics	r2, r1
 8004902:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	0018      	movs	r0, r3
 8004910:	f000 faca 	bl	8004ea8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	0018      	movs	r0, r3
 8004918:	f000 f828 	bl	800496c <UART_SetConfig>
 800491c:	0003      	movs	r3, r0
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e01c      	b.n	8004960 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	490d      	ldr	r1, [pc, #52]	; (8004968 <HAL_UART_Init+0xa4>)
 8004932:	400a      	ands	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	212a      	movs	r1, #42	; 0x2a
 8004942:	438a      	bics	r2, r1
 8004944:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2101      	movs	r1, #1
 8004952:	430a      	orrs	r2, r1
 8004954:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0018      	movs	r0, r3
 800495a:	f000 fb59 	bl	8005010 <UART_CheckIdleState>
 800495e:	0003      	movs	r3, r0
}
 8004960:	0018      	movs	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	b002      	add	sp, #8
 8004966:	bd80      	pop	{r7, pc}
 8004968:	ffffb7ff 	.word	0xffffb7ff

0800496c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800496c:	b5b0      	push	{r4, r5, r7, lr}
 800496e:	b08e      	sub	sp, #56	; 0x38
 8004970:	af00      	add	r7, sp, #0
 8004972:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004974:	231a      	movs	r3, #26
 8004976:	2218      	movs	r2, #24
 8004978:	189b      	adds	r3, r3, r2
 800497a:	19db      	adds	r3, r3, r7
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	431a      	orrs	r2, r3
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	431a      	orrs	r2, r3
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	4313      	orrs	r3, r2
 8004996:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4ac3      	ldr	r2, [pc, #780]	; (8004cac <UART_SetConfig+0x340>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	4abe      	ldr	r2, [pc, #760]	; (8004cb0 <UART_SetConfig+0x344>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	0019      	movs	r1, r3
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4ab8      	ldr	r2, [pc, #736]	; (8004cb4 <UART_SetConfig+0x348>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d004      	beq.n	80049e0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049dc:	4313      	orrs	r3, r2
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	4ab4      	ldr	r2, [pc, #720]	; (8004cb8 <UART_SetConfig+0x34c>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f2:	430a      	orrs	r2, r1
 80049f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4ab0      	ldr	r2, [pc, #704]	; (8004cbc <UART_SetConfig+0x350>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d131      	bne.n	8004a64 <UART_SetConfig+0xf8>
 8004a00:	4baf      	ldr	r3, [pc, #700]	; (8004cc0 <UART_SetConfig+0x354>)
 8004a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a04:	2203      	movs	r2, #3
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d01d      	beq.n	8004a48 <UART_SetConfig+0xdc>
 8004a0c:	d823      	bhi.n	8004a56 <UART_SetConfig+0xea>
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d00c      	beq.n	8004a2c <UART_SetConfig+0xc0>
 8004a12:	d820      	bhi.n	8004a56 <UART_SetConfig+0xea>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <UART_SetConfig+0xb2>
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d00e      	beq.n	8004a3a <UART_SetConfig+0xce>
 8004a1c:	e01b      	b.n	8004a56 <UART_SetConfig+0xea>
 8004a1e:	231b      	movs	r3, #27
 8004a20:	2218      	movs	r2, #24
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	19db      	adds	r3, r3, r7
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e0b4      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004a2c:	231b      	movs	r3, #27
 8004a2e:	2218      	movs	r2, #24
 8004a30:	189b      	adds	r3, r3, r2
 8004a32:	19db      	adds	r3, r3, r7
 8004a34:	2202      	movs	r2, #2
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e0ad      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004a3a:	231b      	movs	r3, #27
 8004a3c:	2218      	movs	r2, #24
 8004a3e:	189b      	adds	r3, r3, r2
 8004a40:	19db      	adds	r3, r3, r7
 8004a42:	2204      	movs	r2, #4
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	e0a6      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004a48:	231b      	movs	r3, #27
 8004a4a:	2218      	movs	r2, #24
 8004a4c:	189b      	adds	r3, r3, r2
 8004a4e:	19db      	adds	r3, r3, r7
 8004a50:	2208      	movs	r2, #8
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e09f      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004a56:	231b      	movs	r3, #27
 8004a58:	2218      	movs	r2, #24
 8004a5a:	189b      	adds	r3, r3, r2
 8004a5c:	19db      	adds	r3, r3, r7
 8004a5e:	2210      	movs	r2, #16
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	e098      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a96      	ldr	r2, [pc, #600]	; (8004cc4 <UART_SetConfig+0x358>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d131      	bne.n	8004ad2 <UART_SetConfig+0x166>
 8004a6e:	4b94      	ldr	r3, [pc, #592]	; (8004cc0 <UART_SetConfig+0x354>)
 8004a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a72:	220c      	movs	r2, #12
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b0c      	cmp	r3, #12
 8004a78:	d01d      	beq.n	8004ab6 <UART_SetConfig+0x14a>
 8004a7a:	d823      	bhi.n	8004ac4 <UART_SetConfig+0x158>
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d00c      	beq.n	8004a9a <UART_SetConfig+0x12e>
 8004a80:	d820      	bhi.n	8004ac4 <UART_SetConfig+0x158>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <UART_SetConfig+0x120>
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d00e      	beq.n	8004aa8 <UART_SetConfig+0x13c>
 8004a8a:	e01b      	b.n	8004ac4 <UART_SetConfig+0x158>
 8004a8c:	231b      	movs	r3, #27
 8004a8e:	2218      	movs	r2, #24
 8004a90:	189b      	adds	r3, r3, r2
 8004a92:	19db      	adds	r3, r3, r7
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
 8004a98:	e07d      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004a9a:	231b      	movs	r3, #27
 8004a9c:	2218      	movs	r2, #24
 8004a9e:	189b      	adds	r3, r3, r2
 8004aa0:	19db      	adds	r3, r3, r7
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e076      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004aa8:	231b      	movs	r3, #27
 8004aaa:	2218      	movs	r2, #24
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	19db      	adds	r3, r3, r7
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e06f      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004ab6:	231b      	movs	r3, #27
 8004ab8:	2218      	movs	r2, #24
 8004aba:	189b      	adds	r3, r3, r2
 8004abc:	19db      	adds	r3, r3, r7
 8004abe:	2208      	movs	r2, #8
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	e068      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004ac4:	231b      	movs	r3, #27
 8004ac6:	2218      	movs	r2, #24
 8004ac8:	189b      	adds	r3, r3, r2
 8004aca:	19db      	adds	r3, r3, r7
 8004acc:	2210      	movs	r2, #16
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	e061      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7c      	ldr	r2, [pc, #496]	; (8004cc8 <UART_SetConfig+0x35c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d106      	bne.n	8004aea <UART_SetConfig+0x17e>
 8004adc:	231b      	movs	r3, #27
 8004ade:	2218      	movs	r2, #24
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	19db      	adds	r3, r3, r7
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	e055      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a77      	ldr	r2, [pc, #476]	; (8004ccc <UART_SetConfig+0x360>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d106      	bne.n	8004b02 <UART_SetConfig+0x196>
 8004af4:	231b      	movs	r3, #27
 8004af6:	2218      	movs	r2, #24
 8004af8:	189b      	adds	r3, r3, r2
 8004afa:	19db      	adds	r3, r3, r7
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e049      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a6b      	ldr	r2, [pc, #428]	; (8004cb4 <UART_SetConfig+0x348>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d13e      	bne.n	8004b8a <UART_SetConfig+0x21e>
 8004b0c:	4b6c      	ldr	r3, [pc, #432]	; (8004cc0 <UART_SetConfig+0x354>)
 8004b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b10:	23c0      	movs	r3, #192	; 0xc0
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	4013      	ands	r3, r2
 8004b16:	22c0      	movs	r2, #192	; 0xc0
 8004b18:	0112      	lsls	r2, r2, #4
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d027      	beq.n	8004b6e <UART_SetConfig+0x202>
 8004b1e:	22c0      	movs	r2, #192	; 0xc0
 8004b20:	0112      	lsls	r2, r2, #4
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d82a      	bhi.n	8004b7c <UART_SetConfig+0x210>
 8004b26:	2280      	movs	r2, #128	; 0x80
 8004b28:	0112      	lsls	r2, r2, #4
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d011      	beq.n	8004b52 <UART_SetConfig+0x1e6>
 8004b2e:	2280      	movs	r2, #128	; 0x80
 8004b30:	0112      	lsls	r2, r2, #4
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d822      	bhi.n	8004b7c <UART_SetConfig+0x210>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d004      	beq.n	8004b44 <UART_SetConfig+0x1d8>
 8004b3a:	2280      	movs	r2, #128	; 0x80
 8004b3c:	00d2      	lsls	r2, r2, #3
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <UART_SetConfig+0x1f4>
 8004b42:	e01b      	b.n	8004b7c <UART_SetConfig+0x210>
 8004b44:	231b      	movs	r3, #27
 8004b46:	2218      	movs	r2, #24
 8004b48:	189b      	adds	r3, r3, r2
 8004b4a:	19db      	adds	r3, r3, r7
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	e021      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004b52:	231b      	movs	r3, #27
 8004b54:	2218      	movs	r2, #24
 8004b56:	189b      	adds	r3, r3, r2
 8004b58:	19db      	adds	r3, r3, r7
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	e01a      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004b60:	231b      	movs	r3, #27
 8004b62:	2218      	movs	r2, #24
 8004b64:	189b      	adds	r3, r3, r2
 8004b66:	19db      	adds	r3, r3, r7
 8004b68:	2204      	movs	r2, #4
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	e013      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004b6e:	231b      	movs	r3, #27
 8004b70:	2218      	movs	r2, #24
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	19db      	adds	r3, r3, r7
 8004b76:	2208      	movs	r2, #8
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e00c      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004b7c:	231b      	movs	r3, #27
 8004b7e:	2218      	movs	r2, #24
 8004b80:	189b      	adds	r3, r3, r2
 8004b82:	19db      	adds	r3, r3, r7
 8004b84:	2210      	movs	r2, #16
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	e005      	b.n	8004b96 <UART_SetConfig+0x22a>
 8004b8a:	231b      	movs	r3, #27
 8004b8c:	2218      	movs	r2, #24
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	19db      	adds	r3, r3, r7
 8004b92:	2210      	movs	r2, #16
 8004b94:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a46      	ldr	r2, [pc, #280]	; (8004cb4 <UART_SetConfig+0x348>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d000      	beq.n	8004ba2 <UART_SetConfig+0x236>
 8004ba0:	e09a      	b.n	8004cd8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ba2:	231b      	movs	r3, #27
 8004ba4:	2218      	movs	r2, #24
 8004ba6:	189b      	adds	r3, r3, r2
 8004ba8:	19db      	adds	r3, r3, r7
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d01d      	beq.n	8004bec <UART_SetConfig+0x280>
 8004bb0:	dc20      	bgt.n	8004bf4 <UART_SetConfig+0x288>
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d015      	beq.n	8004be2 <UART_SetConfig+0x276>
 8004bb6:	dc1d      	bgt.n	8004bf4 <UART_SetConfig+0x288>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <UART_SetConfig+0x256>
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d005      	beq.n	8004bcc <UART_SetConfig+0x260>
 8004bc0:	e018      	b.n	8004bf4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc2:	f7fe ff7d 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bca:	e01c      	b.n	8004c06 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bcc:	4b3c      	ldr	r3, [pc, #240]	; (8004cc0 <UART_SetConfig+0x354>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d002      	beq.n	8004bdc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004bd6:	4b3e      	ldr	r3, [pc, #248]	; (8004cd0 <UART_SetConfig+0x364>)
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bda:	e014      	b.n	8004c06 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004bdc:	4b3d      	ldr	r3, [pc, #244]	; (8004cd4 <UART_SetConfig+0x368>)
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004be0:	e011      	b.n	8004c06 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be2:	f7fe fedd 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8004be6:	0003      	movs	r3, r0
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bea:	e00c      	b.n	8004c06 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bec:	2380      	movs	r3, #128	; 0x80
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bf2:	e008      	b.n	8004c06 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004bf8:	231a      	movs	r3, #26
 8004bfa:	2218      	movs	r2, #24
 8004bfc:	189b      	adds	r3, r3, r2
 8004bfe:	19db      	adds	r3, r3, r7
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]
        break;
 8004c04:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d100      	bne.n	8004c0e <UART_SetConfig+0x2a2>
 8004c0c:	e133      	b.n	8004e76 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	0013      	movs	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d305      	bcc.n	8004c2a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d906      	bls.n	8004c38 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004c2a:	231a      	movs	r3, #26
 8004c2c:	2218      	movs	r2, #24
 8004c2e:	189b      	adds	r3, r3, r2
 8004c30:	19db      	adds	r3, r3, r7
 8004c32:	2201      	movs	r2, #1
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e11e      	b.n	8004e76 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	6939      	ldr	r1, [r7, #16]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	000b      	movs	r3, r1
 8004c46:	0e1b      	lsrs	r3, r3, #24
 8004c48:	0010      	movs	r0, r2
 8004c4a:	0205      	lsls	r5, r0, #8
 8004c4c:	431d      	orrs	r5, r3
 8004c4e:	000b      	movs	r3, r1
 8004c50:	021c      	lsls	r4, r3, #8
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68b8      	ldr	r0, [r7, #8]
 8004c60:	68f9      	ldr	r1, [r7, #12]
 8004c62:	1900      	adds	r0, r0, r4
 8004c64:	4169      	adcs	r1, r5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	607b      	str	r3, [r7, #4]
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f7fb fad4 	bl	8000220 <__aeabi_uldivmod>
 8004c78:	0002      	movs	r2, r0
 8004c7a:	000b      	movs	r3, r1
 8004c7c:	0013      	movs	r3, r2
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c82:	23c0      	movs	r3, #192	; 0xc0
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d309      	bcc.n	8004c9e <UART_SetConfig+0x332>
 8004c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	035b      	lsls	r3, r3, #13
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d204      	bcs.n	8004c9e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c9a:	60da      	str	r2, [r3, #12]
 8004c9c:	e0eb      	b.n	8004e76 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004c9e:	231a      	movs	r3, #26
 8004ca0:	2218      	movs	r2, #24
 8004ca2:	189b      	adds	r3, r3, r2
 8004ca4:	19db      	adds	r3, r3, r7
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e0e4      	b.n	8004e76 <UART_SetConfig+0x50a>
 8004cac:	efff69f3 	.word	0xefff69f3
 8004cb0:	ffffcfff 	.word	0xffffcfff
 8004cb4:	40004800 	.word	0x40004800
 8004cb8:	fffff4ff 	.word	0xfffff4ff
 8004cbc:	40013800 	.word	0x40013800
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	40004400 	.word	0x40004400
 8004cc8:	40004c00 	.word	0x40004c00
 8004ccc:	40005000 	.word	0x40005000
 8004cd0:	003d0900 	.word	0x003d0900
 8004cd4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	69da      	ldr	r2, [r3, #28]
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d000      	beq.n	8004ce6 <UART_SetConfig+0x37a>
 8004ce4:	e070      	b.n	8004dc8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004ce6:	231b      	movs	r3, #27
 8004ce8:	2218      	movs	r2, #24
 8004cea:	189b      	adds	r3, r3, r2
 8004cec:	19db      	adds	r3, r3, r7
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d822      	bhi.n	8004d3a <UART_SetConfig+0x3ce>
 8004cf4:	009a      	lsls	r2, r3, #2
 8004cf6:	4b67      	ldr	r3, [pc, #412]	; (8004e94 <UART_SetConfig+0x528>)
 8004cf8:	18d3      	adds	r3, r2, r3
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cfe:	f7fe fedf 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8004d02:	0003      	movs	r3, r0
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d06:	e021      	b.n	8004d4c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d08:	f7fe fef0 	bl	8003aec <HAL_RCC_GetPCLK2Freq>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d10:	e01c      	b.n	8004d4c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d12:	4b61      	ldr	r3, [pc, #388]	; (8004e98 <UART_SetConfig+0x52c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2210      	movs	r2, #16
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d002      	beq.n	8004d22 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d1c:	4b5f      	ldr	r3, [pc, #380]	; (8004e9c <UART_SetConfig+0x530>)
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d20:	e014      	b.n	8004d4c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004d22:	4b5f      	ldr	r3, [pc, #380]	; (8004ea0 <UART_SetConfig+0x534>)
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d26:	e011      	b.n	8004d4c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d28:	f7fe fe3a 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d30:	e00c      	b.n	8004d4c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	2380      	movs	r3, #128	; 0x80
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d38:	e008      	b.n	8004d4c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d3e:	231a      	movs	r3, #26
 8004d40:	2218      	movs	r2, #24
 8004d42:	189b      	adds	r3, r3, r2
 8004d44:	19db      	adds	r3, r3, r7
 8004d46:	2201      	movs	r2, #1
 8004d48:	701a      	strb	r2, [r3, #0]
        break;
 8004d4a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d100      	bne.n	8004d54 <UART_SetConfig+0x3e8>
 8004d52:	e090      	b.n	8004e76 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	005a      	lsls	r2, r3, #1
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	085b      	lsrs	r3, r3, #1
 8004d5e:	18d2      	adds	r2, r2, r3
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	0019      	movs	r1, r3
 8004d66:	0010      	movs	r0, r2
 8004d68:	f7fb f9ce 	bl	8000108 <__udivsi3>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	2b0f      	cmp	r3, #15
 8004d74:	d921      	bls.n	8004dba <UART_SetConfig+0x44e>
 8004d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	025b      	lsls	r3, r3, #9
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d21c      	bcs.n	8004dba <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	200e      	movs	r0, #14
 8004d86:	2418      	movs	r4, #24
 8004d88:	1903      	adds	r3, r0, r4
 8004d8a:	19db      	adds	r3, r3, r7
 8004d8c:	210f      	movs	r1, #15
 8004d8e:	438a      	bics	r2, r1
 8004d90:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2207      	movs	r2, #7
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b299      	uxth	r1, r3
 8004d9e:	1903      	adds	r3, r0, r4
 8004da0:	19db      	adds	r3, r3, r7
 8004da2:	1902      	adds	r2, r0, r4
 8004da4:	19d2      	adds	r2, r2, r7
 8004da6:	8812      	ldrh	r2, [r2, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	1902      	adds	r2, r0, r4
 8004db2:	19d2      	adds	r2, r2, r7
 8004db4:	8812      	ldrh	r2, [r2, #0]
 8004db6:	60da      	str	r2, [r3, #12]
 8004db8:	e05d      	b.n	8004e76 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004dba:	231a      	movs	r3, #26
 8004dbc:	2218      	movs	r2, #24
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	19db      	adds	r3, r3, r7
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e056      	b.n	8004e76 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dc8:	231b      	movs	r3, #27
 8004dca:	2218      	movs	r2, #24
 8004dcc:	189b      	adds	r3, r3, r2
 8004dce:	19db      	adds	r3, r3, r7
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d822      	bhi.n	8004e1c <UART_SetConfig+0x4b0>
 8004dd6:	009a      	lsls	r2, r3, #2
 8004dd8:	4b32      	ldr	r3, [pc, #200]	; (8004ea4 <UART_SetConfig+0x538>)
 8004dda:	18d3      	adds	r3, r2, r3
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de0:	f7fe fe6e 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 8004de4:	0003      	movs	r3, r0
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004de8:	e021      	b.n	8004e2e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dea:	f7fe fe7f 	bl	8003aec <HAL_RCC_GetPCLK2Freq>
 8004dee:	0003      	movs	r3, r0
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004df2:	e01c      	b.n	8004e2e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004df4:	4b28      	ldr	r3, [pc, #160]	; (8004e98 <UART_SetConfig+0x52c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2210      	movs	r2, #16
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d002      	beq.n	8004e04 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004dfe:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <UART_SetConfig+0x530>)
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e02:	e014      	b.n	8004e2e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004e04:	4b26      	ldr	r3, [pc, #152]	; (8004ea0 <UART_SetConfig+0x534>)
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e08:	e011      	b.n	8004e2e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e0a:	f7fe fdc9 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8004e0e:	0003      	movs	r3, r0
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e12:	e00c      	b.n	8004e2e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e1a:	e008      	b.n	8004e2e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e20:	231a      	movs	r3, #26
 8004e22:	2218      	movs	r2, #24
 8004e24:	189b      	adds	r3, r3, r2
 8004e26:	19db      	adds	r3, r3, r7
 8004e28:	2201      	movs	r2, #1
 8004e2a:	701a      	strb	r2, [r3, #0]
        break;
 8004e2c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	085a      	lsrs	r2, r3, #1
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	18d2      	adds	r2, r2, r3
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	0019      	movs	r1, r3
 8004e44:	0010      	movs	r0, r2
 8004e46:	f7fb f95f 	bl	8000108 <__udivsi3>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	2b0f      	cmp	r3, #15
 8004e52:	d90a      	bls.n	8004e6a <UART_SetConfig+0x4fe>
 8004e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e56:	2380      	movs	r3, #128	; 0x80
 8004e58:	025b      	lsls	r3, r3, #9
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d205      	bcs.n	8004e6a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60da      	str	r2, [r3, #12]
 8004e68:	e005      	b.n	8004e76 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004e6a:	231a      	movs	r3, #26
 8004e6c:	2218      	movs	r2, #24
 8004e6e:	189b      	adds	r3, r3, r2
 8004e70:	19db      	adds	r3, r3, r7
 8004e72:	2201      	movs	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e82:	231a      	movs	r3, #26
 8004e84:	2218      	movs	r2, #24
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	19db      	adds	r3, r3, r7
 8004e8a:	781b      	ldrb	r3, [r3, #0]
}
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b00e      	add	sp, #56	; 0x38
 8004e92:	bdb0      	pop	{r4, r5, r7, pc}
 8004e94:	080053dc 	.word	0x080053dc
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	003d0900 	.word	0x003d0900
 8004ea0:	00f42400 	.word	0x00f42400
 8004ea4:	08005400 	.word	0x08005400

08004ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	2208      	movs	r2, #8
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d00b      	beq.n	8004ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4a4a      	ldr	r2, [pc, #296]	; (8004fec <UART_AdvFeatureConfig+0x144>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	0019      	movs	r1, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4a43      	ldr	r2, [pc, #268]	; (8004ff0 <UART_AdvFeatureConfig+0x148>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2202      	movs	r2, #2
 8004efa:	4013      	ands	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4a3b      	ldr	r2, [pc, #236]	; (8004ff4 <UART_AdvFeatureConfig+0x14c>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	0019      	movs	r1, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4a34      	ldr	r2, [pc, #208]	; (8004ff8 <UART_AdvFeatureConfig+0x150>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	0019      	movs	r1, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2210      	movs	r2, #16
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d00b      	beq.n	8004f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <UART_AdvFeatureConfig+0x154>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2220      	movs	r2, #32
 8004f60:	4013      	ands	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	4a25      	ldr	r2, [pc, #148]	; (8005000 <UART_AdvFeatureConfig+0x158>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	0019      	movs	r1, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2240      	movs	r2, #64	; 0x40
 8004f82:	4013      	ands	r3, r2
 8004f84:	d01d      	beq.n	8004fc2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <UART_AdvFeatureConfig+0x15c>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	0019      	movs	r1, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	035b      	lsls	r3, r3, #13
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d10b      	bne.n	8004fc2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4a15      	ldr	r2, [pc, #84]	; (8005008 <UART_AdvFeatureConfig+0x160>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	0019      	movs	r1, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	2280      	movs	r2, #128	; 0x80
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	4a0e      	ldr	r2, [pc, #56]	; (800500c <UART_AdvFeatureConfig+0x164>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  }
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b002      	add	sp, #8
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	ffff7fff 	.word	0xffff7fff
 8004ff0:	fffdffff 	.word	0xfffdffff
 8004ff4:	fffeffff 	.word	0xfffeffff
 8004ff8:	fffbffff 	.word	0xfffbffff
 8004ffc:	ffffefff 	.word	0xffffefff
 8005000:	ffffdfff 	.word	0xffffdfff
 8005004:	ffefffff 	.word	0xffefffff
 8005008:	ff9fffff 	.word	0xff9fffff
 800500c:	fff7ffff 	.word	0xfff7ffff

08005010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b092      	sub	sp, #72	; 0x48
 8005014:	af02      	add	r7, sp, #8
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2284      	movs	r2, #132	; 0x84
 800501c:	2100      	movs	r1, #0
 800501e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005020:	f7fd f98c 	bl	800233c <HAL_GetTick>
 8005024:	0003      	movs	r3, r0
 8005026:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2208      	movs	r2, #8
 8005030:	4013      	ands	r3, r2
 8005032:	2b08      	cmp	r3, #8
 8005034:	d12c      	bne.n	8005090 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005038:	2280      	movs	r2, #128	; 0x80
 800503a:	0391      	lsls	r1, r2, #14
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	4a46      	ldr	r2, [pc, #280]	; (8005158 <UART_CheckIdleState+0x148>)
 8005040:	9200      	str	r2, [sp, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	f000 f88c 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 8005048:	1e03      	subs	r3, r0, #0
 800504a:	d021      	beq.n	8005090 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504c:	f3ef 8310 	mrs	r3, PRIMASK
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005054:	63bb      	str	r3, [r7, #56]	; 0x38
 8005056:	2301      	movs	r3, #1
 8005058:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	f383 8810 	msr	PRIMASK, r3
}
 8005060:	46c0      	nop			; (mov r8, r8)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2180      	movs	r1, #128	; 0x80
 800506e:	438a      	bics	r2, r1
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	f383 8810 	msr	PRIMASK, r3
}
 800507c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2278      	movs	r2, #120	; 0x78
 8005088:	2100      	movs	r1, #0
 800508a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e05f      	b.n	8005150 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2204      	movs	r2, #4
 8005098:	4013      	ands	r3, r2
 800509a:	2b04      	cmp	r3, #4
 800509c:	d146      	bne.n	800512c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800509e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a0:	2280      	movs	r2, #128	; 0x80
 80050a2:	03d1      	lsls	r1, r2, #15
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4a2c      	ldr	r2, [pc, #176]	; (8005158 <UART_CheckIdleState+0x148>)
 80050a8:	9200      	str	r2, [sp, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f000 f858 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 80050b0:	1e03      	subs	r3, r0, #0
 80050b2:	d03b      	beq.n	800512c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b4:	f3ef 8310 	mrs	r3, PRIMASK
 80050b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
 80050be:	2301      	movs	r3, #1
 80050c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f383 8810 	msr	PRIMASK, r3
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4921      	ldr	r1, [pc, #132]	; (800515c <UART_CheckIdleState+0x14c>)
 80050d6:	400a      	ands	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f383 8810 	msr	PRIMASK, r3
}
 80050e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e6:	f3ef 8310 	mrs	r3, PRIMASK
 80050ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80050ec:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ee:	633b      	str	r3, [r7, #48]	; 0x30
 80050f0:	2301      	movs	r3, #1
 80050f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f383 8810 	msr	PRIMASK, r3
}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2101      	movs	r1, #1
 8005108:	438a      	bics	r2, r1
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2280      	movs	r2, #128	; 0x80
 800511c:	2120      	movs	r1, #32
 800511e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2278      	movs	r2, #120	; 0x78
 8005124:	2100      	movs	r1, #0
 8005126:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e011      	b.n	8005150 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2280      	movs	r2, #128	; 0x80
 8005136:	2120      	movs	r1, #32
 8005138:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2278      	movs	r2, #120	; 0x78
 800514a:	2100      	movs	r1, #0
 800514c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	0018      	movs	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	b010      	add	sp, #64	; 0x40
 8005156:	bd80      	pop	{r7, pc}
 8005158:	01ffffff 	.word	0x01ffffff
 800515c:	fffffedf 	.word	0xfffffedf

08005160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	1dfb      	adds	r3, r7, #7
 800516e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005170:	e051      	b.n	8005216 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	3301      	adds	r3, #1
 8005176:	d04e      	beq.n	8005216 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005178:	f7fd f8e0 	bl	800233c <HAL_GetTick>
 800517c:	0002      	movs	r2, r0
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	429a      	cmp	r2, r3
 8005186:	d302      	bcc.n	800518e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e051      	b.n	8005236 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2204      	movs	r2, #4
 800519a:	4013      	ands	r3, r2
 800519c:	d03b      	beq.n	8005216 <UART_WaitOnFlagUntilTimeout+0xb6>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b80      	cmp	r3, #128	; 0x80
 80051a2:	d038      	beq.n	8005216 <UART_WaitOnFlagUntilTimeout+0xb6>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d035      	beq.n	8005216 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	2208      	movs	r2, #8
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d111      	bne.n	80051dc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2208      	movs	r2, #8
 80051be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 f83c 	bl	8005240 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2284      	movs	r2, #132	; 0x84
 80051cc:	2108      	movs	r1, #8
 80051ce:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2278      	movs	r2, #120	; 0x78
 80051d4:	2100      	movs	r1, #0
 80051d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e02c      	b.n	8005236 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69da      	ldr	r2, [r3, #28]
 80051e2:	2380      	movs	r3, #128	; 0x80
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	401a      	ands	r2, r3
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d112      	bne.n	8005216 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2280      	movs	r2, #128	; 0x80
 80051f6:	0112      	lsls	r2, r2, #4
 80051f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	0018      	movs	r0, r3
 80051fe:	f000 f81f 	bl	8005240 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2284      	movs	r2, #132	; 0x84
 8005206:	2120      	movs	r1, #32
 8005208:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2278      	movs	r2, #120	; 0x78
 800520e:	2100      	movs	r1, #0
 8005210:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e00f      	b.n	8005236 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	4013      	ands	r3, r2
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	425a      	negs	r2, r3
 8005226:	4153      	adcs	r3, r2
 8005228:	b2db      	uxtb	r3, r3
 800522a:	001a      	movs	r2, r3
 800522c:	1dfb      	adds	r3, r7, #7
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d09e      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	0018      	movs	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	b004      	add	sp, #16
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08e      	sub	sp, #56	; 0x38
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005248:	f3ef 8310 	mrs	r3, PRIMASK
 800524c:	617b      	str	r3, [r7, #20]
  return(result);
 800524e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005250:	637b      	str	r3, [r7, #52]	; 0x34
 8005252:	2301      	movs	r3, #1
 8005254:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f383 8810 	msr	PRIMASK, r3
}
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4926      	ldr	r1, [pc, #152]	; (8005304 <UART_EndRxTransfer+0xc4>)
 800526a:	400a      	ands	r2, r1
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005270:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f383 8810 	msr	PRIMASK, r3
}
 8005278:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800527a:	f3ef 8310 	mrs	r3, PRIMASK
 800527e:	623b      	str	r3, [r7, #32]
  return(result);
 8005280:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005282:	633b      	str	r3, [r7, #48]	; 0x30
 8005284:	2301      	movs	r3, #1
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	f383 8810 	msr	PRIMASK, r3
}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2101      	movs	r1, #1
 800529c:	438a      	bics	r2, r1
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f383 8810 	msr	PRIMASK, r3
}
 80052aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d118      	bne.n	80052e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052b4:	f3ef 8310 	mrs	r3, PRIMASK
 80052b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052be:	2301      	movs	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f383 8810 	msr	PRIMASK, r3
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2110      	movs	r1, #16
 80052d6:	438a      	bics	r2, r1
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f383 8810 	msr	PRIMASK, r3
}
 80052e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2280      	movs	r2, #128	; 0x80
 80052ea:	2120      	movs	r1, #32
 80052ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b00e      	add	sp, #56	; 0x38
 8005300:	bd80      	pop	{r7, pc}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	fffffedf 	.word	0xfffffedf

08005308 <memset>:
 8005308:	0003      	movs	r3, r0
 800530a:	1882      	adds	r2, r0, r2
 800530c:	4293      	cmp	r3, r2
 800530e:	d100      	bne.n	8005312 <memset+0xa>
 8005310:	4770      	bx	lr
 8005312:	7019      	strb	r1, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	e7f9      	b.n	800530c <memset+0x4>

08005318 <__libc_init_array>:
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	2600      	movs	r6, #0
 800531c:	4c0c      	ldr	r4, [pc, #48]	; (8005350 <__libc_init_array+0x38>)
 800531e:	4d0d      	ldr	r5, [pc, #52]	; (8005354 <__libc_init_array+0x3c>)
 8005320:	1b64      	subs	r4, r4, r5
 8005322:	10a4      	asrs	r4, r4, #2
 8005324:	42a6      	cmp	r6, r4
 8005326:	d109      	bne.n	800533c <__libc_init_array+0x24>
 8005328:	2600      	movs	r6, #0
 800532a:	f000 f819 	bl	8005360 <_init>
 800532e:	4c0a      	ldr	r4, [pc, #40]	; (8005358 <__libc_init_array+0x40>)
 8005330:	4d0a      	ldr	r5, [pc, #40]	; (800535c <__libc_init_array+0x44>)
 8005332:	1b64      	subs	r4, r4, r5
 8005334:	10a4      	asrs	r4, r4, #2
 8005336:	42a6      	cmp	r6, r4
 8005338:	d105      	bne.n	8005346 <__libc_init_array+0x2e>
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	00b3      	lsls	r3, r6, #2
 800533e:	58eb      	ldr	r3, [r5, r3]
 8005340:	4798      	blx	r3
 8005342:	3601      	adds	r6, #1
 8005344:	e7ee      	b.n	8005324 <__libc_init_array+0xc>
 8005346:	00b3      	lsls	r3, r6, #2
 8005348:	58eb      	ldr	r3, [r5, r3]
 800534a:	4798      	blx	r3
 800534c:	3601      	adds	r6, #1
 800534e:	e7f2      	b.n	8005336 <__libc_init_array+0x1e>
 8005350:	0800542c 	.word	0x0800542c
 8005354:	0800542c 	.word	0x0800542c
 8005358:	08005430 	.word	0x08005430
 800535c:	0800542c 	.word	0x0800542c

08005360 <_init>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005366:	bc08      	pop	{r3}
 8005368:	469e      	mov	lr, r3
 800536a:	4770      	bx	lr

0800536c <_fini>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005372:	bc08      	pop	{r3}
 8005374:	469e      	mov	lr, r3
 8005376:	4770      	bx	lr
